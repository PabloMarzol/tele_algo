# giveaway_integration3.py - Multi-Type Giveaway Integration System
"""
Multi-type giveaway integration system supporting daily, weekly, and monthly giveaways
Complete version with all buttons and panels working correctly for multiple types
"""

from ga_manager import GiveawaySystem
from config_loader import ConfigLoader
from telegram.ext import CallbackQueryHandler, MessageHandler, CommandHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import os
import csv
import asyncio
from datetime import datetime, timedelta
from async_manager import prevent_concurrent_callback, setup_async_safety
from admin_permissions import SystemAction, PermissionGroup, require_permission, require_any_permission, require_draw_permission_with_time_check

from admin_permissions import (
    AdminPermissionManager, 
    SystemAction, 
    PermissionGroup,
    setup_permission_system,
    get_permission_manager,      # ‚Üê üö® ESTA L√çNEA FALTA
    require_permission,
    require_any_permission,
    require_draw_permission_with_time_check
)

# from ..mySQL.mysql_manager import MySQLManager, get_mysql_connection


class MultiGiveawayIntegration:
    """üÜï NEW: Multi-type giveaway integration system"""
    
    def __init__(self, application, mt5_api, config_file="config.json"):
        """
        Initialize multi-type giveaway integration
        
        Args:
            application: Telegram application instance
            mt5_api: MT5 API client
            config_file: Path to configuration file
        """
        self.app = application
        self.mt5_api = mt5_api
        
        # üÜï NEW: Load configuration
        self.config_loader = ConfigLoader(config_file)
        bot_config = self.config_loader.get_bot_config()
        
        self.channel_id = bot_config['channel_id']
        self.admin_id = bot_config['admin_id']
        self.admin_username = bot_config.get('admin_username', 'admin')

        # üÜï ADD: Automation management
        self.scheduler = None
        self.auto_mode_enabled = {
            'daily': False,
            'weekly': False, 
            'monthly': False
        }
        self.recurring_invitations_enabled = True
        self.invitation_frequencies = {
            'daily': 2,
            'weekly': 4,
            'monthly': 6
        }

        try:
            automation_config = self.config_loader.get_all_config().get('automation', {})
            default_modes = automation_config.get('default_auto_modes', {})

            recurring_config = automation_config.get('recurring_invitations', {})

            self.recurring_invitations_enabled = recurring_config.get('enabled', False)
            # self.invitation_frequencies['daily'] = recurring_config.get('daily_frequency_hours', 1)
            # self.invitation_frequencies['weekly'] = recurring_config.get('weekly_frequency_hours', 1)
            # self.invitation_frequencies['monthly'] = recurring_config.get('monthly_frequency_hours', 1)
            
            print(f"üîç DEBUG: recurring_invitations_enabled = {self.recurring_invitations_enabled}")
            print(f"üîç DEBUG: invitation_frequencies = {self.invitation_frequencies}")
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                self.auto_mode_enabled[giveaway_type] = default_modes.get(giveaway_type, False)
            
            

            
            logging.info(f"Automation config loaded: {self.auto_mode_enabled}")
            logging.info(f"Recurring invitations loaded: {self.recurring_invitations_enabled}")
        except Exception as e:
            logging.warning(f"No automation config found, using defaults: {e}")
        
        # üÜï NEW: Initialize multiple giveaway systems
        self.giveaway_systems = {}
        self.available_types = ['daily', 'weekly', 'monthly']

        
        for giveaway_type in self.available_types:
            self.giveaway_systems[giveaway_type] = GiveawaySystem(
                mt5_api=mt5_api,
                bot=application.bot,
                giveaway_type=giveaway_type,
                config_file=config_file
            )
        
        # Setup handlers
        self._setup_handlers()
        
        logging.info("Multi-type giveaway system integrated successfully")
        logging.info(f"Channel configured: {self.channel_id}")
        logging.info(f"Admin configured: {self.admin_id}")
        logging.info(f"Available types: {', '.join(self.available_types)}")

    def _get_permission_manager_from_callback(self):
        """üÜï Helper para obtener permission manager en funciones de callback"""
        try:
            if hasattr(self, 'app') and hasattr(self.app, 'bot_data'):
                return self.app.bot_data.get('permission_manager')
            return None
        except Exception as e:
            logging.error(f"Error getting permission manager from callback: {e}")
            return None
    
    def _setup_handlers(self):
        """üîÑ MODIFIED: Setup handlers for multiple giveaway types"""
        
        # ===== CRITICAL ORDER: FROM MOST SPECIFIC TO MOST GENERAL =====
        
        # 1Ô∏è‚É£ TYPE-SPECIFIC ADMIN COMMANDS (MOST SPECIFIC)
        for giveaway_type in self.available_types:
            # Type-specific manual giveaway commands
            self.app.add_handler(CommandHandler(f"admin_giveaway_{giveaway_type}", 
                                              lambda u, c, gt=giveaway_type: self._handle_manual_giveaway(u, c, gt)))
            
            # Type-specific manual draw commands
            self.app.add_handler(CommandHandler(f"admin_sorteo_{giveaway_type}", 
                                              lambda u, c, gt=giveaway_type: self._handle_manual_sorteo(u, c, gt)))
            
            # Type-specific stats commands
            self.app.add_handler(CommandHandler(f"admin_stats_{giveaway_type}", 
                                              lambda u, c, gt=giveaway_type: self._handle_stats_command(u, c, gt)))
            
            # Type-specific pending winners
            self.app.add_handler(CommandHandler(f"admin_pending_{giveaway_type}", 
                                              lambda u, c, gt=giveaway_type: self._handle_pending_winners(u, c, gt)))
            
            # Type-specific panels
            # self.app.add_handler(CommandHandler(f"admin_panel_{giveaway_type}", 
            #                                   lambda u, c, gt=giveaway_type: self._handle_admin_panel_type(u, c, gt)))

        # 2Ô∏è‚É£ GENERAL ADMIN COMMANDS (BACKWARD COMPATIBILITY)
        self.app.add_handler(CommandHandler("admin_giveaway", self._handle_manual_giveaway_general))
        self.app.add_handler(CommandHandler("admin_sorteo", self._handle_manual_sorteo_general))

        self.app.add_handler(CommandHandler("admin_stats", self._handle_stats_command_general))
        self.app.add_handler(CommandHandler("admin_pending_winners", self._handle_pending_winners_general))


        self.app.add_handler(CommandHandler("admin_pending_winners", self.admin_pending_winners))
        self.app.add_handler(CommandHandler("admin_panel", self.admin_panel))
        self.app.add_handler(CommandHandler("admin_confirm_payment", self.admin_confirm_payment))

        # Confirmation commands (movidos desde test_botTTT.py)
        self.app.add_handler(CommandHandler("admin_confirm_daily", 
                                        lambda u, c: self.admin_confirm_daily_payment(u, c)))
        self.app.add_handler(CommandHandler("admin_confirm_weekly", 
                                        lambda u, c: self.admin_confirm_weekly_payment(u, c)))
        self.app.add_handler(CommandHandler("admin_confirm_monthly", 
                                        lambda u, c: self.admin_confirm_monthly_payment(u, c)))

        # Pending winners commands (movidos desde test_botTTT.py)
        self.app.add_handler(CommandHandler("admin_pending_daily", 
                                        lambda u, c: self.admin_pending_daily(u, c)))
        self.app.add_handler(CommandHandler("admin_pending_weekly", 
                                        lambda u, c: self.admin_pending_weekly(u, c)))
        self.app.add_handler(CommandHandler("admin_pending_monthly", 
                                       lambda u, c: self.admin_pending_monthly(u, c)))
        
        # 3Ô∏è‚É£ UNIFIED ADMIN COMMANDS
        # self.app.add_handler(CommandHandler("admin_panel", self._handle_admin_panel_unified))
        # self.app.add_handler(CommandHandler("admin_panel_unified", self._handle_admin_panel_unified))
        # self.app.add_handler(CommandHandler("admin_pending_winners", self._handle_pending_winners_general))
        # self.app.add_handler(CommandHandler("admin_confirm_payment", self._handle_confirm_payment_general))
        
        # 4Ô∏è‚É£ ANALYTICS COMMANDS (ENHANCED FOR MULTI-TYPE)
        self.app.add_handler(CommandHandler("admin_analytics", self._handle_admin_analytics_command))
        self.app.add_handler(CommandHandler("admin_analytics_all", self._handle_admin_analytics_all_command))
        self.app.add_handler(CommandHandler("admin_user_stats", self._handle_admin_user_stats_command))
        self.app.add_handler(CommandHandler("admin_top_users", self._handle_admin_top_users_command))
        self.app.add_handler(CommandHandler("admin_account_report", self._handle_admin_account_report_command))
        self.app.add_handler(CommandHandler("admin_revenue", self._handle_admin_revenue_analysis_command))
        self.app.add_handler(CommandHandler("admin_backup", self._handle_admin_backup_command))
        
        # 5Ô∏è‚É£ DEBUG COMMANDS
        self.app.add_handler(CommandHandler("debug_pending", self._handle_debug_pending_system))
        self.app.add_handler(CommandHandler("debug_all_systems", self._handle_debug_all_systems))
        
        # 6Ô∏è‚É£ GENERAL COMMANDS
        self.app.add_handler(CommandHandler("stats", self._handle_stats_command_public))

        
        print("üîß Registering callback handlers in priority order...")
        
        # üÜï HANDLER ESPEC√çFICO PARA AUTOMATION (m√°s espec√≠fico)
        automation_handler = CallbackQueryHandler(
                self._handle_automation_callbacks,
                pattern="^automation_"
        )
        self.app.add_handler(automation_handler)
        print("‚úÖ Automation handler registered (Priority 1)")

        # ‚úÖ PARTICIPATION (TYPE-SPECIFIC)
        for giveaway_type in self.available_types:
            participate_handler = CallbackQueryHandler(
                lambda u, c, gt=giveaway_type: self.giveaway_systems[gt].handle_participate_button(u, c, gt),
                pattern=f"^giveaway_participate_{giveaway_type}$"
            )
            self.app.add_handler(participate_handler)
        print("‚úÖ Participation handlers registered (Priority 2)")
        
        # nuevo prueba =================================================
        # ===== üÜï PRIORITY 4: ADMIN CHANNEL PAYMENT CONFIRMATIONS =====
        # Solo capturar callbacks de confirmaci√≥n directa, NO los del panel
        # payment_confirmation_handler = CallbackQueryHandler(
        #     self._handle_payment_from_admin_channel,
        #     pattern="^confirm_payment_(daily|weekly|monthly)_[^_]+$"  # üéØ M√ÅS ESPEC√çFICO
        # )
        # self.app.add_handler(payment_confirmation_handler)
        # print("‚úÖ Payment confirmation handler registered (Priority 4)")
        
        # ===== PRIORITY 5: PANEL CALLBACKS (INCLUYE PENDING) =====
        panel_callbacks_handler = CallbackQueryHandler(
            self._handle_admin_panel_callbacks,
            # üîÑ FIXED: Restaurar patr√≥n original SIN exclusiones
            pattern="^(panel_|analytics_|maintenance_|user_details_|user_full_analysis_|investigate_account_|no_action|type_selector_|unified_|view_only_|confirm_payment_)"
        )
        self.app.add_handler(panel_callbacks_handler)
        # print("‚úÖ Panel callbacks handler registered (Priority 3)")
        #  nuevo prueba =================================================
        
        # panel_callbacks_handler = CallbackQueryHandler(
        #     self._handle_admin_panel_callbacks,
        #     # pattern="^(panel_|analytics_|maintenance_|user_details_|user_full_analysis_|investigate_account_|no_action|type_selector_|unified_|view_only_)"
        #     pattern="^(panel_|analytics_|maintenance_|user_details_|user_full_analysis_|investigate_account_|no_action|type_selector_|unified_|view_only_)(?!confirm_payment)"
        # )
        # self.app.add_handler(panel_callbacks_handler)
        # print("‚úÖ Panel callbacks handler registered (Priority 3)")
        
        mt5_handler = MessageHandler(
                filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND & filters.Regex(r'^\d+$'),
                self._handle_mt5_input_universal
            )
        self.app.add_handler(mt5_handler)
        print("‚úÖ MT5 input handler registered (Priority 4)")

        invalid_input_handler = MessageHandler(
            filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND & ~filters.Regex(r'^\d+$'),
            self._handle_invalid_input
        )
        self.app.add_handler(invalid_input_handler)
        
        # # ‚úÖ PAYMENT CONFIRMATION (TYPE-SPECIFIC)
        # for giveaway_type in self.available_types:
        #     confirm_payment_handler = CallbackQueryHandler(
        #         lambda u, c, gt=giveaway_type: self._handle_confirm_payment_callback(u, c, gt),
        #         pattern=f"^confirm_payment_{giveaway_type}_"
        #     )
        #     self.app.add_handler(confirm_payment_handler)

        # # ‚úÖ ADMIN PANEL CALLBACKS (EXPANDED PATTERN)
        
        # 9Ô∏è‚É£ INVALID INPUT HANDLER
        
        
        logging.info("Multi-type handlers configured in correct order")

    # ==================  AUTOMATATION  =============================
    # ==================  INVITATION    =============================

    # üÜï ADD after setup_automatic_draws() method

    # def setup_recurring_invitations(self):
    #     """üÜï Setup recurring invitation jobs"""
    #     if self.scheduler is None: # or not self.recurring_invitations_enabled
    #         logging.warning("‚ö†Ô∏è No scheduler available for recurring invitations")
    #         return
            
    #     try:
    #         from apscheduler.triggers.interval import IntervalTrigger
    #         logging.info("üîß Setting up recurring invitations...")

    #          # üîÑ IMPROVED: More detailed logging
    #         logging.info(f"üîß Setting up recurring invitations...")
    #         logging.info(f"   - Enabled: {self.recurring_invitations_enabled}")
    #         logging.info(f"   - Frequencies: {self.invitation_frequencies}")
        
    #         # Lista de trabajos a crear
    #         jobs_to_create = [
    #             ('recurring_daily_invitations', 'daily', self.invitation_frequencies['daily']),
    #             ('recurring_weekly_invitations', 'weekly', self.invitation_frequencies['weekly']),
    #             ('recurring_monthly_invitations', 'monthly', self.invitation_frequencies['monthly'])
    #         ]
            
    #         successful_jobs = 0
            
    #         for job_id, giveaway_type, frequency in jobs_to_create:
    #             try:
    #                 # Remover trabajo existente si existe
    #                 try:
    #                     self.scheduler.remove_job(job_id)
    #                     logging.info(f"üóëÔ∏è Removed existing job: {job_id}")
    #                 except:
    #                     pass
    #                 if frequency <= 0:
    #                     logging.error(f"‚ùå Invalid frequency for {job_id}: {frequency}h")
    #                     continue
    #                 # Crear nuevo trabajo
    #                 self.scheduler.add_job(
    #                     lambda gt=giveaway_type: asyncio.create_task(self._send_recurring_invitation(gt)),
    #                     IntervalTrigger(hours=frequency),
    #                     id=job_id,
    #                     paused=not self.recurring_invitations_enabled  
    #                 )
                    
    #                 status = "üü¢ ACTIVE" if self.recurring_invitations_enabled else "‚è∏Ô∏è PAUSED"
    #                 logging.info(f"‚úÖ Created job {job_id}: every {frequency}h ({status})")
    #                 successful_jobs += 1
                    
    #             except Exception as job_error:
    #                 logging.error(f"‚ùå Failed to create job {job_id}: {job_error}")
            
    #         logging.info(f"‚úÖ Recurring invitations setup: {successful_jobs}/{len(jobs_to_create)} jobs created")
            
    #         if successful_jobs > 0:
    #             logging.info(f"üîî Recurring invitations: {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}")
    #             logging.info(f"   üìÖ Daily: every {self.invitation_frequencies['daily']}h")
    #             logging.info(f"   üìÖ Weekly: every {self.invitation_frequencies['weekly']}h")
    #             logging.info(f"   üìÖ Monthly: every {self.invitation_frequencies['monthly']}h")
            
    #     except ImportError:
    #         logging.error("‚ùå APScheduler not available for recurring invitations")
    #         self.scheduler = None
    #     except Exception as e:
    #         logging.error(f"‚ùå Error setting up recurring invitations: {e}")

    # üîÑ FIXED: setup_recurring_invitations method
    def setup_recurring_invitations(self):
        """üÜï Fixed recurring invitation jobs with proper async handling"""
        if self.scheduler is None:
            logging.warning("‚ö†Ô∏è No scheduler available for recurring invitations")
            return
            
        try:
            from apscheduler.triggers.interval import IntervalTrigger
            logging.info("üîß Setting up recurring invitations...")
        
            # Lista de trabajos a crear
            jobs_to_create = [
                ('recurring_daily_invitations', 'daily', self.invitation_frequencies['daily']),
                ('recurring_weekly_invitations', 'weekly', self.invitation_frequencies['weekly']),
                ('recurring_monthly_invitations', 'monthly', self.invitation_frequencies['monthly'])
            ]
            
            successful_jobs = 0
            
            for job_id, giveaway_type, frequency in jobs_to_create:
                try:
                    # Remover trabajo existente si existe
                    try:
                        self.scheduler.remove_job(job_id)
                        logging.info(f"üóëÔ∏è Removed existing job: {job_id}")
                    except:
                        pass
                    
                    # üÜï FIXED: Usar funci√≥n wrapper s√≠ncrona en lugar de lambda async
                    def create_sync_wrapper(gt):
                        """Create synchronous wrapper for async function"""
                        def sync_wrapper():
                            try:
                                # üÜï SOLUTION: Usar asyncio.run() para ejecutar funci√≥n async
                                import asyncio
                                import threading
                                
                                # Verificar si ya hay un loop corriendo en este thread
                                try:
                                    loop = asyncio.get_running_loop()
                                    # Si hay loop, crear task
                                    asyncio.create_task(self._send_recurring_invitation(gt))
                                except RuntimeError:
                                    # No hay loop, usar asyncio.run()
                                    asyncio.run(self._send_recurring_invitation(gt))
                                    
                            except Exception as e:
                                logging.error(f"Error in recurring invitation wrapper for {gt}: {e}")
                        
                        return sync_wrapper
                    
                    # Crear wrapper espec√≠fico para este tipo
                    wrapper_func = create_sync_wrapper(giveaway_type)
                    
                    # Agregar job con funci√≥n wrapper s√≠ncrona
                    self.scheduler.add_job(
                        wrapper_func,
                        IntervalTrigger(hours=frequency),
                        id=job_id,
                        paused=not self.recurring_invitations_enabled
                    )
                    
                    status = "üü¢ ACTIVE" if self.recurring_invitations_enabled else "‚è∏Ô∏è PAUSED"
                    logging.info(f"‚úÖ Created job {job_id}: every {frequency}h ({status})")
                    successful_jobs += 1
                    
                except Exception as job_error:
                    logging.error(f"‚ùå Failed to create job {job_id}: {job_error}")
            
            logging.info(f"‚úÖ Recurring invitations setup: {successful_jobs}/{len(jobs_to_create)} jobs created")
            
            if successful_jobs > 0:
                logging.info(f"üîî Recurring invitations: {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}")
                logging.info(f"   üìÖ Daily: every {self.invitation_frequencies['daily']}h")
                logging.info(f"   üìÖ Weekly: every {self.invitation_frequencies['weekly']}h")
                logging.info(f"   üìÖ Monthly: every {self.invitation_frequencies['monthly']}h")
            
        except ImportError:
            logging.error("‚ùå APScheduler not available for recurring invitations")
            self.scheduler = None
        except Exception as e:
            logging.error(f"‚ùå Error setting up recurring invitations: {e}")

    def _save_recurring_invitations_state(self):
        """üÜï NEW: Save recurring invitations state to config"""
        try:
            import json
            
            # Load current config
            with open("config.json", 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Update recurring invitations section
            if 'automation' not in config:
                config['automation'] = {}
            if 'recurring_invitations' not in config['automation']:
                config['automation']['recurring_invitations'] = {}
            
            config['automation']['recurring_invitations']['enabled'] = self.recurring_invitations_enabled
            
            # Save back to file
            with open("config.json", 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            logging.info(f"üíæ Recurring invitations state saved: {self.recurring_invitations_enabled}")
            
        except Exception as e:
            logging.error(f"Error saving recurring invitations state: {e}")

    async def _send_recurring_invitation(self, giveaway_type: str):
        """üÜï Send recurring invitation for specific type"""
        if not self.recurring_invitations_enabled:
            return
            
        try:
            # Check if within active hours (9 AM - 9 PM by default)
            current_hour = datetime.now().hour
            if not (9 <= current_hour <= 21):
                logging.info(f"Outside active hours for {giveaway_type} recurring invitation")
                return
            
            # Get giveaway system
            giveaway_system = self.get_giveaway_system(giveaway_type)
            if not giveaway_system:
                logging.error(f"Giveaway system not found for {giveaway_type}")
                return
            
            # Check if participation window is open (optional respect)
            automation_config = self.config_loader.get_all_config().get('automation', {})
            recurring_config = automation_config.get('recurring_invitations', {})
            respect_windows = recurring_config.get('respect_participation_windows', True)
            
            if respect_windows and not giveaway_system.is_participation_window_open(giveaway_type):
                logging.info(f"Participation window closed for {giveaway_type}, skipping recurring invitation")
                return
            
            # Send invitation
            success = await giveaway_system.send_invitation(giveaway_type)
            
            if success:
                logging.info(f"‚úÖ Recurring {giveaway_type} invitation sent successfully")
                
                # Optional: Brief admin notification (only for errors or important events)
                await self._notify_recurring_invitation_status(giveaway_type, True)
            else:
                logging.warning(f"‚ùå Failed to send recurring {giveaway_type} invitation")
                await self._notify_recurring_invitation_status(giveaway_type, False)
                
        except Exception as e:
            logging.error(f"Error sending recurring {giveaway_type} invitation: {e}")
            await self._notify_recurring_invitation_status(giveaway_type, False, str(e))

    async def _notify_recurring_invitation_status(self, giveaway_type: str, success: bool, error: str = None):
        """üÜï Notify admin of recurring invitation status (only errors)"""
        try:
            # Only notify on errors or first success of the day to avoid spam
            if success:
                return  # Don't spam admin with success notifications
                
            # Notify admin only on errors
            admin_config = self.config_loader.get_all_config().get('admin_notifications', {})
            if not admin_config.get('recurring_invitation_errors', True):
                return
                
            message = f"‚ö†Ô∏è <b>Recurring Invitation Error</b>\n\n"
            message += f"üéØ Type: {giveaway_type.upper()}\n"
            message += f"‚è∞ Time: {datetime.now().strftime('%H:%M')}\n"
            message += f"‚ùå Status: Failed to send\n"
            
            if error:
                message += f"üêõ Error: {error[:100]}..."
                
            await self.app.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logging.error(f"Error notifying recurring invitation status: {e}")

    def toggle_recurring_invitations(self) -> bool:
        """üÜï Toggle recurring invitations on/off"""
        try:
            self.recurring_invitations_enabled = not self.recurring_invitations_enabled
            logging.info(f"üîÑ Toggling recurring invitations to: {'ENABLED' if self.recurring_invitations_enabled else 'DISABLED'}")

            # üÜï NEW: Persistir el estado en configuraci√≥n
            self._save_recurring_invitations_state()
            # Solo proceder si tenemos scheduler
            if not self.scheduler:
                logging.warning("No scheduler available for recurring invitations")
                return True  # Return success even without scheduler

            invitation_job_ids = ['recurring_daily_invitations', 'recurring_weekly_invitations', 'recurring_monthly_invitations']

            # Procesar cada trabajo individualmente
            success_count = 0
            for job_id in invitation_job_ids:
                try:
                    # Verificar si el trabajo existe
                    existing_job = None
                    try:
                        existing_job = self.scheduler.get_job(job_id)
                    except Exception:
                        existing_job = None
                    
                    if existing_job:
                        # Trabajo existe, pausar o reanudar
                        if self.recurring_invitations_enabled:
                            self.scheduler.resume_job(job_id)
                            logging.info(f"‚úÖ Resumed job: {job_id}")
                        else:
                            self.scheduler.pause_job(job_id)
                            logging.info(f"‚è∏Ô∏è Paused job: {job_id}")
                        success_count += 1
                    else:
                        # Trabajo no existe, crearlo si se est√° habilitando
                        if self.recurring_invitations_enabled:
                            giveaway_type = job_id.replace('recurring_', '').replace('_invitations', '')
                            frequency = self.invitation_frequencies.get(giveaway_type, 2)
                            
                            # Crear el trabajo
                            from apscheduler.triggers.interval import IntervalTrigger
                            self.scheduler.add_job(
                                lambda gt=giveaway_type: asyncio.create_task(self._send_recurring_invitation(gt)),
                                IntervalTrigger(hours=frequency),
                                id=job_id,
                                paused=False
                            )
                            logging.info(f"‚úÖ Created and started job: {job_id}")
                            success_count += 1
                        else:
                            logging.info(f"‚ÑπÔ∏è Job {job_id} doesn't exist, nothing to pause")
                            success_count += 1
                            
                except Exception as job_error:
                    logging.error(f"‚ùå Error processing job {job_id}: {job_error}")
                    continue
            
            # Resultado final
            logging.info(f"‚úÖ Recurring invitations toggle completed: {success_count}/{len(invitation_job_ids)} jobs processed")
            logging.info(f"üîî Recurring invitations are now: {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}")
            return True
        except Exception as e:
            logging.error(f"Error toggling recurring invitations: {e}")
            return False

    async def _show_frequency_settings(self, query):
        """üÜï Show frequency settings panel"""
        try:
            message = f"""‚è∞ <b>INVITATION FREQUENCY SETTINGS</b>

    üîî <b>Current Frequencies:</b>
    ‚îú‚îÄ Daily: Every {self.invitation_frequencies['daily']} hours
    ‚îú‚îÄ Weekly: Every {self.invitation_frequencies['weekly']} hours
    ‚îî‚îÄ Monthly: Every {self.invitation_frequencies['monthly']} hours

    üí° <b>Recommended Frequencies:</b>
    - Daily: 2-4 hours (high engagement)
    - Weekly: 4-6 hours (moderate promotion)
    - Monthly: 6-8 hours (background promotion)

    ‚ö†Ô∏è <b>Note:</b> Too frequent invitations may overwhelm users.
    Current settings work well for balanced engagement."""

            buttons = [
                [
                    InlineKeyboardButton("Daily üîÇ 2h", callback_data="freq_daily_2"),
                    InlineKeyboardButton("Daily üîÇ 3h", callback_data="freq_daily_3"),
                    InlineKeyboardButton("Daily üîÇ 4h", callback_data="freq_daily_4")
                ],
                [
                    InlineKeyboardButton("Weekly üîÇ 4h", callback_data="freq_weekly_4"),
                    InlineKeyboardButton("Weekly üîÇ 6h", callback_data="freq_weekly_6"),
                    InlineKeyboardButton("Weekly üîÇ 8h", callback_data="freq_weekly_8")
                ],
                [
                    InlineKeyboardButton("Monthly üîÇ 6h", callback_data="freq_monthly_6"),
                    InlineKeyboardButton("Monthly üîÇ 8h", callback_data="freq_monthly_8"),
                    InlineKeyboardButton("Monthly üîÇ 12h", callback_data="freq_monthly_12")
                ],
                [
                    InlineKeyboardButton("üè† Back to Automation", callback_data="automation_control")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing frequency settings: {e}")
            await query.edit_message_text("‚ùå Error loading frequency settings")


    # ==================  AUTOMATATION  =============================
    # ==================     DRAW       =============================

    # üÜï ADD: Scheduler setup method (after line 100)
    # def setup_automatic_draws(self):
    #     """üÜï Initialize the automatic draw scheduler"""
    #     if self.scheduler is None:
    #         try:
    #             from apscheduler.schedulers.asyncio import AsyncIOScheduler
    #             from apscheduler.triggers.cron import CronTrigger
                
    #             self.scheduler = AsyncIOScheduler()
                
    #             # Daily: Monday-Friday at 5:00 PM London Time
    #             self.scheduler.add_job(
    #                 self._execute_automatic_daily_draw,
    #                 CronTrigger(day_of_week='mon-fri', hour=17, minute=0, timezone='Europe/London'),
    #                 id='auto_daily_draw',
    #                 paused=not self.auto_mode_enabled['daily']
    #             )
                
    #             # Weekly: Friday at 5:15 PM London Time
    #             self.scheduler.add_job(
    #                 self._execute_automatic_weekly_draw,
    #                 CronTrigger(day_of_week='fri', hour=17, minute=15, timezone='Europe/London'),
    #                 id='auto_weekly_draw',
    #                 paused=not self.auto_mode_enabled['weekly']
    #             )
                
    #             # Monthly: Last Friday at 5:30 PM London Time
    #             self.scheduler.add_job(
    #                 self._execute_automatic_monthly_draw,
    #                 CronTrigger(day='last fri', hour=17, minute=30, timezone='Europe/London'),
    #                 id='auto_monthly_draw',
    #                 paused=not self.auto_mode_enabled['monthly']
    #             )
                
    #             self.scheduler.start()

    #             # üÜï ADD: Setup recurring invitations
    #             if self.scheduler.running:
    #                 self.setup_recurring_invitations()
    #             else:
    #                 logging.warning("Scheduler not running, skipping recurring invitations setup")
                
    #             enabled_types = [t for t, enabled in self.auto_mode_enabled.items() if enabled]
    #             logging.info(f"‚úÖ Automatic draw scheduler initialized")
    #             logging.info(f"ü§ñ Auto-enabled types: {enabled_types if enabled_types else 'None'}")
                
    #         except ImportError:
    #             logging.error("‚ùå APScheduler not installed. Run: pip install apscheduler")
    #             self.scheduler = None
    #         except Exception as e:
    #             logging.error(f"‚ùå Error setting up scheduler: {e}")
    #             self.scheduler = None

    # üîÑ ENHANCED: setup_automatic_draws method
    def setup_automatic_draws(self):
        """üÜï Enhanced scheduler using config.json for flexibility"""
        if self.scheduler is None:
            try:
                from apscheduler.schedulers.asyncio import AsyncIOScheduler
                from apscheduler.triggers.cron import CronTrigger
                
                self.scheduler = AsyncIOScheduler()
                
                # üÜï NUEVO: Leer horarios desde config.json
                giveaway_configs = self.config_loader.get_giveaway_configs()
                timezone = self.config_loader.get_timezone()
                
                # üîÑ MANTENER: Wrappers s√≠ncronos (ya funcionan bien)
                def create_draw_wrapper(draw_method):
                    """Create synchronous wrapper for async draw methods"""
                    def sync_wrapper():
                        try:
                            import asyncio
                            
                            # Verificar si hay loop corriendo
                            try:
                                loop = asyncio.get_running_loop()
                                # Si hay loop, crear task
                                asyncio.create_task(draw_method())
                            except RuntimeError:
                                # No hay loop, usar asyncio.run()
                                asyncio.run(draw_method())
                                
                        except Exception as e:
                            logging.error(f"Error in draw wrapper: {e}")
                    
                    return sync_wrapper
                
                # Create wrappers
                daily_wrapper = create_draw_wrapper(self._execute_automatic_daily_draw)
                weekly_wrapper = create_draw_wrapper(self._execute_automatic_weekly_draw)
                monthly_wrapper = create_draw_wrapper(self._execute_automatic_monthly_draw)
                
                # üÜï NUEVO: Usar configuraci√≥n en lugar de hardcode
                try:
                    # DAILY schedule from config
                    daily_schedule = giveaway_configs['daily']['draw_schedule']
                    self.scheduler.add_job(
                        daily_wrapper,
                        CronTrigger(
                            day_of_week=daily_schedule['days'],
                            hour=daily_schedule['hour'],
                            minute=daily_schedule['minute'],
                            timezone=timezone
                        ),
                        id='auto_daily_draw',
                        paused=not self.auto_mode_enabled['daily']
                    )
                    
                    # WEEKLY schedule from config
                    weekly_schedule = giveaway_configs['weekly']['draw_schedule']
                    weekly_day = self._convert_day_name_to_cron(weekly_schedule['day'])
                    self.scheduler.add_job(
                        weekly_wrapper,
                        CronTrigger(
                            day_of_week=weekly_day,
                            hour=weekly_schedule['hour'],
                            minute=weekly_schedule['minute'],
                            timezone=timezone
                        ),
                        id='auto_weekly_draw',
                        paused=not self.auto_mode_enabled['weekly']
                    )
                    
                    # MONTHLY schedule from config
                    monthly_schedule = giveaway_configs['monthly']['draw_schedule']
                    monthly_day = self._convert_day_name_to_cron(monthly_schedule['day'])
                    self.scheduler.add_job(
                        monthly_wrapper,
                        CronTrigger(
                            day=monthly_day,
                            hour=monthly_schedule['hour'],
                            minute=monthly_schedule['minute'],
                            timezone=timezone
                        ),
                        id='auto_monthly_draw',
                        paused=not self.auto_mode_enabled['monthly']
                    )
                    
                    logging.info(f"‚úÖ Scheduler configured from config.json:")
                    logging.info(f"   üìÖ Daily: {daily_schedule['days']} at {daily_schedule['hour']}:{daily_schedule['minute']:02d}")
                    logging.info(f"   üìÖ Weekly: {weekly_day} at {weekly_schedule['hour']}:{weekly_schedule['minute']:02d}")
                    logging.info(f"   üìÖ Monthly: {monthly_day} at {monthly_schedule['hour']}:{monthly_schedule['minute']:02d}")
                    
                except KeyError as config_error:
                    logging.warning(f"‚ö†Ô∏è Config incomplete, using fallback hardcoded schedules: {config_error}")
                    
                    # üÜï FALLBACK: Usar tus horarios hardcoded actuales si config falla
                    self.scheduler.add_job(
                        daily_wrapper,
                        CronTrigger(day_of_week='mon-fri', hour=18, minute=10, timezone='Europe/London'),
                        id='auto_daily_draw',
                        paused=not self.auto_mode_enabled['daily']
                    )
                    
                    self.scheduler.add_job(
                        weekly_wrapper,
                        CronTrigger(day_of_week='fri', hour=18, minute=12, timezone='Europe/London'),
                        id='auto_weekly_draw',
                        paused=not self.auto_mode_enabled['weekly']
                    )
                    
                    self.scheduler.add_job(
                        monthly_wrapper,
                        CronTrigger(day='last fri', hour=18, minute=15, timezone='Europe/London'),
                        id='auto_monthly_draw',
                        paused=not self.auto_mode_enabled['monthly']
                    )
                    
                    logging.info(f"‚úÖ Scheduler configured with fallback hardcoded times")
                
                self.scheduler.start()

                # Setup recurring invitations
                if self.scheduler.running:
                    self.setup_recurring_invitations()
                    logging.info("‚úÖ Recurring invitations setup completed")
                else:
                    logging.warning("Scheduler not running, skipping recurring invitations setup")
                    
                enabled_types = [t for t, enabled in self.auto_mode_enabled.items() if enabled]
                logging.info(f"‚úÖ Automatic draw scheduler initialized")
                logging.info(f"ü§ñ Auto-enabled types: {enabled_types if enabled_types else 'None'}")
                
            except ImportError:
                logging.error("‚ùå APScheduler not installed. Run: pip install apscheduler")
                self.scheduler = None
            except Exception as e:
                logging.error(f"‚ùå Error setting up scheduler: {e}")
                self.scheduler = None

    # üÜï ADD: Helper function despu√©s del m√©todo setup_automatic_draws
    def _convert_day_name_to_cron(self, day_name):
        """Convert config day names to APScheduler cron format"""
        day_mapping = {
            'monday': 'mon',
            'tuesday': 'tue', 
            'wednesday': 'wed',
            'thursday': 'thu',
            'friday': 'fri',
            'saturday': 'sat',
            'sunday': 'sun',
            'last_friday': 'last fri',
            'last_monday': 'last mon'
        }
        
        return day_mapping.get(str(day_name).lower(), day_name)

    # üÜï ADD: Automatic execution methods (after setup_automatic_draws)
    async def _execute_automatic_daily_draw(self):
        """üÜï Execute automatic daily draw"""
        if not self.auto_mode_enabled['daily']:
            return
            
        try:
            logging.info("ü§ñ Starting automatic daily draw...")
            
            giveaway_system = self.get_giveaway_system('daily')
            if not giveaway_system:
                raise Exception("Daily giveaway system not available")
            
            # Check if already executed today
            today = datetime.now().strftime('%Y-%m-%d')
            pending_winners = giveaway_system.get_pending_winners('daily')
            today_pending = [w for w in pending_winners if w.get('date', '').startswith(today)]
            
            if today_pending:
                logging.info("‚ÑπÔ∏è Daily draw already executed today, skipping automatic draw")
                return
            
            # Execute the draw using existing logic
            await giveaway_system.run_giveaway('daily')
            
            # Check results and notify
            new_pending = giveaway_system.get_pending_winners('daily')
            today_winners = [w for w in new_pending if w.get('date', '').startswith(today)]
            
            if today_winners:
                winner = today_winners[0]
                await self._notify_automatic_winner('daily', winner)
                logging.info(f"‚úÖ Automatic daily draw completed - Winner: {winner.get('first_name', 'Unknown')}")
            else:
                await self._notify_no_participants('daily')
                logging.info("‚úÖ Automatic daily draw completed - No eligible participants")
                
        except Exception as e:
            logging.error(f"‚ùå Error in automatic daily draw: {e}")
            await self._notify_draw_error('daily', str(e))

    async def _execute_automatic_weekly_draw(self):
        """üÜï Execute automatic weekly draw"""
        if not self.auto_mode_enabled['weekly']:
            return
            
        try:
            logging.info("ü§ñ Starting automatic weekly draw...")
            
            giveaway_system = self.get_giveaway_system('weekly')
            if not giveaway_system:
                raise Exception("Weekly giveaway system not available")
            
            # Check if already executed today
            today = datetime.now().strftime('%Y-%m-%d')
            pending_winners = giveaway_system.get_pending_winners('weekly')
            today_pending = [w for w in pending_winners if w.get('date', '').startswith(today)]
            
            if today_pending:
                logging.info("‚ÑπÔ∏è Weekly draw already executed today, skipping automatic draw")
                return
            
            await giveaway_system.run_giveaway('weekly')
            
            new_pending = giveaway_system.get_pending_winners('weekly')
            today_winners = [w for w in new_pending if w.get('date', '').startswith(today)]
            
            if today_winners:
                winner = today_winners[0]
                await self._notify_automatic_winner('weekly', winner)
                logging.info(f"‚úÖ Automatic weekly draw completed - Winner: {winner.get('first_name', 'Unknown')}")
            else:
                await self._notify_no_participants('weekly')
                logging.info("‚úÖ Automatic weekly draw completed - No eligible participants")
                
        except Exception as e:
            logging.error(f"‚ùå Error in automatic weekly draw: {e}")
            await self._notify_draw_error('weekly', str(e))

    async def _execute_automatic_monthly_draw(self):
        """üÜï Execute automatic monthly draw"""
        if not self.auto_mode_enabled['monthly']:
            return
            
        try:
            logging.info("ü§ñ Starting automatic monthly draw...")
            
            giveaway_system = self.get_giveaway_system('monthly')
            if not giveaway_system:
                raise Exception("Monthly giveaway system not available")
            
            # Check if already executed today
            today = datetime.now().strftime('%Y-%m-%d')
            pending_winners = giveaway_system.get_pending_winners('monthly')
            today_pending = [w for w in pending_winners if w.get('date', '').startswith(today)]
            
            if today_pending:
                logging.info("‚ÑπÔ∏è Monthly draw already executed today, skipping automatic draw")
                return
            
            await giveaway_system.run_giveaway('monthly')
            
            new_pending = giveaway_system.get_pending_winners('monthly')
            today_winners = [w for w in new_pending if w.get('date', '').startswith(today)]
            
            if today_winners:
                winner = today_winners[0]
                await self._notify_automatic_winner('monthly', winner)
                logging.info(f"‚úÖ Automatic monthly draw completed - Winner: {winner.get('first_name', 'Unknown')}")
            else:
                await self._notify_no_participants('monthly')
                logging.info("‚úÖ Automatic monthly draw completed - No eligible participants")
                
        except Exception as e:
            logging.error(f"‚ùå Error in automatic monthly draw: {e}")
            await self._notify_draw_error('monthly', str(e))

    async def _notify_main_admin_only(self, winner, giveaway_type, executed_by):
        """üÜï NEW: Send notification ONLY to main administrator"""
        try:
            # Get main admin ID from config
            main_admin_id = self.admin_id  # This is your ID from config
            
            username = winner.get('username', '').strip()
            first_name = winner.get('first_name', 'N/A')
            winner_display = f"@{username}" if username else first_name
            
            # Get prize amount
            giveaway_system = self.get_giveaway_system(giveaway_type)
            prize = giveaway_system.get_prize_amount(giveaway_type)
            
            # Create comprehensive notification for main admin
            main_admin_message = f"""ü§ñ <b>AUTOMATIC {giveaway_type.upper()} WINNER - MAIN ADMIN NOTIFICATION</b>

    üéâ <b>Winner Selected:</b> {first_name} ({winner_display})
    üìä <b>VFX MT5 Account:</b> <code>{winner['mt5_account']}</code>
    üí∞ <b>Prize:</b> ${prize} USD
    üéØ <b>Giveaway Type:</b> {giveaway_type.upper()}
    üë§ <b>Executed by:</b> {executed_by}
    üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

    ‚ö†Ô∏è <b>PAYMENT REQUIRED:</b>
    üí∏ Transfer ${prize} USD to VFX MT5 account: <code>{winner['mt5_account']}</code>

    üí° <b>Confirmation Commands:</b>
    - <code>/admin_confirm_{giveaway_type} {username if username else winner['telegram_id']}</code>
    - Or use the admin panel buttons

    üîî <b>Notification Status:</b>
    ‚îú‚îÄ Main Admin: ‚úÖ You (individual notification)
    ‚îú‚îÄ Admin Channel: ‚úÖ Group notification sent
    ‚îî‚îÄ Other Admins: ‚ùå No individual spam

    üéØ <b>Next Steps:</b>
    1Ô∏è‚É£ Process payment to VFX MT5 account
    2Ô∏è‚É£ Confirm using command or admin panel
    3Ô∏è‚É£ Winner will be announced automatically"""

            # Send only to main admin
            await self.app.bot.send_message(
                chat_id=main_admin_id,
                text=main_admin_message,
                parse_mode='HTML'
            )
            
            logging.info(f"Main admin notification sent for {giveaway_type} winner: {winner['telegram_id']}")
            
        except Exception as e:
            logging.error(f"Error notifying main admin: {e}")
    # üÜï ADD: Notification methods (after automatic execution methods)
    async def _notify_automatic_winner(self, giveaway_type: str, winner):
        """üÜï Notify about automatic draw winner"""
        try:
            # Create context for existing notification system
            # class MockContext:
            #     def __init__(self, bot):
            #         self.bot = bot
            
            # mock_context = MockContext(self.app.bot)
            
            # Use existing notification method - zero redundancy
            # await self.notify_payment_admins_new_winner(
            #     None, 
            #     winner, 
            #     giveaway_type, 
            #     'Automatic System'
            # )
            # 1Ô∏è‚É£ Send to main admin (individual)
            await self._notify_main_admin_only(winner, giveaway_type, 'Automatic System')
            
            # Additional admin channel notification if configured
            await self._send_admin_channel_notification(giveaway_type, winner, 'winner')
            
        except Exception as e:
            logging.error(f"Error notifying automatic winner: {e}")


    async def _notify_no_participants(self, giveaway_type: str):
        """üÜï Notify about automatic draw with no participants"""
        try:
            message = f"""‚ÑπÔ∏è <b>AUTOMATIC DRAW - NO PARTICIPANTS</b>

üéØ <b>Type:</b> {giveaway_type.upper()} Giveaway
üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üë• <b>Result:</b> No eligible participants found

üí° This is normal - the system will try again at the next scheduled time.
üì¢ Consider promoting the giveaway to increase participation."""

            await self._send_admin_channel_notification(giveaway_type, None, 'no_participants', message)
            
        except Exception as e:
            logging.error(f"Error notifying no participants: {e}")

    async def _notify_draw_error(self, giveaway_type: str, error: str):
        """üÜï Notify admins of automatic draw errors"""
        try:
            error_message = f"""üö® <b>AUTOMATIC DRAW ERROR</b>

üéØ <b>Type:</b> {giveaway_type.upper()} Giveaway
‚ùå <b>Error:</b> {error}
üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîß <b>Actions:</b>
‚Ä¢ Check system status with /health_check
‚Ä¢ Run manual draw: /admin_run_{giveaway_type}
‚Ä¢ Check automation: /admin_panel ‚Üí Automation
‚Ä¢ Contact technical support if error persists

‚ö†Ô∏è <b>Impact:</b> Participants may need to be notified of delay."""

            # Send to main admin
            await self.app.bot.send_message(
                chat_id=self.admin_id,
                text=error_message,
                parse_mode='HTML'
            )
            
            # Send to admin channel
            await self._send_admin_channel_notification(giveaway_type, None, 'error', error_message)
            
        except Exception as e:
            logging.error(f"Error notifying draw error: {e}")

    async def _send_admin_channel_notification(self, giveaway_type: str, winner=None, notification_type='winner', custom_message=None):
        """üÜï Send notification to admin channel if configured"""
        try:
            admin_config = self.config_loader.get_all_config().get('admin_notifications', {})
            admin_channel_id = admin_config.get('admin_channel_id')
            
            if not admin_channel_id  or admin_channel_id == "-1001234567890":
                logging.info("No admin channel configured, skipping group notification")
                return
                
            
            if custom_message:
                message = custom_message
            elif notification_type == 'winner' and winner:
                prize = self.get_giveaway_system(giveaway_type).get_prize_amount(giveaway_type)
                username = winner.get('username', '')
                username_display = f"@{username}" if username else "no_username"
                
                message = f"""ü§ñ <b>AUTOMATIC DRAW COMPLETED</b>

üéØ <b>Giveaway:</b> {giveaway_type.upper()} (${prize} USD)
üéâ <b>Winner:</b> {winner.get('first_name', 'N/A')} ({username_display})
üìä <b> VFX MT5 Account:</b> <code>{winner['mt5_account']}</code>
üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö†Ô∏è <b>PAYMENT REQUIRED</b> Pending manual transfer
üí∏ Transfer ${prize} USD to account <code>{winner['mt5_account']}</code>
üì± Confirm: <code>/admin_confirm_{giveaway_type} {username or winner['telegram_id']}</code>

üîî Individual notifications sent to authorized payment admins.
üéØ Winner will receive private congratulation after payment confirmation."""
            else:
                return  # No message to send
            
            await self.app.bot.send_message(
                chat_id=admin_channel_id,
                text=message,
                parse_mode='HTML'
            )
            
            logging.info(f"‚úÖ Admin channel notification sent for {giveaway_type} {notification_type}")
            
        except Exception as e:
            logging.error(f"Error sending admin channel notification: {e}")

    # üÜï ADD: Automation control methods (after notification methods)
    def toggle_automatic_mode(self, giveaway_type: str, enabled: bool) -> bool:
        """üÜï Toggle automation for specific giveaway type"""
        if giveaway_type not in self.auto_mode_enabled:
            return False
            
        try:
            self.auto_mode_enabled[giveaway_type] = enabled
            
            if self.scheduler:
                job_id = f'auto_{giveaway_type}_draw'
                if enabled:
                    self.scheduler.resume_job(job_id)
                    logging.info(f"‚úÖ {giveaway_type.title()} automatic draws ENABLED")
                else:
                    self.scheduler.pause_job(job_id)
                    logging.info(f"‚è∏Ô∏è {giveaway_type.title()} automatic draws DISABLED")
            
            return True
            
        except Exception as e:
            logging.error(f"Error toggling {giveaway_type} automation: {e}")
            return False

    def get_automation_status(self) -> dict:
        """üÜï Get current automation status"""
        return {
            'daily': self.auto_mode_enabled['daily'],
            'weekly': self.auto_mode_enabled['weekly'],
            'monthly': self.auto_mode_enabled['monthly'],
            'scheduler_running': self.scheduler.running if self.scheduler else False,
            'scheduler_available': self.scheduler is not None
        }

    def shutdown_scheduler(self):
        """üÜï Clean shutdown of scheduler"""
        if self.scheduler:
            try:
                self.scheduler.shutdown()
                logging.info("‚úÖ Scheduler shutdown completed")
            except Exception as e:
                logging.error(f"Error shutting down scheduler: {e}")

     # üÜï ADD: Automation callback handler (after _handle_admin_panel_callbacks)
    
    async def _handle_automation_callbacks(self, update, context):
        """üÜï Handle automation control callbacks"""

        query = update.callback_query
    
        # 2Ô∏è‚É£ SEGUNDO: INMEDIATAMENTE responder al callback (OBLIGATORIO)
        await query.answer()  # ‚Üê AQU√ç VA, L√çNEA 3 DE LA FUNCI√ìN

        # query = update.callback_query 
        callback_data = query.data
        user_id = query.from_user.id

        
        # Verify permissions
        permission_manager = self._get_permission_manager_from_callback()
        if not permission_manager or not permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
            print(f"‚ùå DEBUG: Permission denied for user {user_id}")
            await query.edit_message_text(
                "‚ùå <b>Access Denied</b>\n\nAutomation control requires MANAGE_ADMINS permission.",
                parse_mode='HTML'
            )
            return
        print(f"‚úÖ DEBUG: Permission granted for user {user_id}")
        
        try:
            if callback_data == "automation_control":
                await self._show_automation_control_panel(query, context)
                
            elif callback_data.startswith("automation_toggle_"):

                giveaway_type = callback_data.replace("automation_toggle_", "")

                # üêõ BUGFIX: Manejar caso especial de invitations
                if giveaway_type == "invitations":
                    print(f"üîî DEBUG: Processing invitation toggle")
                    # Handle recurring invitations toggle
                    success = self.toggle_recurring_invitations()
                    
                    if success:
                        status_text = "ENABLED" if self.recurring_invitations_enabled else "DISABLED"
                        response_message = f"""‚úÖ <b>Recurring Invitations {status_text}</b>

    üîî <b>Status:</b> {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}

    ‚è∞ <b>Frequencies:</b>
    ‚îú‚îÄ Daily: every {self.invitation_frequencies['daily']} hours
    ‚îú‚îÄ Weekly: every {self.invitation_frequencies['weekly']} hours
    ‚îî‚îÄ Monthly: every {self.invitation_frequencies['monthly']} hours

    üí° <b>What this means:</b>
    - Automatic invitations will {'start sending' if self.recurring_invitations_enabled else 'stop sending'}
    - Manual invitations are always available
    - Settings can be changed anytime

    üéõÔ∏è Use "‚è∞ Set Frequencies" to adjust timing."""
                        
                        buttons = [[InlineKeyboardButton("üè† Back to Automation", callback_data="automation_control")]]
                        reply_markup = InlineKeyboardMarkup(buttons)
                        
                        await query.edit_message_text(
                            response_message, 
                            parse_mode='HTML',
                            reply_markup=reply_markup
                        )
                    else:
                        await query.edit_message_text(
                            f"‚ùå <b>Error toggling invitations</b>\n\n"
                            f"Could not change recurring invitation settings.\n\n"
                            f"üí° Current status: {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}",
                            parse_mode='HTML'
                        )
                    return
                
                # Handle giveaway type toggles (daily, weekly, monthly)
                if giveaway_type in ['daily', 'weekly', 'monthly']:
                    current_status = self.get_automation_status()
                    new_status = not current_status[giveaway_type]
                    
                    success = self.toggle_automatic_mode(giveaway_type, new_status)
                    
                    if success:
                        status_text = "ENABLED" if new_status else "DISABLED"
                        await query.edit_message_text(
                            f"‚úÖ <b>{giveaway_type.title()} automation {status_text}</b>\n\n"
                            f"ü§ñ Automatic draws: {'üü¢ ON' if new_status else 'üî¥ OFF'}\n"
                            f"üìÖ Next scheduled: {self._get_next_execution_time(giveaway_type) if new_status else 'Manual only'}",
                            parse_mode='HTML'
                        )
                    else:
                        await query.edit_message_text("‚ùå Error toggling automation")
                    return
                    
            elif callback_data == "automation_enable_all":
                results = {}
                for giveaway_type in ['daily', 'weekly', 'monthly']:
                    results[giveaway_type] = self.toggle_automatic_mode(giveaway_type, True)
                
                successful = sum(1 for success in results.values() if success)
                
                await query.edit_message_text(
                    f"‚úÖ <b>Bulk Automation Enable</b>\n\n"
                    f"üü¢ Successfully enabled: {successful}/3 types\n"
                    f"ü§ñ All automatic draws are now ACTIVE\n\n"
                    f"Daily: Monday-Friday at 5:00 PM\n"
                    f"Weekly: Friday at 5:15 PM\n"
                    f"Monthly: Last Friday at 5:30 PM\n\n"
                    f"London Time Zone",
                    parse_mode='HTML'
                )
                
            elif callback_data == "automation_disable_all":
                results = {}
                for giveaway_type in ['daily', 'weekly', 'monthly']:
                    results[giveaway_type] = self.toggle_automatic_mode(giveaway_type, False)
                
                successful = sum(1 for success in results.values() if success)
                
                await query.edit_message_text(
                    f"‚è∏Ô∏è <b>Bulk Automation Disable</b>\n\n"
                    f"üî¥ Successfully disabled: {successful}/3 types\n"
                    f"ü§ñ All automatic draws are now INACTIVE\n\n"
                    f"üìå Manual draws remain available:\n"
                    f"‚Ä¢ /admin_run_daily\n"
                    f"‚Ä¢ /admin_run_weekly\n"
                    f"‚Ä¢ /admin_run_monthly",
                    parse_mode='HTML'
                )

            # elif callback_data == "automation_toggle_invitations":
            #     try:
            #         logging.info(f"üîî Processing invitation toggle request from user {user_id}")
                    
            #         # Intentar el toggle
            #         success = self.toggle_recurring_invitations()
                    
            #         if success:
            #             status_text = "ENABLED" if self.recurring_invitations_enabled else "DISABLED"
                        
            #             # Mensaje de confirmaci√≥n detallado
            #             response_message = f"""‚úÖ <b>Recurring Invitations {status_text}</b>

            # üîî <b>Status:</b> {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}

            # ‚è∞ <b>Frequencies:</b>
            # ‚îú‚îÄ Daily: every {self.invitation_frequencies['daily']} hours
            # ‚îú‚îÄ Weekly: every {self.invitation_frequencies['weekly']} hours
            # ‚îî‚îÄ Monthly: every {self.invitation_frequencies['monthly']} hours

            # üí° <b>What this means:</b>
            # - Automatic invitations will {'start sending' if self.recurring_invitations_enabled else 'stop sending'}
            # - Manual invitations are always available
            # - Settings can be changed anytime

            # üéõÔ∏è Use "‚è∞ Set Frequencies" to adjust timing."""
                        
            #             await query.edit_message_text(response_message, parse_mode='HTML')
                        
            #         else:
            #             # Error en el toggle
            #             await query.edit_message_text(
            #                 f"‚ùå <b>Error toggling invitations</b>\n\n"
            #                 f"Could not change recurring invitation settings.\n\n"
            #                 f"üí° Current status remains: {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}\n\n"
            #                 f"Check logs for details or contact administrator.",
            #                 parse_mode='HTML'
            #             )
                
            #     except Exception as toggle_error:
            #         logging.error(f"‚ùå Exception in invitation toggle: {toggle_error}")
            #         await query.edit_message_text(
            #             f"‚ùå <b>System Error</b>\n\n"
            #             f"An error occurred while processing the invitation toggle.\n\n"
            #             f"Error: {str(toggle_error)[:100]}...\n\n"
            #             f"üí° Try refreshing the automation panel or contact administrator.",
            #             parse_mode='HTML'
            #         )

            elif callback_data == "automation_set_frequencies":
                await self._show_frequency_settings(query)
                
            elif callback_data == "automation_refresh":
                await self._show_automation_control_panel(query, context)
                
            elif callback_data == "automation_back_to_panel":
                await self._show_unified_panel_inline(query)
                
        except Exception as e:
            logging.error(f"Error in automation callback: {e}")
            await query.edit_message_text("‚ùå Error processing automation command")

    # üÜï ADD: Automation control panel (after _handle_automation_callbacks)
    async def _show_automation_control_panel(self, query, context):
        """üÜï Show automation control panel"""
        try:
            user_id = query.from_user.id
            permission_manager = self._get_permission_manager_from_callback()
            admin_info = permission_manager.get_admin_info(user_id) if permission_manager else None
            admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
            
            automation_status = self.get_automation_status()
            
            message = f"""ü§ñ <b>AUTOMATIC DRAW CONTROL</b>
üë§ <b>Admin:</b> {admin_name}

üìä <b>Current Automatic Draws Status:</b>
‚îú‚îÄ Daily: {'üü¢ ENABLED' if automation_status['daily'] else 'üî¥ DISABLED'}
‚îú‚îÄ Weekly: {'üü¢ ENABLED' if automation_status['weekly'] else 'üî¥ DISABLED'}
‚îú‚îÄ Monthly: {'üü¢ ENABLED' if automation_status['monthly'] else 'üî¥ DISABLED'}
‚îî‚îÄ Scheduler: {'üü¢ RUNNING' if automation_status['scheduler_running'] else 'üî¥ STOPPED'}

‚è∞ <b>Draw Schedule (London Time):</b>
‚îú‚îÄ Daily: Monday-Friday at 17:00
‚îú‚îÄ Weekly: Friday at 17:15
‚îî‚îÄ Monthly: Last Friday at 17:30

üîî <b>Recurring Invitations:</b>
‚îú‚îÄ Auto-invitations: {'üü¢ ENABLED' if self.recurring_invitations_enabled else 'üî¥ DISABLED'}
‚îú‚îÄ Daily frequency: Every {self.invitation_frequencies['daily']} hours
‚îú‚îÄ Weekly frequency: Every {self.invitation_frequencies['weekly']} hours
‚îî‚îÄ Monthly frequency: Every {self.invitation_frequencies['monthly']} hours

üîß <b>System Status:</b>
‚îú‚îÄ Scheduler Available: {'‚úÖ Yes' if automation_status['scheduler_available'] else '‚ùå No'}
‚îú‚îÄ Manual Override: ‚úÖ Always Available
‚îî‚îÄ Conflict Protection: ‚úÖ Active"""

            # Add next execution times
            # enabled_types = [t for t, enabled in automation_status.items() if enabled and t != 'scheduler_running' and t != 'scheduler_available']
            # if enabled_types:
            #     message += f"\n\nüïê <b>Next Automatic Executions:</b>"
            #     for giveaway_type in enabled_types:
            #         next_time = self._get_next_execution_time(giveaway_type)
            #         message += f"\n‚îú‚îÄ {giveaway_type.title()}: {next_time}"

            buttons = [
                [
                    InlineKeyboardButton("üïπÔ∏è Toggle Daily Draw", callback_data="automation_toggle_daily"),
                    InlineKeyboardButton("üïπÔ∏è Toggle Weekly Draw", callback_data="automation_toggle_weekly"),
                    InlineKeyboardButton("üïπÔ∏è Toggle Monthly Draw", callback_data="automation_toggle_monthly")
                ],
                
                [
                    InlineKeyboardButton("üü¢ Enable All Draws", callback_data="automation_enable_all"),
                    InlineKeyboardButton("üî¥ Disable All Draws", callback_data="automation_disable_all")
                ],
                [
                    # üÜï ADD: Recurring invitations control
                    InlineKeyboardButton("üîî Toggle Auto Invitations", callback_data="automation_toggle_invitations"),
                    InlineKeyboardButton("‚è∞ Set Invitation Freq.", callback_data="automation_set_frequencies")
                ],
                [
                    InlineKeyboardButton("üè† Back to Panel", callback_data="automation_back_to_panel")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing automation control panel: {e}")
            await query.edit_message_text("‚ùå Error loading automation control panel")

    # üÜï ADD: Helper method for next execution time
    def _get_next_execution_time(self, giveaway_type: str) -> str:
        """üÜï Get next execution time for giveaway type"""
        try:
            from datetime import datetime
            import calendar
            
            now = datetime.now()
            
            if giveaway_type == 'daily':
                # Next weekday at 17:00
                next_exec = now.replace(hour=17, minute=0, second=0, microsecond=0)
                if now >= next_exec or now.weekday() >= 5:  # Past time or weekend
                    # Move to next business day
                    days_to_add = 1
                    while True:
                        next_exec = now + timedelta(days=days_to_add)
                        if next_exec.weekday() < 5:  # Monday to Friday
                            break
                        days_to_add += 1
                    next_exec = next_exec.replace(hour=17, minute=0, second=0, microsecond=0)
                return next_exec.strftime('%Y-%m-%d at 17:00')
                
            elif giveaway_type == 'weekly':
                # Next Friday at 17:15
                days_ahead = 4 - now.weekday()  # Friday = 4
                if days_ahead <= 0 or (days_ahead == 0 and now.hour >= 17):
                    days_ahead += 7
                next_exec = now + timedelta(days=days_ahead)
                next_exec = next_exec.replace(hour=17, minute=15, second=0, microsecond=0)
                return next_exec.strftime('%Y-%m-%d at 17:15')
                
            elif giveaway_type == 'monthly':
                # Last Friday of current or next month at 17:30
                def get_last_friday(year, month):
                    last_day = calendar.monthrange(year, month)[1]
                    last_date = datetime(year, month, last_day)
                    days_back = (last_date.weekday() - 4) % 7
                    return last_date - timedelta(days=days_back)
                
                last_friday = get_last_friday(now.year, now.month)
                if now.date() > last_friday.date() or (now.date() == last_friday.date() and now.hour >= 17):
                    # Move to next month
                    if now.month == 12:
                        last_friday = get_last_friday(now.year + 1, 1)
                    else:
                        last_friday = get_last_friday(now.year, now.month + 1)
                
                next_exec = last_friday.replace(hour=17, minute=30, second=0, microsecond=0)
                return next_exec.strftime('%Y-%m-%d at 17:30')
                
        except Exception as e:
            logging.error(f"Error calculating next execution time: {e}")
            return "Check schedule"




    # ================== AUTOMATATION DRAW END =============================
    # ================== AUTOMATATION DRAW END =============================

    async def _route_mt5_input(self, update, context, giveaway_type):
        """üîÑ ENHANCED: Route MT5 input to correct giveaway system"""
        try:
            print(f"üîç DEBUG: _route_mt5_input called for {giveaway_type}")
            print(f"üîç DEBUG: awaiting_mt5_{giveaway_type} = {context.user_data.get(f'awaiting_mt5_{giveaway_type}')}")
            
            # Check if user is awaiting MT5 input for this specific type
            if context.user_data.get(f'awaiting_mt5_{giveaway_type}'):
                print(f"‚úÖ DEBUG: Processing MT5 input for {giveaway_type}")
                await self.giveaway_systems[giveaway_type].handle_mt5_input(update, context, giveaway_type)
            else:
                print(f"‚ö†Ô∏è DEBUG: User not awaiting MT5 input for {giveaway_type}")
        except Exception as e:
            logging.error(f"Error routing MT5 input for {giveaway_type}: {e}")
            print(f"‚ùå DEBUG: Error in _route_mt5_input: {e}")

    # üÜï A√ëADIR esta nueva funci√≥n en ga_integration.py:
    async def _handle_mt5_input_universal(self, update, context):
        """üÜï Handler universal para input de MT5"""
        try:
            print(f"üîç DEBUG: MT5 input received: {update.message.text}")
            
            # Verificar para qu√© tipo est√° esperando input
            for giveaway_type in self.available_types:
                if context.user_data.get(f'awaiting_mt5_{giveaway_type}'):
                    print(f"‚úÖ DEBUG: Found awaiting type: {giveaway_type}")
                    await self._route_mt5_input(update, context, giveaway_type)
                    return
            
            print("‚ö†Ô∏è DEBUG: No awaiting type found for MT5 input")
            await update.message.reply_text(
                "‚ÑπÔ∏è <b>No active registration</b>\n\nUse /start to begin participation in a giveaway.",
                parse_mode='HTML'
            )
            
        except Exception as e:
            logging.error(f"Error in universal MT5 handler: {e}")   

    async def _handle_invalid_input(self, update, context):
        """üîÑ MODIFIED: Handle invalid input with type awareness"""
        try:
            # Check which giveaway type is awaiting input
            for giveaway_type in self.available_types:
                if context.user_data.get(f'awaiting_mt5_{giveaway_type}'):
                    remaining_attempts = 4 - context.user_data.get(f'mt5_attempts_{giveaway_type}', 0)
                    
                    if remaining_attempts > 0:
                        invalid_message = f"""‚ùå <b>Invalid input</b>

Please send only your Vortex-FX MT5 account number.


‚ùå <b>Not valid:</b>
‚Ä¢ Text (like "{update.message.text[:10]}...")
‚Ä¢ Numbers with spaces
‚Ä¢ Special characters

üîÑ Attempts remaining: <b>{remaining_attempts}</b>

‚ö†Ô∏è Send only numbers:"""

                        await update.message.reply_text(invalid_message, parse_mode='HTML')
                    else:
                        # No attempts remaining
                        await self.giveaway_systems[giveaway_type]._handle_max_attempts_reached(
                            update, context, 4, giveaway_type
                        )
                    return
                    
        except Exception as e:
            logging.error(f"Error handling invalid input: {e}")



    



    # ==================== üÜï PAYMENT CONFIRMATION METHODS ====================
    async def find_winner_by_identifier(self, winner_identifier, giveaway_type, giveaway_system):
        """
        üîç Helper function to find winner by username or telegram_id
        Esta funci√≥n estaba en test_botTTT.py pero se usa en las funciones movidas
        """
        try:
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            
            for winner in pending_winners:
                winner_username = winner.get('username', '').strip()
                winner_telegram_id = winner.get('telegram_id', '').strip()
                winner_first_name = winner.get('first_name', '').strip()
                
                # Search by different criteria
                if (
                    winner_identifier == winner_telegram_id or
                    winner_identifier.lower() == f"@{winner_username}".lower() or
                    winner_identifier.lower() == winner_username.lower() or
                    (not winner_username and winner_identifier.lower() == winner_first_name.lower())
                ):
                    return winner_telegram_id
            
            return None
            
        except Exception as e:
            logging.error(f"Error finding {giveaway_type} winner by identifier: {e}")
            return None

    async def admin_confirm_payment_universal(self, update, context, giveaway_type):
        """üåü Confirmaci√≥n universal de pagos - movido desde test_botTTT.py"""
        user_id = update.effective_user.id
        permission_manager = get_permission_manager(context)
        admin_info = permission_manager.get_admin_info(user_id)
        admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
        
        # Configuraci√≥n din√°mica
        type_configs = {
            'daily': {
                'display_name': 'Daily',
                'command': '/admin_confirm_daily',
                'permission': SystemAction.CONFIRM_DAILY_PAYMENTS
            },
            'weekly': {
                'display_name': 'Weekly', 
                'command': '/admin_confirm_weekly',
                'permission': SystemAction.CONFIRM_WEEKLY_PAYMENTS
            },
            'monthly': {
                'display_name': 'Monthly',
                'command': '/admin_confirm_monthly',
                'permission': SystemAction.CONFIRM_MONTHLY_PAYMENTS
            }
        }
        
        config = type_configs.get(giveaway_type)
        if not config:
            await update.message.reply_text(f"‚ùå Invalid giveaway type: {giveaway_type}")
            return
        
        # Validaci√≥n de par√°metros
        if not context.args or len(context.args) != 1:
            await update.message.reply_text(
                f"‚ùå <b>Incorrect usage for {config['display_name']} Payment</b>\n\n"
                f"<b>Format:</b> <code>{config['command']} &lt;username_or_telegram_id&gt;</code>\n\n"
                f"<b>Examples:</b>\n"
                f"‚Ä¢ <code>{config['command']} @username</code>\n"
                f"‚Ä¢ <code>{config['command']} 123456</code>\n\n"
                f"üí° Use <code>/admin_pending_{giveaway_type}</code> to see pending {giveaway_type} winners",
                parse_mode='HTML'
            )
            return
        
        winner_identifier = context.args[0].strip()
        print(f"‚úÖ {config['display_name']} payment confirmation authorized for: {admin_name} ({user_id})")
        
        try:
            # Usar sistema existente
            giveaway_system = self.get_giveaway_system(giveaway_type)
            if not giveaway_system:
                await update.message.reply_text(
                    f"‚ùå <b>{config['display_name']} giveaway system not available</b>",
                    parse_mode='HTML'
                )
                return
            
            # Buscar ganador                     find_winner_by_identifier
            winner_telegram_id = await self.find_winner_by_identifier(winner_identifier, giveaway_type, giveaway_system)
            
            if not winner_telegram_id:
                await update.message.reply_text(
                    f"‚ùå <b>{config['display_name']} winner not found</b>\n\n"
                    f"No pending {giveaway_type} winner found with: <code>{winner_identifier}</code>\n\n"
                    f"üí° Use <code>/admin_pending_{giveaway_type}</code> to see all pending {giveaway_type} winners",
                    parse_mode='HTML'
                )
                return
            
            # Confirmar pago
            success, message = await giveaway_system.confirm_payment_and_announce(
                winner_telegram_id, user_id, giveaway_type
            )
            
            if success:
                prize = giveaway_system.get_prize_amount(giveaway_type)
                response_message = f"""‚úÖ <b>{config['display_name']} Payment Confirmed Successfully</b>

üë§ <b>Confirmed by:</b> {admin_name}
üéØ <b>Winner:</b> {winner_identifier}
üí∞ <b>Prize:</b> ${prize} USD
üé≤ <b>Giveaway Type:</b> {config['display_name']}
üìÖ <b>Confirmation Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚úÖ <b>Actions completed:</b>
‚îú‚îÄ Winner announced publicly in channel
‚îú‚îÄ Private congratulation sent to winner
‚îú‚îÄ Payment status updated in system
‚îî‚îÄ System prepared for next {giveaway_type} draw

üí° <b>Status:</b> Payment process complete ‚úì"""
                
                await update.message.reply_text(response_message, parse_mode='HTML')
                
                # Log de auditor√≠a
                permission_manager.log_action(
                    user_id, 
                    config['permission'], 
                    f"{config['display_name']} payment confirmed for {winner_identifier} (${prize})"
                )
                
            else:
                await update.message.reply_text(
                    f"‚ùå <b>Error confirming {config['display_name']} payment</b>\n\n"
                    f"Reason: {message}\n\n"
                    f"üí° This usually means:\n"
                    f"‚Ä¢ Winner was already processed\n"
                    f"‚Ä¢ System error occurred\n"
                    f"‚Ä¢ Invalid winner state\n\n"
                    f"Contact a FULL_ADMIN if the issue persists.",
                    parse_mode='HTML'
                )
                
                permission_manager.log_action(
                    user_id, 
                    config['permission'], 
                    f"Failed to confirm {giveaway_type} payment for {winner_identifier}: {message}"
                )
            
        except Exception as e:
            logging.error(f"Error in {giveaway_type} payment confirmation: {e}")
            await update.message.reply_text(
                f"‚ùå <b>System error during {config['display_name']} payment confirmation</b>\n\n"
                f"Please try again in a few moments or contact a FULL_ADMIN.",
                parse_mode='HTML'
            )


    async def admin_view_pending_universal(self, update, context, giveaway_type):
        """Ver ganadores pendientes por tipo - movido desde test_botTTT.py"""
        user_id = update.effective_user.id
        permission_manager = get_permission_manager(context)
        admin_info = permission_manager.get_admin_info(user_id)
        admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
        
        display_name = giveaway_type.title()
        
        try:
            giveaway_system = self.get_giveaway_system(giveaway_type)
            if not giveaway_system:
                await update.message.reply_text(f"‚ùå {display_name} giveaway system not available")
                return
            
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            
            if not pending_winners:
                next_draw_time = giveaway_system.get_next_draw_time(giveaway_type)
                next_draw_str = next_draw_time.strftime('%Y-%m-%d %H:%M') if next_draw_time else "Check schedule"
                
                await update.message.reply_text(
                    f"‚ÑπÔ∏è <b>No pending {giveaway_type} winners</b>\n\n"
                    f"All {giveaway_type} payments are up to date.\n\n"
                    f"üéØ <b>Next {giveaway_type} draw:</b> {next_draw_str}",
                    parse_mode='HTML'
                )
                return
            
            message = f"""üìã <b>PENDING {display_name.upper()} WINNERS ({len(pending_winners)})</b>
<i>Viewed by: {admin_name}</i>

"""
            
            prize = giveaway_system.get_prize_amount(giveaway_type)
            
            for i, winner in enumerate(pending_winners, 1):
                username = winner.get('username', '').strip()
                first_name = winner.get('first_name', 'N/A')
                
                if username:
                    display_name_winner = f"@{username}"
                    command_identifier = f"@{username}"
                else:
                    display_name_winner = f"{first_name} (ID: {winner['telegram_id']})"
                    command_identifier = winner['telegram_id']
                
                message += f"""{i}. <b>{first_name}</b> ({display_name_winner})
   üìä <b>VFX MT5 Account:</b> <code>{winner['mt5_account']}</code>
   üí∞ <b>Prize:</b> ${winner['prize']} USD
   üìÖ <b>Selected:</b> {winner['selected_time']}
   üí° <b>Command:</b> <code>/admin_confirm_{giveaway_type} {command_identifier}</code>

"""
            
            message += f"""üí° <b>Payment Instructions:</b>
1Ô∏è‚É£ Transfer the prize amount to the corresponding VFX MT5 account
2Ô∏è‚É£ Use the confirmation command shown above for each winner
3Ô∏è‚É£ Bot will automatically announce the winner and send congratulations

üìä <b>Total pending amount:</b> ${len(pending_winners) * prize} USD"""
            
            await update.message.reply_text(message, parse_mode='HTML')
            
            permission_manager.log_action(
                user_id, 
                SystemAction.VIEW_ALL_PENDING_WINNERS, 
                f"Viewed {len(pending_winners)} pending {giveaway_type} winners"
            )
            
        except Exception as e:
            logging.error(f"Error getting pending {giveaway_type} winners: {e}")
            await update.message.reply_text(f"‚ùå Error getting pending {giveaway_type} winners")


#     async def notify_payment_admins_new_winner(self, context, winner, giveaway_type, executed_by):
#         """Notificar a admins con permisos de confirmaci√≥n - movido desde test_botTTT.py"""
#         permission_manager = get_permission_manager(context)
#         if not permission_manager:
#             logging.warning("Permission manager not available for notifications")
#             return
        
#         confirm_action_map = {
#             'daily': SystemAction.CONFIRM_DAILY_PAYMENTS,
#             'weekly': SystemAction.CONFIRM_WEEKLY_PAYMENTS,
#             'monthly': SystemAction.CONFIRM_MONTHLY_PAYMENTS
#         }
        
#         required_permission = confirm_action_map.get(giveaway_type)
#         if not required_permission:
#             return
        
#         admins_who_can_confirm = permission_manager.get_admins_with_permission(required_permission)
        
#         if not admins_who_can_confirm:
#             logging.warning(f"No admins found with permission to confirm {giveaway_type} payments")
#             return
        
#         username = winner.get('username', '').strip()
#         first_name = winner.get('first_name', 'N/A')
#         winner_display = f"@{username}" if username else first_name
        
#         notification_message = f"""üîî <b>NEW {giveaway_type.upper()} WINNER - PAYMENT NEEDED</b>

# üéâ <b>Winner:</b> {first_name} ({winner_display})
# üìä <b>MT5 Account:</b> <code>{winner['mt5_account']}</code>
# üí∞ <b>Prize:</b> ${winner['prize']} USD
# üë§ <b>Draw executed by:</b> {executed_by}
# üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# ‚ö†Ô∏è <b>ACTION REQUIRED:</b>
# üí∏ Transfer ${winner['prize']} USD to account {winner['mt5_account']}
# üí° Use <code>/admin_confirm_{giveaway_type} {username if username else winner['telegram_id']}</code> after transfer

# üéØ <b>Your permission level allows you to confirm this payment.</b>"""
        
#         for admin_id in admins_who_can_confirm:
#             try:
#                 await context.bot.send_message(
#                     chat_id=admin_id,
#                     text=notification_message,
#                     parse_mode='HTML'
#                 )
#                 print(f"‚úÖ Payment notification sent to admin {admin_id}")
#             except Exception as e:
#                 logging.error(f"Error sending notification to admin {admin_id}: {e}")

    async def notify_payment_admins_new_winner(self, context, winner, giveaway_type, executed_by):
        """üîÑ MODIFIED: Simplified notification - only main admin + channel"""
        try:
            logging.info(f"Sending {giveaway_type} winner notifications...")
            
            # 1Ô∏è‚É£ Notify main admin individually (detailed notification)
            await self._notify_main_admin_only(winner, giveaway_type, executed_by)
            
            # 2Ô∏è‚É£ Notify admin channel (group notification)
            await self._send_admin_channel_notification(giveaway_type, winner, 'winner')
            
            # ‚úÖ SIMPLIFIED: No more individual spam to all admins
            logging.info(f"{giveaway_type.title()} notifications sent: Main admin + Admin channel")
            
        except Exception as e:
            logging.error(f"Error in simplified notification system: {e}")


    @require_permission(SystemAction.CONFIRM_DAILY_PAYMENTS)
    async def admin_confirm_daily_payment(self,update, context):
        """üéØ COMANDO ESPEC√çFICO: Confirmar pago daily"""
        await self.admin_confirm_payment_universal(update, context, 'daily')

    @require_permission(SystemAction.CONFIRM_WEEKLY_PAYMENTS)
    async def admin_confirm_weekly_payment(self,update, context):
        """üéØ COMANDO ESPEC√çFICO: Confirmar pago weekly"""
        await self.admin_confirm_payment_universal(update, context, 'weekly')

    @require_permission(SystemAction.CONFIRM_MONTHLY_PAYMENTS)
    async def admin_confirm_monthly_payment(self, update, context):
        """üéØ COMANDO ESPEC√çFICO: Confirmar pago monthly"""
        await self.admin_confirm_payment_universal(update, context, 'monthly')

    

    @require_any_permission(
        SystemAction.CONFIRM_DAILY_PAYMENTS,
        SystemAction.VIEW_ALL_PENDING_WINNERS
    )
    async def admin_pending_daily(self, update, context):
        """üìã VER PENDIENTES: Daily winners"""
        await self.admin_view_pending_universal(update, context, 'daily')

    @require_any_permission(
        SystemAction.CONFIRM_WEEKLY_PAYMENTS,
        SystemAction.VIEW_ALL_PENDING_WINNERS
    )
    async def admin_pending_weekly(self, update, context):
        """üìã VER PENDIENTES: Weekly winners"""
        await self.admin_view_pending_universal(update, context, 'weekly')

    @require_any_permission(
        SystemAction.CONFIRM_MONTHLY_PAYMENTS,
        SystemAction.VIEW_ALL_PENDING_WINNERS
    )
    async def admin_pending_monthly(self, update, context):
        """üìã VER PENDIENTES: Monthly winners"""
        await self.admin_view_pending_universal(update, context, 'monthly')

    # ======================================================================
    async def admin_pending_winners(self, update, context):
        """üö® CR√çTICO: Comando para ver ganadores pendientes - AGREGAR a ga_test_bot.py"""
        user_id = update.effective_user.id

        # üÜï AGREGAR: Verificaci√≥n de permisos al INICIO
        permission_manager = get_permission_manager(context)
        if not permission_manager:
            await update.message.reply_text("‚ùå Permission system not initialized")
            return
        
        # üÜï VERIFICAR permisos para ver ganadores pendientes
        if not permission_manager.has_permission(user_id, SystemAction.VIEW_ALL_PENDING_WINNERS):
            admin_info = permission_manager.get_admin_info(user_id)
            await update.message.reply_text(
                f"‚ùå <b>Access Denied</b>\n\n"
                f"Required: <code>{SystemAction.VIEW_ALL_PENDING_WINNERS.value}</code>\n"
                f"Your access level: <code>{admin_info.get('permission_group', 'None') if admin_info else 'Not registered'}</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            config_loader = ConfigLoader()
            bot_config = config_loader.get_bot_config()
            channel_id = bot_config['channel_id']
            
            # Verificar admin permissions
            member = await context.bot.get_chat_member(channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can view pending winners")
                return
            
            # Obtener ganadores pendientes de todos los tipos
            all_pending = {}
            total_pending = 0
            total_amount = 0
            
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                giveaway_system = self.get_giveaway_system(giveaway_type)
                pending = giveaway_system.get_pending_winners(giveaway_type)
                if pending:
                    all_pending[giveaway_type] = pending
                    total_pending += len(pending)
                    
                    # Calcular monto total
                    prize = giveaway_system.get_prize_amount(giveaway_type)
                    total_amount += len(pending) * prize
            
            if total_pending == 0:
                await update.message.reply_text(
                    "‚ÑπÔ∏è <b>No pending winners</b>\n\nAll payments are up to date.\n\nüéØ Next draws will be automatically scheduled",
                    parse_mode='HTML'
                )
                return
            
            # Formatear mensaje con todos los ganadores pendientes
            message = f"üìã <b>PENDING WINNERS ({total_pending})</b>\n"
            message += f"üí∞ <b>Total amount:</b> ${total_amount} USD\n\n"
            
            buttons = []
            
            for giveaway_type, pending_winners in all_pending.items():
                prize = self.get_giveaway_system(giveaway_type).get_prize_amount(giveaway_type)
                message += f"üéØ <b>{giveaway_type.upper()} (${prize}):</b>\n"
                
                for i, winner in enumerate(pending_winners, 1):
                    username = winner.get('username', '').strip()
                    first_name = winner.get('first_name', 'N/A')
                    
                    if username:
                        identifier = f"@{username}"
                        command_identifier = username
                        button_display = f"@{username}"
                    else:
                        identifier = f"{first_name} (ID: {winner['telegram_id']})"
                        command_identifier = winner['telegram_id']
                        button_display = first_name
                    
                    message += f"  {i}. {identifier}\n"
                    message += f"     üí∞ Prize: ${winner['prize']} USD\n"
                    message += f"     üìä MT5: <code>{winner['mt5_account']}</code>\n"
                    message += f"     üìÖ Selected: {winner['selected_time']}\n\n"
                    
                    # Crear bot√≥n de confirmaci√≥n
                    button_text = f"‚úÖ Confirm {giveaway_type} - {button_display}"
                    callback_data = f"confirm_payment_{giveaway_type}_{command_identifier}"
                    buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            message += f"üí° <b>Quick confirmation:</b> Press buttons below\n"
            message += f"üí° <b>Manual confirmation:</b> <code>/admin_confirm_payment &lt;id_or_username&gt;</code>"
            
            # Limitar botones para evitar overflow
            if len(buttons) > 10:
                buttons = buttons[:10]
                message += f"\n\n‚ö†Ô∏è Showing first 10 confirmation buttons only"
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error getting pending winners: {e}")
            await update.message.reply_text("‚ùå Error getting pending winners")


    async def admin_confirm_payment(self, update, context):
        """üö® CR√çTICO: Comando para confirmar pagos - VERSI√ìN CORREGIDA ASYNC"""
        user_id = update.effective_user.id

        # üÜï AGREGAR: Verificaci√≥n de permisos al INICIO de la funci√≥n
        permission_manager = get_permission_manager(context)
        if not permission_manager:
            await update.message.reply_text("‚ùå Permission system not initialized")
            return
        
        # üÜï VERIFICAR si tiene ALG√öN permiso de confirmaci√≥n
        has_confirm_permission = any([
            permission_manager.has_permission(user_id, SystemAction.CONFIRM_DAILY_PAYMENTS),
            permission_manager.has_permission(user_id, SystemAction.CONFIRM_WEEKLY_PAYMENTS),
            permission_manager.has_permission(user_id, SystemAction.CONFIRM_MONTHLY_PAYMENTS)
        ])
        
        if not has_confirm_permission:
            admin_info = permission_manager.get_admin_info(user_id)
            await update.message.reply_text(
                f"‚ùå <b>Access Denied</b>\n\n"
                f"Required: Payment confirmation permissions\n"
                f"Your access level: <code>{admin_info.get('permission_group', 'None') if admin_info else 'Not registered'}</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            config_loader = ConfigLoader()
            bot_config = config_loader.get_bot_config()
            channel_id = bot_config['channel_id']
            
            # Verificar admin permissions
            member = await context.bot.get_chat_member(channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can confirm payments")
                return
            
            # Verificar formato del comando
            if not context.args or len(context.args) != 1:
                await update.message.reply_text(
                    "‚ùå <b>Incorrect usage</b>\n\n"
                    "<b>Format:</b> <code>/admin_confirm_payment &lt;telegram_id_or_username&gt;</code>\n\n"
                    "<b>Examples:</b>\n"
                    "‚Ä¢ <code>/admin_confirm_payment 123456</code>\n"
                    "‚Ä¢ <code>/admin_confirm_payment @username</code>\n\n"
                    "üí° Use <code>/admin_pending_winners</code> to see pending winners",
                    parse_mode='HTML'
                )
                return
            
            winner_identifier = context.args[0].strip()
            
            # Intentar confirmaci√≥n para cada tipo de giveaway
            confirmed = False
            confirmation_message = ""
            
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                giveaway_system = self.get_giveaway_system(giveaway_type)
                
                # Buscar ganador pendiente
                pending_winners = giveaway_system.get_pending_winners(giveaway_type)
                winner_found = None
                
                for winner in pending_winners:
                    winner_username = winner.get('username', '').strip()
                    winner_telegram_id = winner.get('telegram_id', '').strip()
                    
                    # Verificar si coincide el identificador
                    if (winner_identifier == winner_telegram_id or 
                        winner_identifier.lower() == f"@{winner_username}".lower() or
                        winner_identifier.lower() == winner_username.lower()):
                        winner_found = winner_telegram_id
                        break
                
                if winner_found:
                    # ‚úÖ CORREGIDO: Llamada as√≠ncrona correcta
                    success, message = await giveaway_system.confirm_payment_and_announce(
                        winner_found, user_id, giveaway_type
                    )
                    
                    if success:
                        confirmed = True
                        prize = giveaway_system.get_prize_amount(giveaway_type)
                        confirmation_message = f"‚úÖ <b>{giveaway_type.title()} payment confirmed successfully</b>\n\n" \
                                            f"üéØ Winner: {winner.get('first_name', 'Unknown')}\n" \
                                            f"üí∞ Prize: ${prize} USD\n" \
                                            f"üìä MT5: {winner['mt5_account']}\n\n" \
                                            f"‚úÖ Winner announced publicly\n" \
                                            f"üì¨ Private congratulation sent"
                        break
            
            if confirmed:
                await update.message.reply_text(confirmation_message, parse_mode='HTML')
            else:
                await update.message.reply_text(
                    f"‚ùå <b>Winner not found</b>\n\n"
                    f"No pending winner found with identifier: <code>{winner_identifier}</code>\n\n"
                    f"üí° Use <code>/admin_pending_winners</code> to see all pending winners",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logging.error(f"Error in payment confirmation: {e}")
            await update.message.reply_text("‚ùå Error processing payment confirmation")


    # async def admin_panel(self, update, context):
    #     """üö® CR√çTICO: Panel administrativo con detecci√≥n inmediata de VIEW_ONLY"""
    #     user_id = update.effective_user.id
    #     print(f"OJO DEBUG: admin_panel called by user {user_id}")
    #     try:
    #         config_loader = ConfigLoader()
    #         bot_config = config_loader.get_bot_config()
    #         channel_id = bot_config['channel_id']
            
    #         # 1Ô∏è‚É£ VERIFICACI√ìN PRIMARIA: Telegram admin (siempre debe funcionar)
    #         member = await context.bot.get_chat_member(channel_id, user_id)
    #         if member.status not in ['administrator', 'creator']:
    #             await update.message.reply_text("‚ùå Only administrators can access admin panel")
    #             return
            
    #         # 2Ô∏è‚É£ VERIFICACI√ìN DE PERMISOS GRANULARES
    #         permission_manager = get_permission_manager(context)
    #         if not permission_manager:
    #             await update.message.reply_text("‚ùå Permission system not initialized")
    #             return
            
    #         # 3Ô∏è‚É£ üö® DETECCI√ìN VIEW_ONLY INMEDIATA - CORREGIDO
    #         admin_info = permission_manager.get_admin_info(user_id)
    #         print(f"OJO DEBUG: admin_info for {user_id}: {admin_info}")
    #         if admin_info and admin_info.get('permission_group') == 'VIEW_ONLY':
    #             print(f"OJO DEBUG: VIEW_ONLY user {user_id} detected, alling show_view_only_panel_direct")
    #             await self.show_view_only_panel_direct(update, context)
    #             print(f"‚úÖ DEBUG: show_view_only_panel_direct completed for {user_id}")
    #             return
    #         print(f"OJO DEBUG: User {user_id} is not VIEW_ONLY, continuing with full panel")
    #         # 4Ô∏è‚É£ VERIFICAR acceso b√°sico al panel (solo para no VIEW_ONLY)
    #         # if not permission_manager.has_permission(user_id, SystemAction.VIEW_BASIC_STATS):
    #         #     await update.message.reply_text(
    #         #         f"‚ùå <b>Access Denied</b>\n\n"
    #         #         f"Required: <code>{SystemAction.VIEW_BASIC_STATS.value}</code>\n"
    #         #         f"Your access level: <code>{admin_info.get('permission_group', 'None') if admin_info else 'Not registered'}</code>",
    #         #         parse_mode='HTML'
    #         #     )
    #         #     return
            
    #         # 5Ô∏è‚É£ PARA PAYMENT_SPECIALIST Y FULL_ADMIN: Panel completo
            
    #         # Obtener estad√≠sticas r√°pidas del sistema
    #         total_pending = 0
    #         total_today = 0
    #         stats_summary = []
            
    #         for giveaway_type in ['daily', 'weekly', 'monthly']:
    #             giveaway_system = self.get_giveaway_system(giveaway_type)
    #             stats = giveaway_system.get_stats(giveaway_type)
    #             pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
    #             prize = giveaway_system.get_prize_amount(giveaway_type)
    #             today_participants = stats.get('today_participants', 0)
                
    #             total_pending += pending_count
    #             total_today += today_participants
                
    #             # Verificar si ventana de participaci√≥n est√° abierta
    #             is_open = giveaway_system.is_participation_window_open(giveaway_type)
    #             status_emoji = "üü¢" if is_open else "üî¥"
                
    #             stats_summary.append({
    #                 'type': giveaway_type,
    #                 'prize': prize,
    #                 'today_participants': today_participants,
    #                 'pending': pending_count,
    #                 'total_winners': stats.get('total_winners', 0),
    #                 'status_emoji': status_emoji,
    #                 'is_open': is_open
    #             })
            
    #         # Construir mensaje del panel (adaptado seg√∫n permisos)
    #         admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
    #         permission_level = admin_info.get('permission_group', 'Unknown') if admin_info else 'Unknown'
            
    #         message = f"üéõÔ∏è <b>MULTI-GIVEAWAY ADMIN PANEL</b>\n"
    #         message += f"üë§ <b>Access Level:</b> {permission_level}\n"
    #         message += f"üîë <b>Admin:</b> {admin_name}\n\n"
            
    #         # Estado general
    #         message += f"üìä <b>System Status:</b>\n"
    #         message += f"‚îú‚îÄ Today's participants: <b>{total_today}</b>\n"
    #         message += f"‚îú‚îÄ Pending winners: <b>{total_pending}</b>\n"
    #         message += f"‚îî‚îÄ System health: {'üü¢ Operational' if total_pending < 10 else '‚ö†Ô∏è High pending'}\n\n"
            
    #         # Estado por tipo
    #         message += f"üéØ <b>Giveaway Types:</b>\n"
    #         for stat in stats_summary:
    #             message += f"{stat['status_emoji']} <b>{stat['type'].upper()}</b> (${stat['prize']}): "
    #             message += f"{stat['today_participants']} today, {stat['pending']} pending\n"
            
    #         message += f"\nüöÄ <b>Available Actions:</b>"
            
    #         # Crear botones adaptados seg√∫n permisos
    #         buttons = []
            
    #         # 6Ô∏è‚É£ BOTONES ADAPTATIVOS SEG√öN PERMISOS
    #         if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
    #             buttons.append([
    #                 InlineKeyboardButton("üìÖ Daily", callback_data="panel_daily"),
    #                 InlineKeyboardButton("üìÖ Weekly", callback_data="panel_weekly"),
    #                 InlineKeyboardButton("üìÖ Monthly", callback_data="panel_monthly")
    #             ])
    #         # Fila 1: Acciones principales (solo si tiene permisos)
    #         row1 = []
    #         if permission_manager.has_permission(user_id, SystemAction.SEND_DAILY_INVITATION):
    #             row1.append(InlineKeyboardButton("üì¢ Send Invitations", callback_data="panel_send_invitations"))
    #         if permission_manager.has_permission(user_id, SystemAction.VIEW_ALL_PENDING_WINNERS):
    #             row1.append(InlineKeyboardButton(f"üëë Pending ({total_pending})", callback_data="panel_pending_winners"))
    #         # if permission_manager.has_permission(user_id, SystemAction.EXECUTE_DAILY_DRAW):
    #         #     row1.append(InlineKeyboardButton("üé≤ Execute Draws", callback_data="panel_execute_draws"))
    #         if row1:
    #             buttons.append(row1)
            
    #         # Fila 2: Gesti√≥n de ganadores (solo si tiene permisos) 
    #         row2 = []
    #         # if permission_manager.has_permission(user_id, SystemAction.VIEW_ALL_PENDING_WINNERS):
    #         #     row2.append(InlineKeyboardButton(f"üëë Pending ({total_pending})", callback_data="panel_pending_winners"))
    #         if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
    #             row2.append(InlineKeyboardButton("üìä Statistics", callback_data="panel_statistics"))
    #         if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
    #             row2.append(InlineKeyboardButton("üìà Advanced Analytics", callback_data="panel_advanced_analytics"))
    #         if row2:
    #             buttons.append(row2)
            
    #         # Fila 3: Acceso por tipo (solo para PAYMENT_SPECIALIST+)
    #         row3 = []
    #         if permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
    #             row3.append(InlineKeyboardButton("ü§ñ Automation", callback_data="automation_control"))
    #         if row3:
    #             buttons.append(row3)
            
    #         # Fila 4: Sistema (solo FULL_ADMIN puede ver mantenimiento)
    #         row4 = []
    #         row4.append(InlineKeyboardButton("üè• Health Check", callback_data="panel_health"))
    #         if permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
    #             row4.append(InlineKeyboardButton("üîß Maintenance", callback_data="panel_maintenance"))
    #             # row4.append(InlineKeyboardButton("ü§ñ Auto-Draw", callback_data="automation_control"))
    #         if row4:
    #             buttons.append(row4)
    #         # üÜï NEW: Fila 4.5: Automation (solo FULL_ADMIN)
    #         # if permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
    #         #     buttons.append([
    #         #         InlineKeyboardButton("ü§ñ Automation Control", callback_data="automation_control")
    #         #     ])
            
    #         # Fila 5: Analytics (seg√∫n nivel)
    #         row5 = []
    #         # if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
    #         #     row5.append(InlineKeyboardButton("üìà Advanced Analytics", callback_data="panel_advanced_analytics"))
    #         if permission_manager.has_permission(user_id, SystemAction.VIEW_BASIC_STATS):
    #             row5.append(InlineKeyboardButton("üìä Basic Analytics", callback_data="panel_basic_analytics"))
    #         if row5:
    #             buttons.append(row5)
            
    #         # Fila 6: Refresh (siempre disponible)
    #         buttons.append([
    #             InlineKeyboardButton("üîÑ Refresh Panel", callback_data="panel_refresh")
    #         ])
            
    #         # 7Ô∏è‚É£ MENSAJE INFORMATIVO SOBRE PERMISOS
    #         if permission_level == "PAYMENT_SPECIALIST":
    #             message += f"\n\nüí° <b>Note:</b> Some advanced features require FULL_ADMIN permissions"
            
    #         reply_markup = InlineKeyboardMarkup(buttons)
    #         await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
    #     except Exception as e:
    #         logging.error(f"Error in admin panel: {e}")
    #         await update.message.reply_text("‚ùå Error loading admin panel")

    # prueba=============================================================================
    async def _handle_payment_from_admin_channel(self, update, context):
        """üÜï NEW: Handle payment confirmations from admin channel notifications"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            callback_data = query.data
            
            print(f"üí∞ DEBUG: Admin channel payment callback: {callback_data} from user {user_id}")
            
            # Verify admin permissions using permission manager
            permission_manager = self._get_permission_manager_from_callback()
            if not permission_manager:
                await query.edit_message_text("‚ùå Permission system not available")
                return
            
            # Check if user has payment confirmation permissions
            has_payment_permission = any([
                permission_manager.has_permission(user_id, SystemAction.CONFIRM_DAILY_PAYMENTS),
                permission_manager.has_permission(user_id, SystemAction.CONFIRM_WEEKLY_PAYMENTS),
                permission_manager.has_permission(user_id, SystemAction.CONFIRM_MONTHLY_PAYMENTS),
                permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS)
            ])
            
            if not has_payment_permission:
                admin_info = permission_manager.get_admin_info(user_id)
                await query.edit_message_text(
                    f"‚ùå <b>Payment Confirmation Access Denied</b>\n\n"
                    f"Required: PAYMENT_SPECIALIST+ permissions\n"
                    f"Your level: {admin_info.get('permission_group', 'None') if admin_info else 'Not registered'}",
                    parse_mode='HTML'
                )
                return
            
            # Parse callback: confirm_payment_<type>_<identifier>
            parts = callback_data.split("_", 3)
            if len(parts) < 4:
                await query.edit_message_text("‚ùå Invalid payment callback format")
                return
            
            giveaway_type = parts[2]  # daily, weekly, monthly
            winner_identifier = parts[3]  # username or telegram_id
            
            # Validate giveaway type
            if giveaway_type not in ['daily', 'weekly', 'monthly']:
                await query.edit_message_text("‚ùå Invalid giveaway type")
                return
            
            # Get giveaway system
            giveaway_system = self.get_giveaway_system(giveaway_type)
            if not giveaway_system:
                await query.edit_message_text(f"‚ùå {giveaway_type.title()} system not available")
                return
            
            # Find winner using helper function from ga_integration
            winner_telegram_id = await self._find_winner_by_identifier_admin_channel(
                winner_identifier, giveaway_type, giveaway_system
            )
            
            if not winner_telegram_id:
                await query.edit_message_text(
                    f"‚ùå <b>{giveaway_type.title()} winner not found</b>\n\n"
                    f"Winner '{winner_identifier}' not found in pending {giveaway_type} winners.\n\n"
                    f"üí° The winner may have been processed already.",
                    parse_mode='HTML'
                )
                return
            
            # Confirm payment using existing system
            success, message = await giveaway_system.confirm_payment_and_announce(
                winner_telegram_id, user_id, giveaway_type
            )
            
            if success:
                prize = giveaway_system.get_prize_amount(giveaway_type)
                admin_info = permission_manager.get_admin_info(user_id)
                admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
                
                await query.edit_message_text(
                    f"‚úÖ <b>{giveaway_type.title()} Payment Confirmed Successfully</b>\n\n"
                    f"üéâ Winner: {winner_identifier}\n"
                    f"üí∞ Prize: ${prize} USD\n"
                    f"üë§ Confirmed by: {admin_name}\n"
                    f"üìÖ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"‚úÖ <b>Actions completed:</b>\n"
                    f"‚îú‚îÄ Winner announced in channel\n"
                    f"‚îú‚îÄ Private congratulation sent\n"
                    f"‚îú‚îÄ Payment record updated\n"
                    f"‚îî‚îÄ System ready for next {giveaway_type} draw",
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text(
                    f"‚ùå <b>Error confirming {giveaway_type} payment</b>\n\n"
                    f"<b>Reason:</b> {message}",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logging.error(f"Error in admin channel payment confirmation: {e}")
            await query.edit_message_text("‚ùå Error processing payment confirmation")

    async def _find_winner_by_identifier_admin_channel(self, winner_identifier, giveaway_type, giveaway_system):
        """üÜï NEW: Find winner by identifier for admin channel confirmations"""
        try:
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            
            for winner in pending_winners:
                winner_username = winner.get('username', '').strip()
                winner_telegram_id = winner.get('telegram_id', '').strip()
                winner_first_name = winner.get('first_name', '').strip()
                
                # Search by different criteria
                if (
                    winner_identifier == winner_telegram_id or
                    winner_identifier.lower() == f"@{winner_username}".lower() or
                    winner_identifier.lower() == winner_username.lower() or
                    (not winner_username and winner_identifier.lower() == winner_first_name.lower())
                ):
                    return winner_telegram_id
            
            return None
            
        except Exception as e:
            logging.error(f"Error finding {giveaway_type} winner by identifier: {e}")
            return None

    #  prueba ========================================================================


    async def admin_panel(self, update, context):
        """üîÑ REFACTORED: Panel administrativo usando funci√≥n base compartida"""
        user_id = update.effective_user.id
        print(f"OJO DEBUG: admin_panel called by user {user_id}")
        
        try:
            config_loader = ConfigLoader()
            bot_config = config_loader.get_bot_config()
            channel_id = bot_config['channel_id']
            
            # 1Ô∏è‚É£ VERIFICACI√ìN PRIMARIA: Telegram admin (siempre debe funcionar)
            member = await context.bot.get_chat_member(channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can access admin panel")
                return
            
            # 2Ô∏è‚É£ VERIFICACI√ìN DE PERMISOS GRANULARES
            permission_manager = get_permission_manager(context)
            if not permission_manager:
                await update.message.reply_text("‚ùå Permission system not initialized")
                return
            
            # 3Ô∏è‚É£ üÜï USAR FUNCI√ìN BASE COMPARTIDA
            message, reply_markup, status = await self._generate_main_admin_panel_content(user_id, permission_manager)
            
            if status == 'VIEW_ONLY':
                # üö® DETECCI√ìN VIEW_ONLY INMEDIATA - usar funci√≥n espec√≠fica para comandos
                print(f"OJO DEBUG: VIEW_ONLY user {user_id} detected, calling show_view_only_panel_direct")
                await self.show_view_only_panel_direct(update, context)
                print(f"‚úÖ DEBUG: show_view_only_panel_direct completed for {user_id}")
                return
            elif status == 'ERROR':
                await update.message.reply_text("‚ùå Error loading admin panel")
                return
            
            # 4Ô∏è‚É£ MOSTRAR PANEL PRINCIPAL (SUCCESS case)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in admin panel: {e}")
            await update.message.reply_text("‚ùå Error loading admin panel")

    async def _generate_main_admin_panel_content(self, user_id, permission_manager):
        try:
            admin_info = permission_manager.get_admin_info(user_id) if permission_manager else None
            admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
            
            # üö® DETECTAR VIEW_ONLY (retorna None para que la funci√≥n llamadora maneje)
            if admin_info and admin_info.get('permission_group') == 'VIEW_ONLY':
                return None, None, 'VIEW_ONLY'
            
            # üìä OBTENER ESTAD√çSTICAS (copiado de admin_panel actual)
            total_pending = 0
            total_today = 0
            stats_summary = []
            
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                giveaway_system = self.get_giveaway_system(giveaway_type)
                stats = giveaway_system.get_stats(giveaway_type)
                pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                prize = giveaway_system.get_prize_amount(giveaway_type)
                today_participants = stats.get('today_participants', 0)
                
                total_pending += pending_count
                total_today += today_participants
                
                # Verificar si ventana de participaci√≥n est√° abierta
                is_open = giveaway_system.is_participation_window_open(giveaway_type)
                status_emoji = "üü¢" if is_open else "üî¥"
                
                stats_summary.append({
                    'type': giveaway_type,
                    'prize': prize,
                    'today_participants': today_participants,
                    'pending': pending_count,
                    'total_winners': stats.get('total_winners', 0),
                    'status_emoji': status_emoji,
                    'is_open': is_open
                })
            
            # üìù CONSTRUIR MENSAJE (copiado de admin_panel actual)
            permission_level = admin_info.get('permission_group', 'Unknown') if admin_info else 'Unknown'
            # Construir mensaje del panel (adaptado seg√∫n permisos)
            admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
            permission_level = admin_info.get('permission_group', 'Unknown') if admin_info else 'Unknown'
            
            message = f"üéõÔ∏è <b>MULTI-GIVEAWAY ADMIN PANEL</b>\n"
            message += f"üë§ <b>Access Level:</b> {permission_level}\n"
            message += f"üîë <b>Admin:</b> {admin_name}\n\n"
            
            # Estado general
            message += f"üìä <b>System Status:</b>\n"
            message += f"‚îú‚îÄ Today's participants: <b>{total_today}</b>\n"
            message += f"‚îú‚îÄ Pending winners: <b>{total_pending}</b>\n"
            message += f"‚îî‚îÄ System health: {'üü¢ Operational' if total_pending < 10 else '‚ö†Ô∏è High pending'}\n\n"
            
            # Estado por tipo
            message += f"üéØ <b>Giveaway Types:</b>\n"
            for stat in stats_summary:
                message += f"{stat['status_emoji']} <b>{stat['type'].upper()}</b> (${stat['prize']}): "
                message += f"{stat['today_participants']} today, {stat['pending']} pending\n"
            
            message += f"\nüöÄ <b>Available Actions:</b>"
            from datetime import datetime
            refresh_time = datetime.now().strftime('%H:%M:%S')
            message += f"\n\n‚è∞ <b>Last updated:</b> {refresh_time} London Time"
            # Crear botones adaptados seg√∫n permisos
            buttons = []
            
            # 6Ô∏è‚É£ BOTONES ADAPTATIVOS SEG√öN PERMISOS
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
                buttons.append([
                    InlineKeyboardButton("üìÖ Daily", callback_data="panel_daily"),
                    InlineKeyboardButton("üìÖ Weekly", callback_data="panel_weekly"),
                    InlineKeyboardButton("üìÖ Monthly", callback_data="panel_monthly")
                ])
            # Fila 1: Acciones principales (solo si tiene permisos)
            row1 = []
            if permission_manager.has_permission(user_id, SystemAction.SEND_DAILY_INVITATION):
                row1.append(InlineKeyboardButton("üì¢ Send Invitations", callback_data="panel_send_invitations"))
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ALL_PENDING_WINNERS):
                row1.append(InlineKeyboardButton(f"üëë Pending ({total_pending})", callback_data="panel_pending_winners"))
            
            if row1:
                buttons.append(row1)
            
            # Fila 2: Gesti√≥n de ganadores (solo si tiene permisos) 
            row2 = []            
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
                row2.append(InlineKeyboardButton("üìä Statistics", callback_data="panel_statistics"))
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
                row2.append(InlineKeyboardButton("üìà Advanced Analytics", callback_data="panel_advanced_analytics"))
            if row2:
                buttons.append(row2)
            
            # Fila 3: Acceso por tipo (solo para PAYMENT_SPECIALIST+)
            row3 = []
            if permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
                row3.append(InlineKeyboardButton("ü§ñ Automation", callback_data="automation_control"))
            if row3:
                buttons.append(row3)
            
            # Fila 4: Sistema (solo FULL_ADMIN puede ver mantenimiento)
            row4 = []
            row4.append(InlineKeyboardButton("üè• Health Check", callback_data="panel_health"))
            if permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
                row4.append(InlineKeyboardButton("üîß Maintenance", callback_data="panel_maintenance"))
                # row4.append(InlineKeyboardButton("ü§ñ Auto-Draw", callback_data="automation_control"))
            if row4:
                buttons.append(row4)
            
            
            
            row5 = []            
            if permission_manager.has_permission(user_id, SystemAction.VIEW_BASIC_STATS):
                row5.append(InlineKeyboardButton("üìä Basic Analytics", callback_data="panel_basic_analytics"))
            if row5:
                buttons.append(row5)
            
            # Fila 6: Refresh (siempre disponible)
            buttons.append([
                InlineKeyboardButton("üîÑ Refresh Panel", callback_data="panel_refresh")
            ])
            
            # 7Ô∏è‚É£ MENSAJE INFORMATIVO SOBRE PERMISOS
            if permission_level == "PAYMENT_SPECIALIST":
                message += f"\n\nüí° <b>Note:</b> Some advanced features require FULL_ADMIN permissions"
            
            reply_markup = InlineKeyboardMarkup(buttons)
            return message, reply_markup, 'SUCCESS'
            
        except Exception as e:
            logging.error(f"Error in admin panel: {e}")
            
            return "", None, 'ERROR'




    async def show_view_only_panel_direct(self, update, context):
        """üÜï NUEVA: Panel VIEW_ONLY directo desde command (NO callback)"""
        user_id = update.effective_user.id
        
        try:
            # Verificar que efectivamente es VIEW_ONLY
            permission_manager = get_permission_manager(context)
            if permission_manager:
                admin_info = permission_manager.get_admin_info(user_id)

                if admin_info:
                    permission_group = admin_info.get('permission_group', 'Unknown')
                    print(f"üîç DEBUG: User {user_id} has permission group: {permission_group}")
                    
                    # Solo verificar para VIEW_ONLY, pero continuar para otros si necesario
                    if permission_group != 'VIEW_ONLY':
                        print(f"‚ö†Ô∏è DEBUG: User {user_id} is not VIEW_ONLY ({permission_group}), but continuing...")
                        # NO retornar aqu√≠ - continuar mostrando panel b√°sico
                else:
                    print(f"‚ö†Ô∏è DEBUG: No admin_info found for user {user_id}")
            else:
                print(f"‚ö†Ô∏è DEBUG: No permission_manager available")
            
            # Obtener estad√≠sticas b√°sicas
            basic_stats = {
                'total_today': 0,
                'active_windows': 0,
                'system_health': 'Operational'
            }
            
            type_details = []
            current_time = datetime.now()
            london_time = current_time.strftime('%H:%M')
            
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                giveaway_system = self.get_giveaway_system(giveaway_type)
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                today_count = stats.get('today_participants', 0)
                
                # Verificar ventana de participaci√≥n
                is_window_open = giveaway_system.is_participation_window_open(giveaway_type)
                window_status = "üü¢ Open" if is_window_open else "üî¥ Closed"
                
                if is_window_open:
                    basic_stats['active_windows'] += 1
                
                basic_stats['total_today'] += today_count
                
                activity_level = "üî• High" if today_count > 10 else "üìä Medium" if today_count > 5 else "üí§ Low"
                
                type_details.append({
                    'type': giveaway_type,
                    'prize': prize,
                    'participants': today_count,
                    'window_status': window_status,
                    'is_open': is_window_open,
                    'activity_level': activity_level
                })
            admin_name = "VIEW_ONLY User"
            permission_level = "VIEW_ONLY"
            admin_info = permission_manager.get_admin_info(user_id)
            # Obtener nombre del admin
            if permission_manager and admin_info:
                admin_name = admin_info.get('name', 'VIEW_ONLY User')
                permission_level = admin_info.get('permission_group', 'VIEW_ONLY')
            
            print(f"üîç DEBUG: Showing panel for {admin_name} ({permission_level})")
            
            message = f"""üìä <b>VIEW_ONLY DASHBOARD</b>
    üîí <b>Access Level:</b> VIEW_ONLY
    üë§ <b>Admin:</b> {admin_name}

    üìÖ <b>Date:</b> {current_time.strftime('%A, %B %d, %Y')}
    ‚è∞ <b>Current Time:</b> {london_time} London Time
    üåç <b>Timezone:</b> Europe/London

    üìä <b>Today's Summary:</b>
    ‚îú‚îÄ Total participants: <b>{basic_stats['total_today']}</b>
    ‚îú‚îÄ Active participation windows: <b>{basic_stats['active_windows']}/{len(type_details)}</b>
    ‚îú‚îÄ System status: <b>‚úÖ {basic_stats['system_health']}</b>
    ‚îî‚îÄ Last data update: <b>{current_time.strftime('%H:%M:%S')}</b>

    üéØ <b>Giveaway Status:</b>"""

            for detail in type_details:
                message += f"""

    üéØ <b>{detail['type'].upper()} GIVEAWAY:</b>
    ‚îú‚îÄ Prize Amount: <b>${detail['prize']} USD</b>
    ‚îú‚îÄ Today's Participants: <b>{detail['participants']}</b>
    ‚îú‚îÄ Participation Window: <b>{detail['window_status']}</b>
    ‚îú‚îÄ Activity Level: <b>{detail['activity_level']}</b>
    ‚îî‚îÄ Status: {'‚úÖ Active period' if detail['is_open'] else '‚è∏Ô∏è Outside participation hours'}"""

            message += f"""

    üìà <b>System Insights (Basic):</b>
    ‚îú‚îÄ Most active type: <b>{max(type_details, key=lambda x: x['participants'])['type'].title()}</b>
    ‚îú‚îÄ Current engagement: <b>{'Strong' if basic_stats['total_today'] > 15 else 'Moderate' if basic_stats['total_today'] > 5 else 'Building'}</b>
    ‚îî‚îÄ System load: <b>{'Normal' if basic_stats['total_today'] < 100 else 'High'}</b>

    üí° <b>Your VIEW_ONLY Permissions:</b>
    ‚úÖ View today's participation statistics
    ‚úÖ Check basic system health status  
    ‚úÖ See participation window status
    ‚ùå Advanced analytics require PAYMENT_SPECIALIST+ permissions
    ‚ùå Pending winners require higher access levels

    üîÑ Use the buttons below for more information or to refresh data."""

            # Botones corregidos para VIEW_ONLY
            buttons = [
                [
                    InlineKeyboardButton("üìà Today's Details", callback_data="view_only_today_details"),
                    InlineKeyboardButton("üè• System Health", callback_data="view_only_health")
                ],
                [
                    InlineKeyboardButton("üîÑ Refresh Dashboard", callback_data="view_only_refresh"),
                    InlineKeyboardButton("‚ÑπÔ∏è About Permissions", callback_data="view_only_permissions_info")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing VIEW_ONLY panel direct: {e}")
            await update.message.reply_text("‚ùå Error loading VIEW_ONLY dashboard")


    # async def notify_payment_admins_new_winner(self,context, winner, giveaway_type, executed_by):
    #     """üÜï NUEVA: Notificar a admins con permisos de confirmaci√≥n de pagos"""
    #     permission_manager = get_permission_manager(context)
        
    #     # Mapear tipo de giveaway a acci√≥n de confirmaci√≥n
    #     confirm_action_map = {
    #         'daily': SystemAction.CONFIRM_DAILY_PAYMENTS,
    #         'weekly': SystemAction.CONFIRM_WEEKLY_PAYMENTS,
    #         'monthly': SystemAction.CONFIRM_MONTHLY_PAYMENTS
    #     }
        
    #     required_permission = confirm_action_map.get(giveaway_type)
    #     if not required_permission:
    #         return
        
    #     # Obtener admins con permiso de confirmaci√≥n para este tipo
    #     admins_who_can_confirm = permission_manager.get_admins_with_permission(required_permission)
        
    #     if not admins_who_can_confirm:
    #         logging.warning(f"No admins found with permission to confirm {giveaway_type} payments")
    #         return
        
    #     # Preparar informaci√≥n del ganador
    #     username = winner.get('username', '').strip()
    #     first_name = winner.get('first_name', 'N/A')
    #     winner_display = f"@{username}" if username else first_name
        
    #     notification_message = f"""üîî <b>NEW {giveaway_type.upper()} WINNER - PAYMENT NEEDED</b>

    # üéâ <b>Winner:</b> {first_name} ({winner_display})
    # üìä <b>MT5 Account:</b> <code>{winner['mt5_account']}</code>
    # üí∞ <b>Prize:</b> ${winner['prize']} USD
    # üë§ <b>Draw executed by:</b> {executed_by}
    # üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

    # ‚ö†Ô∏è <b>ACTION REQUIRED:</b>
    # üí∏ Transfer ${winner['prize']} USD to account {winner['mt5_account']}
    # üí° Use <code>/admin_confirm_{giveaway_type} {username if username else winner['telegram_id']}</code> after transfer

    # üéØ <b>Your permission level allows you to confirm this payment.</b>"""
        
    #     # Enviar notificaci√≥n a cada admin autorizado
    #     for admin_id in admins_who_can_confirm:
    #         try:
    #             await context.bot.send_message(
    #                 chat_id=admin_id,
    #                 text=notification_message,
    #                 parse_mode='HTML'
    #             )
    #             print(f"‚úÖ Payment notification sent to admin {admin_id}")
    #         except Exception as e:
    #             logging.error(f"Error sending notification to admin {admin_id}: {e}")

    # ================== TYPE-SPECIFIC ADMIN COMMANDS ==================

    async def _handle_manual_giveaway(self, update, context, giveaway_type):
        """üÜï NEW: Handle manual giveaway for specific type"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Send invitation for specific type
            giveaway_system = self.giveaway_systems[giveaway_type]
            success = await giveaway_system.send_invitation(giveaway_type)
            
            # Create return button
            keyboard = [[InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ {giveaway_type.title()} giveaway invitation sent to channel",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    f"‚ùå Error sending {giveaway_type} invitation",
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logging.error(f"Error in manual {giveaway_type} giveaway: {e}")
            await update.message.reply_text("‚ùå Internal error", parse_mode='HTML')

    async def _handle_manual_sorteo(self, update, context, giveaway_type):
        """üÜï NEW: Handle manual draw for specific type"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Execute manual draw for specific type
            giveaway_system = self.giveaway_systems[giveaway_type]
            await giveaway_system.run_giveaway(giveaway_type)
            
            # Check result and create return button
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            pending_count = len(pending_winners)
            
            keyboard = [[InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if pending_count > 0:
                winner = pending_winners[0]
                username = winner.get('username', '').strip()
                first_name = winner.get('first_name', 'N/A')
                
                if username:
                    winner_display = f"@{username}"
                    command_reference = f"@{username}"
                else:
                    winner_display = f"{first_name} (ID: {winner['telegram_id']})"
                    command_reference = winner['telegram_id']
                
                prize = giveaway_system.get_prize_amount(giveaway_type)
                response_message = f"""‚úÖ <b>{giveaway_type.title()} draw executed successfully</b>

üéØ <b>Winner selected:</b> {winner_display}
üìä <b>VFX MT5 Account:</b> {winner['mt5_account']}
üí∞ <b>Prize:</b> ${prize} USD
üéØ <b>Type:</b> {giveaway_type.upper()}
‚è≥ <b>Pending winners:</b> {pending_count}

üì¨ <b>Next steps:</b>
1Ô∏è‚É£ Check your private chat for complete details
2Ô∏è‚É£ Transfer to VFX MT5 account: {winner['mt5_account']}
3Ô∏è‚É£ Use `/admin_confirm_payment_{giveaway_type} {command_reference}` to confirm

üí° Use `/admin_pending_{giveaway_type}` for complete details"""
                    
                await update.message.reply_text(response_message, parse_mode='HTML', reply_markup=reply_markup)
            else:
                await update.message.reply_text(
                    f"‚úÖ {giveaway_type.title()} draw executed - No eligible participants today",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            
        except Exception as e:
            logging.error(f"Error in manual {giveaway_type} draw: {e}")
            await update.message.reply_text("‚ùå Internal error", parse_mode='HTML')

    async def _handle_stats_command(self, update, context, giveaway_type):
        """üÜï NEW: Handle stats command for specific type"""
        try:
            user_id = update.effective_user.id
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can view statistics")
                return
            
            giveaway_system = self.giveaway_systems[giveaway_type]
            stats = giveaway_system.get_stats(giveaway_type)
            pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
            
            keyboard = [[InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"""üìä <b>{giveaway_type.upper()} GIVEAWAY STATISTICS</b>

üë• <b>Today's participants:</b> {stats.get('today_participants', 0)}
üìà <b>Total participants:</b> {stats.get('total_participants', 0)}
üèÜ <b>Total winners:</b> {stats.get('total_winners', 0)}
üí∞ <b>Money distributed:</b> ${stats.get('total_prize_distributed', 0)}
‚è≥ <b>Pending winners:</b> {pending_count}

‚è∞ Next draw: Check schedule

<i>Updated: {stats.get('timestamp', 'N/A')}</i>"""

            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing {giveaway_type} statistics: {e}")
            await update.message.reply_text("‚ùå Error getting statistics")

    async def _handle_pending_winners(self, update, context, giveaway_type):
        """üÜï NEW: Handle pending winners for specific type"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Get pending winners for specific type
            giveaway_system = self.giveaway_systems[giveaway_type]
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            
            if not pending_winners:
                keyboard = [[InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    f"‚ÑπÔ∏è No pending {giveaway_type} winners", 
                    reply_markup=reply_markup
                )
                return
            
            # Format pending winners list
            pending_list = ""
            buttons = []
            
            for i, winner in enumerate(pending_winners, 1):
                username = winner.get('username', '').strip()
                first_name = winner.get('first_name', 'N/A')
                
                if username:
                    command_identifier = username
                    display_name = f"<b>{first_name}</b> (@{username})"
                else:
                    command_identifier = winner['telegram_id']
                    display_name = f"<b>{first_name}</b> (ID: {winner['telegram_id']})"
                
                pending_list += f"{i}. {display_name}\n"
                pending_list += f"   üìä MT5 Account: <code>{winner['mt5_account']}</code>\n"
                pending_list += f"   üí∞ Prize: ${winner['prize']} USD\n"
                pending_list += f"   üéØ Type: {giveaway_type.upper()}\n"
                pending_list += f"   üìÖ Selected: {winner['selected_time']}\n\n"
                
                # Create inline button for each winner
                button_text = f"‚úÖ Confirm payment to {first_name}"
                callback_data = f"confirm_payment_{giveaway_type}_{command_identifier}"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            # Add return button
            buttons.append([InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")])
            
            message = f"""üìã <b>{giveaway_type.upper()} PENDING WINNERS</b>

{pending_list}üí° <b>Instructions:</b>
1Ô∏è‚É£ Transfer to the VFX MT5 account
2Ô∏è‚É£ Press the corresponding confirmation button
3Ô∏è‚É£ Bot will announce the winner automatically

‚ö° <b>Quick buttons:</b>"""
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error getting {giveaway_type} pending winners: {e}")
            await update.message.reply_text("‚ùå Error getting pending winners")

    

    async def _show_view_only_panel(self, query):
        """üìä Panel b√°sico VIEW_ONLY (versi√≥n callback)"""
        try:
            # Verificar permisos
            # Verificar permisos
            user_id = query.from_user.id
            permission_manager = self._get_permission_manager_from_callback()
            
            if permission_manager:
                admin_info = permission_manager.get_admin_info(user_id)
                if not admin_info or admin_info.get('permission_group') != 'VIEW_ONLY':
                    await query.edit_message_text("‚ùå This function is only for VIEW_ONLY users")
                    return
            
            # Obtener estad√≠sticas detalladas del d√≠a (solo datos permitidos)
            basic_stats = {
                'total_today': 0,
                'active_windows': 0,
                'system_health': 'Operational'
            }
            
            type_details = []
            current_time = datetime.now()
            london_time = current_time.strftime('%H:%M')
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                today_count = stats.get('today_participants', 0)
                
                # Informaci√≥n de ventana de participaci√≥n (permitida para VIEW_ONLY)
                is_window_open = giveaway_system.is_participation_window_open(giveaway_type)
                window_status = "üü¢ Open" if is_window_open else "üî¥ Closed"
                
                if is_window_open:
                    basic_stats['active_windows'] += 1
                
                basic_stats['total_today'] += today_count
                
                # Calcular actividad relativa (sin datos hist√≥ricos sensibles)
                activity_level = "üî• High" if today_count > 10 else "üìä Medium" if today_count > 5 else "üí§ Low"
                
                type_details.append({
                    'type': giveaway_type,
                    'prize': prize,
                    'participants': today_count,
                    'window_status': window_status,
                    'is_open': is_window_open,
                    'activity_level': activity_level
                })
        # Obtener nombre del admin
            admin_info = permission_manager.get_admin_info(user_id) if permission_manager else None
            admin_name = admin_info.get('name', 'VIEW_ONLY User') if admin_info else 'VIEW_ONLY User'
                
            message = f"""üìà <b>TODAY'S VIEW_ONLY DASHBOARD</b>
    üîí <b>Access Level:</b> VIEW_ONLY

    üìÖ <b>Date:</b> {current_time.strftime('%A, %B %d, %Y')}
    ‚è∞ <b>Current Time:</b> {london_time} London Time
    üåç <b>Timezone:</b> Europe/London

    üìä <b>Today's Summary:</b>
    ‚îú‚îÄ Total participants: <b>{basic_stats['total_today']}</b>
    ‚îú‚îÄ Active participation windows: <b>{basic_stats['active_windows']}/{len(type_details)}</b>
    ‚îú‚îÄ System activity level: <b>{'üü¢ High' if basic_stats['total_today'] > 20 else 'üü° Medium' if basic_stats['total_today'] > 10 else 'üî¥ Low'}</b>
    ‚îî‚îÄ Last data update: <b>{current_time.strftime('%H:%M:%S')}</b>

    üéØ <b>Giveaway Status:</b>"""

            for detail in type_details:
                message += f"""

    üéØ <b>{detail['type'].upper()}:</b> ${detail['prize']} | {detail['participants']} today | {detail['window_status']} | {detail['activity_level']}"""

            message += f"""

    üí° <b>System Insights:</b>
    ‚Ä¢ Most active: <b>{max(type_details, key=lambda x: x['participants'])['type'].title()}</b>
    ‚Ä¢ Engagement: <b>{'Strong' if basic_stats['total_today'] > 15 else 'Moderate' if basic_stats['total_today'] > 5 else 'Building'}</b>

    üîí <b>VIEW_ONLY Access:</b> Basic monitoring only
    üí° Contact FULL_ADMIN for permission upgrades"""

            buttons = [
                [
                    InlineKeyboardButton("üìà Today's Details", callback_data="view_only_today_details"),
                    InlineKeyboardButton("üè• System Health", callback_data="view_only_health")
                ],
                [
                    InlineKeyboardButton("üîÑ Refresh", callback_data="view_only_refresh"),
                    InlineKeyboardButton("‚ÑπÔ∏è Permissions Info", callback_data="view_only_permissions_info")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        
            
        except Exception as e:
            logging.error(f"Error showing VIEW_ONLY panel: {e}")
            await query.edit_message_text("‚ùå Error loading VIEW_ONLY panel")

    async def _show_view_only_permissions_info(self, query):
        """‚ÑπÔ∏è Informaci√≥n detallada sobre permisos VIEW_ONLY"""
        try:
            # Verificar permisos
            user_id = query.from_user.id
            permission_manager = self._get_permission_manager_from_callback()
            
            admin_name = "VIEW_ONLY User"
            registration_date = "Unknown"
            
            if permission_manager:
                admin_info = permission_manager.get_admin_info(user_id)
                if admin_info:
                    admin_name = admin_info.get('name', 'VIEW_ONLY User')
                    registration_date = admin_info.get('created_date', 'Unknown')
                    if admin_info.get('permission_group') != 'VIEW_ONLY':
                        await query.edit_message_text("‚ùå This information is only for VIEW_ONLY users")
                        return
            
            message = f"""‚ÑπÔ∏è <b>VIEW_ONLY PERMISSIONS INFORMATION</b>

    üë§ <b>Your Account Details:</b>
    ‚îú‚îÄ Name: <b>{admin_name}</b>
    ‚îú‚îÄ Telegram ID: <code>{user_id}</code>
    ‚îú‚îÄ Access Level: <b>VIEW_ONLY</b>
    ‚îú‚îÄ Account Created: <b>{registration_date}</b>
    ‚îî‚îÄ Status: <b>‚úÖ Active</b>

    üîí <b>What VIEW_ONLY Can Access:</b>

    üìä <b>Statistics & Monitoring:</b>
    ‚úÖ Today's participant counts for all giveaway types
    ‚úÖ Basic system health status
    ‚úÖ Participation window status (open/closed)
    ‚úÖ Current activity levels and trends
    ‚úÖ Basic system component status

    üè• <b>System Information:</b>
    ‚úÖ Overall system operational status
    ‚úÖ Giveaway types availability
    ‚úÖ Basic configuration information
    ‚úÖ Current London time and timezone info

    üö´ <b>What VIEW_ONLY CANNOT Access:</b>

    üí∞ <b>Financial & Revenue Data:</b>
    ‚ùå Payment confirmation functions
    ‚ùå Prize distribution history
    ‚ùå Revenue analytics and reports
    ‚ùå Financial performance metrics

    üë• <b>User Management:</b>
    ‚ùå Pending winners information
    ‚ùå Individual user details and history
    ‚ùå Top participants reports
    ‚ùå User behavior analytics

    üé≤ <b>Giveaway Management:</b>
    ‚ùå Send giveaway invitations
    ‚ùå Execute giveaway draws
    ‚ùå Modify giveaway settings
    ‚ùå Access individual giveaway panels

    üîß <b>System Administration:</b>
    ‚ùå System maintenance functions
    ‚ùå Backup and restore operations
    ‚ùå Admin management and permissions
    ‚ùå Debug and diagnostic tools
    ‚ùå Configuration modifications

    üìà <b>Advanced Analytics:</b>
    ‚ùå Cross-type analytics comparisons
    ‚ùå Advanced performance metrics
    ‚ùå Historical trend analysis
    ‚ùå Detailed reporting functions

    üîÑ <b>Permission Upgrade Process:</b>

    To request higher permissions:
    1Ô∏è‚É£ Contact a FULL_ADMIN in your organization
    2Ô∏è‚É£ Specify which additional permissions you need:
    ‚Ä¢ <b>PAYMENT_SPECIALIST:</b> Payment confirmation + advanced analytics
    ‚Ä¢ <b>FULL_ADMIN:</b> Complete system access
    3Ô∏è‚É£ Provide business justification for the upgrade
    4Ô∏è‚É£ FULL_ADMIN can modify your permissions in the system

    ‚ö†Ô∏è <b>Security Note:</b>
    VIEW_ONLY permissions are designed for monitoring and basic oversight without access to sensitive operations or data. This ensures system security while providing transparency.

    üìû <b>Support:</b>
    If you need assistance or have questions about your permissions, contact your FULL_ADMIN or system administrator."""

            buttons = [
                [
                    InlineKeyboardButton("üìä Back to Statistics", callback_data="view_only_refresh"),
                    InlineKeyboardButton("üè• System Health", callback_data="view_only_health")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing VIEW_ONLY permissions info: {e}")
            await query.edit_message_text("‚ùå Error loading permissions information")

    async def _handle_admin_panel_type(self, update, context, giveaway_type):
        """üÜï NEW: Handle admin panel for specific giveaway type"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Get quick stats for this type
            giveaway_system = self.giveaway_systems[giveaway_type]
            stats = giveaway_system.get_stats(giveaway_type)
            pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
            prize = giveaway_system.get_prize_amount(giveaway_type)
            
            # Get last winner info if exists
            recent_winners = giveaway_system.get_pending_winners(giveaway_type)
            last_winner_info = ""
            if recent_winners:
                winner = recent_winners[0]
                username = winner.get('username', '').strip()
                first_name = winner.get('first_name', 'N/A')
                winner_display = f"@{username}" if username else first_name
                last_winner_info = f"\nüèÜ <b>Last winner:</b> {winner_display}"
            
            message = f"""üéõÔ∏è <b>{giveaway_type.upper()} GIVEAWAY CONTROL PANEL</b>

üí∞ <b>Prize Amount:</b> ${prize} USD

üìä <b>Current status:</b>
‚îú‚îÄ Today's participants: <b>{stats.get('today_participants', 0)}</b>
‚îú‚îÄ Pending winners: <b>{pending_count}</b>
‚îú‚îÄ Total winners: <b>{stats.get('total_winners', 0)}</b>
‚îî‚îÄ Prizes distributed: <b>${stats.get('total_prize_distributed', 0)}</b>{last_winner_info}

üöÄ <b>Select an option:</b>"""
            
            # Create type-specific buttons
            buttons = [
                # Row 1: Main giveaway actions
                [
                    InlineKeyboardButton("üì¢ Send invitation", callback_data=f"panel_send_invitation_{giveaway_type}"),
                    InlineKeyboardButton("üé≤ Execute draw", callback_data=f"panel_run_giveaway_{giveaway_type}")
                ],
                # Row 2: Winners management
                [
                    InlineKeyboardButton(f"üëë Pending ({pending_count})", callback_data=f"panel_pending_winners_{giveaway_type}"),
                    InlineKeyboardButton("üìä Statistics", callback_data=f"panel_full_stats_{giveaway_type}")
                ],
                # Row 3: Analytics
                [
                    InlineKeyboardButton("üìà Analytics", callback_data=f"panel_analytics_{giveaway_type}"),
                    InlineKeyboardButton("üë• Top users", callback_data=f"panel_top_users_{giveaway_type}")
                ],
                # Row 4: Navigation
                [
                    InlineKeyboardButton("üîÑ Other types", callback_data="type_selector_main"),
                    InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")
                ],
                # Row 5: Refresh
                [
                    InlineKeyboardButton(f"üîÑ Refresh {giveaway_type}", callback_data=f"panel_refresh_{giveaway_type}")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in {giveaway_type} admin panel: {e}")
            await update.message.reply_text("‚ùå Error loading panel")

    # ================== GENERAL ADMIN COMMANDS (BACKWARD COMPATIBILITY) ==================

    async def _handle_manual_giveaway_general(self, update, context):
        """üîÑ MODIFIED: General manual giveaway with type selection"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Show type selection
            message = "üéØ <b>SELECT GIVEAWAY TYPE</b>\n\nWhich giveaway invitation do you want to send?"
            
            buttons = []
            for giveaway_type in self.available_types:
                prize = self.giveaway_systems[giveaway_type].get_prize_amount()
                button_text = f"üì¢ {giveaway_type.title()} (${prize})"
                callback_data = f"panel_send_invitation_{giveaway_type}"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            buttons.append([InlineKeyboardButton("‚ùå Cancel", callback_data="panel_refresh")])
            reply_markup = InlineKeyboardMarkup(buttons)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in general manual giveaway: {e}")
            await update.message.reply_text("‚ùå Internal error")

    async def _handle_manual_sorteo_general(self, update, context):
        """üîÑ MODIFIED: General manual draw with type selection"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Show type selection
            message = "üé≤ <b>SELECT GIVEAWAY TYPE FOR DRAW</b>\n\nWhich giveaway draw do you want to execute?"
            
            buttons = []
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                prize = giveaway_system.get_prize_amount()
                participants = giveaway_system._get_period_participants_count()
                button_text = f"üé≤ {giveaway_type.title()} (${prize} - {participants} participants)"
                callback_data = f"panel_run_giveaway_{giveaway_type}"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            buttons.append([InlineKeyboardButton("‚ùå Cancel", callback_data="panel_refresh")])
            reply_markup = InlineKeyboardMarkup(buttons)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in general manual draw: {e}")
            await update.message.reply_text("‚ùå Internal error")

    async def _handle_stats_command_general(self, update, context):
        """üîÑ MODIFIED: General stats with type selection"""
        try:
            user_id = update.effective_user.id
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can view statistics")
                return
            
            # Show combined stats for all types
            all_stats = {}
            total_participants = 0
            total_winners = 0
            total_distributed = 0
            total_pending = 0
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                
                all_stats[giveaway_type] = {
                    'today_participants': stats.get('today_participants', 0),
                    'total_participants': stats.get('total_participants', 0),
                    'total_winners': stats.get('total_winners', 0),
                    'total_distributed': stats.get('total_prize_distributed', 0),
                    'pending': pending_count
                }
                
                total_participants += stats.get('total_participants', 0)
                total_winners += stats.get('total_winners', 0)
                total_distributed += stats.get('total_prize_distributed', 0)
                total_pending += pending_count
            
            message = f"""üìä <b>MULTI-GIVEAWAY STATISTICS</b>

üåü <b>COMBINED TOTALS:</b>
‚îú‚îÄ Total participants: <b>{total_participants}</b>
‚îú‚îÄ Total winners: <b>{total_winners}</b>
‚îú‚îÄ Money distributed: <b>${total_distributed}</b>
‚îî‚îÄ Pending winners: <b>{total_pending}</b>

üìã <b>BY TYPE:</b>"""

            for giveaway_type, stats in all_stats.items():
                prize = self.giveaway_systems[giveaway_type].get_prize_amount()
                message += f"""

üéØ <b>{giveaway_type.upper()} (${prize}):</b>
‚îú‚îÄ Today: {stats['today_participants']} participants
‚îú‚îÄ Total: {stats['total_participants']} participants
‚îú‚îÄ Winners: {stats['total_winners']}
‚îú‚îÄ Distributed: ${stats['total_distributed']}
‚îî‚îÄ Pending: {stats['pending']}"""

            keyboard = [[InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing general statistics: {e}")
            await update.message.reply_text("‚ùå Error getting statistics")

    async def _handle_pending_winners_general(self, update, context):
        """üîÑ MODIFIED: General pending winners from all types"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Get pending winners from all types
            all_pending = {}
            total_pending = 0
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                pending = giveaway_system.get_pending_winners(giveaway_type)
                if pending:
                    all_pending[giveaway_type] = pending
                    total_pending += len(pending)
            
            if total_pending == 0:
                keyboard = [[InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("‚ÑπÔ∏è No pending winners in any giveaway type", reply_markup=reply_markup)
                return
            
            # Format message with all pending winners
            message = f"üìã <b>ALL PENDING WINNERS ({total_pending})</b>\n\n"
            buttons = []
            
            for giveaway_type, pending_winners in all_pending.items():
                message += f"üéØ <b>{giveaway_type.upper()} GIVEAWAY:</b>\n"
                
                for i, winner in enumerate(pending_winners, 1):
                    username = winner.get('username', '').strip()
                    first_name = winner.get('first_name', 'N/A')
                    
                    if username:
                        command_identifier = username
                        display_name = f"<b>{first_name}</b> (@{username})"
                    else:
                        command_identifier = winner['telegram_id']
                        display_name = f"<b>{first_name}</b> (ID: {winner['telegram_id']})"
                    
                    message += f"{i}. {display_name}\n"
                    message += f"   üìä MT5: <code>{winner['mt5_account']}</code>\n"
                    message += f"   üí∞ Prize: ${winner['prize']} USD\n\n"
                    
                    # Create button for each winner
                    button_text = f"‚úÖ Confirm {giveaway_type} - {first_name}"
                    callback_data = f"confirm_payment_{giveaway_type}_{command_identifier}"
                    buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            # Add navigation buttons
            buttons.extend([
                [InlineKeyboardButton("üìä View by type", callback_data="panel_pending_by_type")],
                [InlineKeyboardButton("üè† Back to Panel", callback_data="panel_refresh")]
            ])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error getting all pending winners: {e}")
            await update.message.reply_text("‚ùå Error getting pending winners")

    
    async def _handle_admin_panel_unified(self, update, context):
        """üÜï NEW: Unified admin panel showing all giveaway types"""
        try:
            # user_id = update.effective_user.id
            #             # Verify admin
            # member = await context.bot.get_chat_member(self.channel_id, user_id)
            # if member.status not in ['administrator', 'creator']:
            #     await update.message.reply_text("‚ùå Only administrators can use this command")
            #     return

            # # üÜï ADD: Immediate VIEW_ONLY detection
            # permission_manager = self.app.bot_data.get('permission_manager')
            # if not permission_manager:
            #     await update.message.reply_text("‚ùå Permission system not initialized")
            #     return
            
            # ========================
            is_callback = hasattr(update, 'callback_query') and update.callback_query is not None
            user_id = update.effective_user.id
            
            if is_callback:
                query = update.callback_query
                await query.answer()

            config_loader = ConfigLoader()
            bot_config = config_loader.get_bot_config()
            channel_id = bot_config['channel_id']
            
            # Verificar admin permissions
            member = await context.bot.get_chat_member(channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                error_msg = "‚ùå Only administrators can access admin panel"
                # üîÑ MODIFIED: Adaptar respuesta seg√∫n tipo
                if is_callback:
                    await query.edit_message_text(error_msg)
                else:
                    await update.message.reply_text(error_msg)
                return
            
            # üÜï VERIFICACI√ìN DE PERMISOS GRANULARES
            permission_manager = self.app.bot_data.get('permission_manager')
            if not permission_manager:
                error_msg = "‚ùå Permission system not initialized"
                # üîÑ MODIFIED: Adaptar respuesta seg√∫n tipo
                if is_callback:
                    await query.edit_message_text(error_msg)
                else:
                    await update.message.reply_text(error_msg)
                return
            
            # üÜï ADD: DETECCI√ìN VIEW_ONLY INMEDIATA
            admin_info = permission_manager.get_admin_info(user_id)
            if admin_info and admin_info.get('permission_group') == 'VIEW_ONLY':
                if is_callback:
                    await self._show_view_only_panel(query)
                else:
                    # üÜï ADD: Para command, crear fake query
                    class FakeQuery:
                        def __init__(self, user, message):
                            self.from_user = user
                            self.message = message
                        
                        async def edit_message_text(self, text, parse_mode=None, reply_markup=None):
                            await self.message.reply_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
                    
                    fake_query = FakeQuery(update.effective_user, update.message)
                    await self._show_view_only_panel(fake_query)
                return
            
            # üîÑ MODIFIED: Verificar acceso b√°sico al panel
            if not permission_manager.has_permission(user_id, SystemAction.VIEW_BASIC_STATS):
                error_msg = (f"‚ùå <b>Access Denied</b>\n\n"
                            f"Required: <code>{SystemAction.VIEW_BASIC_STATS.value}</code>\n"
                            f"Your access level: <code>{admin_info.get('permission_group', 'None') if admin_info else 'Not registered'}</code>")
                
                # üîÑ MODIFIED: Adaptar respuesta seg√∫n tipo
                if is_callback:
                    await query.edit_message_text(error_msg, parse_mode='HTML')
                else:
                    await update.message.reply_text(error_msg, parse_mode='HTML')
                return



            # =========================
            
            # Get stats from all types
            combined_stats = {
                'total_participants_today': 0,
                'total_pending': 0,
                'total_winners_all': 0,
                'total_distributed_all': 0
            }
            
            type_stats = {}
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                
                type_stats[giveaway_type] = {
                    'today_participants': stats.get('today_participants', 0),
                    'pending': pending_count,
                    'total_winners': stats.get('total_winners', 0),
                    'total_distributed': stats.get('total_prize_distributed', 0),
                    'prize': giveaway_system.get_prize_amount()
                }
                
                combined_stats['total_participants_today'] += stats.get('today_participants', 0)
                combined_stats['total_pending'] += pending_count
                combined_stats['total_winners_all'] += stats.get('total_winners', 0)
                combined_stats['total_distributed_all'] += stats.get('total_prize_distributed', 0)
            
            message = f"""üéõÔ∏è <b>UNIFIED GIVEAWAY CONTROL PANEL</b>

üåü <b>COMBINED STATUS:</b>
‚îú‚îÄ Today's participants: <b>{combined_stats['total_participants_today']}</b>
‚îú‚îÄ Pending winners: <b>{combined_stats['total_pending']}</b>
‚îú‚îÄ Total winners: <b>{combined_stats['total_winners_all']}</b>
‚îî‚îÄ Total distributed: <b>${combined_stats['total_distributed_all']}</b>

üìä <b>BY TYPE:</b>"""

            for giveaway_type, stats in type_stats.items():
                message += f"""
üéØ <b>{giveaway_type.upper()}</b> (${stats['prize']}): {stats['today_participants']} today, {stats['pending']} pending"""
            
            message += "\n\nüöÄ <b>Select action:</b>"
            
            # Create unified buttons
            buttons = [
                # Row 1: Quick access by type
                [
                    InlineKeyboardButton("üìÖ Daily Panel", callback_data="panel_type_daily"),
                    InlineKeyboardButton("üìÖ Weekly Panel", callback_data="panel_type_weekly"),
                    InlineKeyboardButton("üìÖ Monthly Panel", callback_data="panel_type_monthly")
                ],
                # Row 2: Combined actions
                [
                    InlineKeyboardButton("üì¢ Send invitations", callback_data="unified_send_all_invitations")
                    # InlineKeyboardButton("üé≤ Execute draws", callback_data="unified_execute_all_draws")
                ],
                # Row 3: Combined views
                [
                    InlineKeyboardButton(f"üëë All pending ({combined_stats['total_pending']})", callback_data="unified_all_pending"),
                    InlineKeyboardButton("üìä Combined stats", callback_data="unified_combined_stats")
                ],
                # Row 4: Analytics and management
                [
                    InlineKeyboardButton("üìà Multi-analytics", callback_data="unified_multi_analytics"),
                    InlineKeyboardButton("üõ†Ô∏è Maintenance", callback_data="unified_maintenance")
                ],
                # Row 5: Refresh
                [
                    InlineKeyboardButton("üîÑ Refresh panel", callback_data="panel_unified_refresh")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in unified admin panel: {e}")
            await update.message.reply_text("‚ùå Error loading unified panel")

    # ================== CALLBACK HANDLERS ==================

    async def _handle_confirm_payment_callback(self, update, context, giveaway_type):
        """üîÑ MODIFIED: Handle payment confirmation with type awareness"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            
            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await query.edit_message_text("‚ùå Only administrators can confirm payments")
                return
            
            # Extract winner identifier from callback_data
            callback_data = query.data
            if not callback_data.startswith(f"confirm_payment_{giveaway_type}_"):
                await query.edit_message_text("‚ùå Invalid callback")
                return
            
            winner_identifier = callback_data.replace(f"confirm_payment_{giveaway_type}_", "")
            
            # Find winner by username or telegram_id
            winner_telegram_id = await self._find_winner_by_identifier(winner_identifier, giveaway_type)
            
            if not winner_telegram_id:
                await query.edit_message_text(
                    f"‚ùå <b>{giveaway_type.title()} winner not found</b>\n\nNo pending {giveaway_type} winner found with: <code>{winner_identifier}</code>",
                    parse_mode='HTML'
                )
                return
            
            # Confirm payment and proceed with announcements
            giveaway_system = self.giveaway_systems[giveaway_type]
            success, message = await giveaway_system.confirm_payment_and_announce(
                winner_telegram_id, user_id, giveaway_type
            )
            
            if success:
                await query.edit_message_text(
                    f"‚úÖ <b>{giveaway_type.title()} payment confirmed successfully</b>\n\nThe winner has been announced publicly and notified privately.",
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text(f"‚ùå {message}", parse_mode='HTML')
            
        except Exception as e:
            logging.error(f"Error in {giveaway_type} payment confirmation callback: {e}")
            await query.edit_message_text("‚ùå Error processing confirmation")

    async def _find_winner_by_identifier(self, identifier, giveaway_type):
        """üîÑ MODIFIED: Find winner by identifier for specific type"""
        try:
            # Get pending winners for specific type
            giveaway_system = self.giveaway_systems[giveaway_type]
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            
            for winner in pending_winners:
                winner_username = winner.get('username', '').strip()
                winner_telegram_id = winner.get('telegram_id', '').strip()
                winner_first_name = winner.get('first_name', '').strip()
                
                # Search by different criteria
                if (
                    identifier == winner_telegram_id or
                    identifier.lower() == winner_username.lower() or
                    (not winner_username and identifier.lower() == winner_first_name.lower())
                ):
                    return winner_telegram_id
            
            return None
            
        except Exception as e:
            logging.error(f"Error finding {giveaway_type} winner by identifier: {e}")
            return None

    async def _show_view_only_health(self, query):
        """üè• Sistema de salud b√°sico para VIEW_ONLY"""
        try:
            # Verificar que el usuario sea VIEW_ONLY
            user_id = query.from_user.id
            permission_manager = self._get_permission_manager_from_callback()
            
            if permission_manager:
                admin_info = permission_manager.get_admin_info(user_id)
                if not admin_info or admin_info.get('permission_group') != 'VIEW_ONLY':
                    await query.edit_message_text("‚ùå This function is only for VIEW_ONLY users")
                    return
            
            # Realizar verificaci√≥n b√°sica de salud
            systems_status = []
            overall_health = "‚úÖ Healthy"
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    stats = giveaway_system.get_stats(giveaway_type)
                    
                    # Verificaci√≥n b√°sica sin datos sensibles
                    is_operational = bool(stats and 'today_participants' in stats)
                    systems_status.append({
                        'type': giveaway_type,
                        'status': '‚úÖ Operational' if is_operational else '‚ö†Ô∏è Issue detected',
                        'operational': is_operational
                    })
                    
                    if not is_operational:
                        overall_health = "‚ö†Ô∏è Some issues detected"
                        
                except Exception as e:
                    systems_status.append({
                        'type': giveaway_type,
                        'status': '‚ùå Error',
                        'operational': False
                    })
                    overall_health = "‚ùå System issues detected"
            
            message = f"""üè• <b>BASIC SYSTEM HEALTH CHECK</b>
    üîí <b>Access Level:</b> VIEW_ONLY

    üå°Ô∏è <b>Overall Status:</b> {overall_health}
    üìÖ <b>Check Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} London Time

    üìä <b>Giveaway Systems Status:</b>"""

            for system in systems_status:
                message += f"""
    üéØ <b>{system['type'].upper()}:</b> {system['status']}"""

            message += f"""

    üîß <b>Basic System Components:</b>
    ‚îú‚îÄ Bot Connection: ‚úÖ Active
    ‚îú‚îÄ Database Access: ‚úÖ Accessible
    ‚îú‚îÄ Configuration: ‚úÖ Loaded
    ‚îî‚îÄ Giveaway Types: ‚úÖ {len([s for s in systems_status if s['operational']])}/{len(systems_status)} operational

    üí° <b>Note for VIEW_ONLY:</b>
    ‚Ä¢ This is a basic health overview
    ‚Ä¢ Detailed diagnostics require FULL_ADMIN permissions
    ‚Ä¢ System maintenance functions are restricted
    ‚Ä¢ Contact FULL_ADMIN if persistent issues are detected

    üïí <b>Next automated check:</b> Every 2 hours"""

            buttons = [
                [
                    InlineKeyboardButton("üîÑ Re-check Health", callback_data="view_only_health"),
                    InlineKeyboardButton("üìä Back to Stats", callback_data="view_only_refresh")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing VIEW_ONLY health: {e}")
            await query.edit_message_text("‚ùå Error loading health status")

    async def _show_view_only_today_details(self, query):
        """üìà Detalles del d√≠a para VIEW_ONLY"""
        try:
            # Verificar permisos
            user_id = query.from_user.id
            permission_manager = self._get_permission_manager_from_callback()
            
            if permission_manager:
                admin_info = permission_manager.get_admin_info(user_id)
                if not admin_info or admin_info.get('permission_group') != 'VIEW_ONLY':
                    await query.edit_message_text("‚ùå This function is only for VIEW_ONLY users")
                    return
            
            # Obtener estad√≠sticas detalladas del d√≠a (solo datos permitidos)
            today_data = {
                'total_participants': 0,
                'active_windows': 0,
                'types_detail': []
            }
            
            current_time = datetime.now()
            london_time = current_time.strftime('%H:%M')
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                today_count = stats.get('today_participants', 0)
                
                # Informaci√≥n de ventana de participaci√≥n (permitida para VIEW_ONLY)
                is_window_open = giveaway_system.is_participation_window_open(giveaway_type)
                window_status = "üü¢ Open" if is_window_open else "üî¥ Closed"
                
                if is_window_open:
                    today_data['active_windows'] += 1
                
                today_data['total_participants'] += today_count
                
                # Calcular actividad relativa (sin datos hist√≥ricos sensibles)
                activity_level = "üî• High" if today_count > 10 else "üìä Medium" if today_count > 5 else "üí§ Low"
                
                today_data['types_detail'].append({
                    'type': giveaway_type,
                    'prize': prize,
                    'participants': today_count,
                    'window_status': window_status,
                    'is_open': is_window_open,
                    'activity_level': activity_level
                })
            
            message = f"""üìà <b>TODAY'S DETAILED STATISTICS</b>
    üîí <b>Access Level:</b> VIEW_ONLY

    üìÖ <b>Date:</b> {current_time.strftime('%A, %B %d, %Y')}
    ‚è∞ <b>Current Time:</b> {london_time} London Time
    üåç <b>Timezone:</b> Europe/London

    üìä <b>Today's Summary:</b>
    ‚îú‚îÄ Total participants: <b>{today_data['total_participants']}</b>
    ‚îú‚îÄ Active participation windows: <b>{today_data['active_windows']}/{len(self.available_types)}</b>
    ‚îú‚îÄ System activity level: <b>{'üü¢ High' if today_data['total_participants'] > 20 else 'üü° Medium' if today_data['total_participants'] > 10 else 'üî¥ Low'}</b>
    ‚îî‚îÄ Last data update: <b>{current_time.strftime('%H:%M:%S')}</b>

    üéØ <b>Breakdown by Giveaway Type:</b>"""

            for detail in today_data['types_detail']:
                message += f"""

    üéØ <b>{detail['type'].upper()} GIVEAWAY:</b>
    ‚îú‚îÄ Prize Amount: <b>${detail['prize']} USD</b>
    ‚îú‚îÄ Today's Participants: <b>{detail['participants']}</b>
    ‚îú‚îÄ Participation Window: <b>{detail['window_status']}</b>
    ‚îú‚îÄ Activity Level: <b>{detail['activity_level']}</b>
    ‚îî‚îÄ Status: {'‚úÖ Active period' if detail['is_open'] else '‚è∏Ô∏è Outside participation hours'}"""

            # A√±adir contexto temporal (informaci√≥n b√°sica permitida)
            message += f"""

    üìà <b>Activity Insights (Basic):</b>
    ‚îú‚îÄ Peak participation type: <b>{max(today_data['types_detail'], key=lambda x: x['participants'])['type'].title()}</b>
    ‚îú‚îÄ Current engagement: <b>{'Strong' if today_data['total_participants'] > 15 else 'Moderate' if today_data['total_participants'] > 5 else 'Building'}</b>
    ‚îî‚îÄ System load: <b>{'Normal' if today_data['total_participants'] < 100 else 'High'}</b>

    üí° <b>VIEW_ONLY Information:</b>
    ‚Ä¢ Participation trends and historical data require PAYMENT_SPECIALIST+ permissions
    ‚Ä¢ Winner information and pending data require higher access levels
    ‚Ä¢ Advanced analytics and revenue data require PAYMENT_SPECIALIST+ permissions

    üîÑ Statistics refresh automatically every few minutes."""

            buttons = [
                [
                    InlineKeyboardButton("üè• System Health", callback_data="view_only_health"),
                    InlineKeyboardButton("üìä Back to Overview", callback_data="view_only_refresh")
                ],
                [
                    InlineKeyboardButton("üîÑ Refresh Details", callback_data="view_only_today_details")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing VIEW_ONLY today details: {e}")
            await query.edit_message_text("‚ùå Error loading today's details")


    async def _verify_callback_permissions(self, user_id: str, callback_data: str, permission_manager, query) -> bool:
        """üîÑ CORREGIDA: Verificaci√≥n granular de permisos por callback"""
    
        # üö® MAPEO PRECISO DE PERMISOS POR ACCI√ìN
        permission_map = {
            # üí∞ INVITACIONES - Requiere permisos espec√≠ficos
            "unified_send_all_invitations": [
                SystemAction.SEND_DAILY_INVITATION,
                SystemAction.SEND_WEEKLY_INVITATION, 
                SystemAction.SEND_MONTHLY_INVITATION
            ],
            
            # üé≤ SORTEOS - Requiere permisos espec√≠ficos  
            "unified_execute_all_draws": [
                SystemAction.EXECUTE_DAILY_DRAW,
                SystemAction.EXECUTE_WEEKLY_DRAW,
                SystemAction.EXECUTE_MONTHLY_DRAW
            ],
            
            # üëë GANADORES PENDIENTES - Permiso espec√≠fico
            "unified_all_pending": [SystemAction.VIEW_ALL_PENDING_WINNERS],
            
            # üõ†Ô∏è MANTENIMIENTO - Solo FULL_ADMIN
            "unified_maintenance": [SystemAction.MANAGE_ADMINS],
            
            # üìä ANALYTICS AVANZADAS - PAYMENT_SPECIALIST+
            "unified_multi_analytics": [SystemAction.VIEW_ADVANCED_STATS],
            "analytics_cross_type": [SystemAction.VIEW_ADVANCED_STATS],
            "analytics_combined": [SystemAction.VIEW_ADVANCED_STATS],
            "analytics_revenue": [SystemAction.VIEW_ADVANCED_STATS],
            "analytics_user_overlap": [SystemAction.VIEW_ADVANCED_STATS],
            "unified_combined_stats": [SystemAction.VIEW_ADVANCED_STATS],
        }
        
        # üîç VERIFICAR SOLO ACCIONES ESPEC√çFICAMENTE MAPEADAS
        for action_pattern, required_permissions in permission_map.items():
            if callback_data == action_pattern or callback_data.startswith(action_pattern):
                
                # üÜï VERIFICAR SI TIENE ALGUNO DE LOS PERMISOS REQUERIDOS
                has_any_permission = any(
                    permission_manager.has_permission(user_id, perm) 
                    for perm in required_permissions
                )
                
                if not has_any_permission:
                    admin_info = permission_manager.get_admin_info(user_id)
                    permission_level = admin_info.get('permission_group', 'Unknown') if admin_info else 'Unknown'
                    
                    # üéØ MENSAJE ESPEC√çFICO SEG√öN LA ACCI√ìN
                    required_level = "FULL_ADMIN" if action_pattern == "unified_maintenance" else "PAYMENT_SPECIALIST or higher"
                    
                    await query.edit_message_text(
                        f"‚ùå <b>Access Denied</b>\n\n"
                        f"Action: {action_pattern}\n"
                        f"Required: {required_level}\n"
                        f"Your level: {permission_level}\n\n"
                        f"üí° Contact a FULL_ADMIN for access upgrade.",
                        parse_mode='HTML'
                    )
                    return False
        
        # üü¢ PERMITIR TODAS LAS DEM√ÅS ACCIONES (paneles por tipo, refresh, etc.)
        return True

    async def _handle_view_only_callbacks(self, query, callback_data: str):
        """üÜï Enrutador espec√≠fico para usuarios VIEW_ONLY"""
        # user_id = query.from_user.id
    
        # üü¢ CALLBACKS PERMITIDOS PARA VIEW_ONLY (expandida)
        allowed_view_only_callbacks = [
            "view_only_health", "view_only_today_details", "view_only_refresh", 
            "view_only_permissions_info", "panel_refresh", "panel_unified_refresh",
            "panel_unified_main", "no_action"
        ]
        
        if callback_data in allowed_view_only_callbacks:
            # Ejecutar callbacks permitidos
            if callback_data == "view_only_health":
                await self._show_view_only_health(query)
            elif callback_data == "view_only_today_details":
                await self._show_view_only_today_details(query)
            elif callback_data == "view_only_permissions_info":
                await self._show_view_only_permissions_info(query)
            elif callback_data in ["view_only_refresh", "panel_refresh", "panel_unified_refresh", "panel_unified_main"]:
                await self._show_view_only_panel(query)
            elif callback_data == "no_action":
                await query.answer("‚ÑπÔ∏è No action available", show_alert=False)
            return
        
        # üî¥ ACCIONES ESPEC√çFICAMENTE BLOQUEADAS PARA VIEW_ONLY
        blocked_actions = [
            "unified_send_all_invitations", "unified_execute_all_draws",
            "unified_all_pending", "unified_maintenance", 
            "unified_multi_analytics", "analytics_", "maintenance_",
            "panel_send_invitation_", "panel_run_giveaway_", "panel_pending_winners_"
        ]
        
        is_blocked = any(callback_data.startswith(blocked) for blocked in blocked_actions)
        
        if is_blocked:
            await query.edit_message_text(
                f"‚ùå <b>Access Denied - VIEW_ONLY</b>\n\n"
                f"This function requires PAYMENT_SPECIALIST or higher permissions.\n\n"
                f"üí° Returning to your VIEW_ONLY panel...",
                parse_mode='HTML'
            )
            await asyncio.sleep(1)
            await self._show_view_only_panel(query)
            return
        return

    async def show_view_only_panel_message(self, update, context):
        """Panel b√°sico para usuarios VIEW_ONLY"""
        try:
            # Obtener estad√≠sticas b√°sicas permitidas
            basic_stats = {
                'total_today': 0,
                'system_status': 'Operational'
            }
            
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                giveaway_system = self.get_giveaway_system(giveaway_type)
                stats = giveaway_system.get_stats(giveaway_type)
                basic_stats['total_today'] += stats.get('today_participants', 0)
            
            message = f"""üìä <b>BASIC STATISTICS PANEL</b>
    üîí <b>Access Level:</b> VIEW_ONLY

    üåü <b>Today's Summary:</b>
    ‚îú‚îÄ Total participants today: <b>{basic_stats['total_today']}</b>
    ‚îú‚îÄ System status: ‚úÖ {basic_stats['system_status']}
    ‚îú‚îÄ Active giveaway types: <b>3</b> (Daily, Weekly, Monthly)
    ‚îî‚îÄ Last update: {datetime.now().strftime('%H:%M:%S')} London Time

    üìã <b>Participation Breakdown:</b>"""

            # Mostrar desglose b√°sico por tipo (solo conteos)
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                giveaway_system = self.get_giveaway_system(giveaway_type)
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                today_count = stats.get('today_participants', 0)
                
                # Verificar si ventana est√° abierta (informaci√≥n b√°sica permitida)
                is_open = giveaway_system.is_participation_window_open(giveaway_type)
                window_status = "üü¢ Open" if is_open else "üî¥ Closed"
                
                message += f"""
    üéØ <b>{giveaway_type.upper()} (${prize}):</b>
    ‚îú‚îÄ Today's participants: <b>{today_count}</b>
    ‚îî‚îÄ Participation window: {window_status}"""

            message += f"""

    üîí <b>VIEW_ONLY Permissions:</b>
    ‚úÖ View today's participant statistics
    ‚úÖ Check basic system health status
    ‚úÖ See participation window status
    ‚ùå Send invitations (requires PAYMENT_SPECIALIST+)
    ‚ùå Execute giveaways (requires PAYMENT_SPECIALIST+)
    ‚ùå View pending winners (requires PAYMENT_SPECIALIST+)
    ‚ùå Access advanced analytics (requires PAYMENT_SPECIALIST+)
    ‚ùå System maintenance functions (requires FULL_ADMIN)

    üí° <b>Need more access?</b> Contact a FULL_ADMIN to upgrade your permissions.

    üîÑ Use the buttons below to refresh data or check system health."""

            # Botones limitados y seguros para VIEW_ONLY
            buttons = [
                [
                    InlineKeyboardButton("üìä System Health", callback_data="view_only_health"),
                    InlineKeyboardButton("üìà Today's Details", callback_data="view_only_today_details")
                ],
                [
                    InlineKeyboardButton("üîÑ Refresh Statistics", callback_data="view_only_refresh"),
                    InlineKeyboardButton("‚ÑπÔ∏è About Permissions", callback_data="view_only_permissions_info")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing VIEW_ONLY panel: {e}")
            await update.message.reply_text("‚ùå Error loading basic statistics panel")


    # @prevent_concurrent_callback("admin_panel_action")   

    # üîÑ REEMPLAZAR la funci√≥n completa en ga_integration.py (l√≠nea ~150)
    async def _handle_admin_panel_callbacks(self, update, context):
        """üîÑ ENHANCED: Complete callback handler with ALL missing callbacks"""
        try:
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            callback_data = query.data

            # Verify admin permissions
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await query.edit_message_text("‚ùå Only administrators can use this function")
                return
            
            # VIEW_ONLY detection
            permission_manager = self._get_permission_manager_from_callback()
            if permission_manager:
                admin_info = permission_manager.get_admin_info(user_id)
                if admin_info and admin_info.get('permission_group') == 'VIEW_ONLY':
                    # await self._show_view_only_panel(query)
                    await self._handle_view_only_callbacks(query, callback_data)
                    return
            
            print(f"üîç DEBUG: Processing callback: {callback_data}")

            # üÜï ADD: Automation callbacks
            if callback_data.startswith("automation_"):
                await self._handle_automation_callbacks(query, context)
                # pri:nt(f"üîÑ DEBUG: Automation callback {callback_data} - should be handled by automation handler")
                return

            # nuevo test ====================================
            # üÜï ADD: Routing para payment confirmations que vienen del panel
            if callback_data.startswith("confirm_payment_"):
                await self._handle_payment_from_admin_channel(update, context)
                return
            # nuevo test ======================================
            
            # ===== üÜï PANEL PRINCIPAL CALLBACKS (LOS QUE FALTABAN) =====
            if callback_data == "panel_pending_winners":
                await self._show_all_pending_inline(query)
            elif callback_data == "panel_statistics":
                await self._show_combined_stats_inline(query)
            elif callback_data == "panel_send_invitations":
                await self._send_all_invitations_inline(query)
            elif callback_data == "panel_execute_draws":
                await self._execute_all_draws_inline(query)
            elif callback_data == "panel_health":
                await self._execute_system_health_check(query)
            elif callback_data == "panel_maintenance":
                await self._show_maintenance_panel_inline(query)
            elif callback_data == "panel_advanced_analytics":
                await self._show_unified_multi_analytics_inline(query)
            elif callback_data == "panel_basic_analytics":
                await self._show_combined_stats_inline(query)
            elif callback_data == "panel_daily":
                await self._show_type_panel_inline(query, 'daily')
            elif callback_data == "panel_weekly":
                await self._show_type_panel_inline(query, 'weekly')
            elif callback_data == "panel_monthly":
                await self._show_type_panel_inline(query, 'monthly')
            
            # ===== TYPE-SPECIFIC PANEL ACTIONS (EXISTENTES) =====
            else:
                # Procesar callbacks por tipo usando loop (c√≥digo existente)
                handled = False
                for giveaway_type in self.available_types:
                    if callback_data == f"panel_type_{giveaway_type}":
                        await self._show_type_panel_inline(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"panel_send_invitation_{giveaway_type}":
                        await self._execute_send_invitation_inline(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"panel_run_giveaway_{giveaway_type}":
                        await self._execute_run_giveaway_inline(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"panel_pending_winners_{giveaway_type}":
                        await self._show_pending_winners_inline(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"panel_full_stats_{giveaway_type}":
                        await self._show_full_stats_inline(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"panel_refresh_{giveaway_type}":
                        await self._refresh_type_panel(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"panel_analytics_{giveaway_type}":
                        await self._show_analytics_inline(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"panel_top_users_{giveaway_type}":
                        await self._show_top_users_inline(query, giveaway_type)
                        handled = True
                        break
                    elif callback_data == f"analytics_{giveaway_type}_30":
                        await self._show_analytics_detailed_inline(query, giveaway_type, 30)
                        handled = True
                        break
                    elif callback_data == f"analytics_{giveaway_type}_7":
                        await self._show_analytics_detailed_inline(query, giveaway_type, 7)
                        handled = True
                        break
                    elif callback_data == f"analytics_{giveaway_type}_90":
                        await self._show_analytics_detailed_inline(query, giveaway_type, 90)
                        handled = True
                        break
                    elif callback_data == f"account_report_{giveaway_type}":
                        await self._show_account_report_for_type_inline(query, giveaway_type)
                        handled = True
                        break
                    
                
                
                if handled:
                    return
                
                # ===== UNIFIED PANEL ACTIONS (EXISTENTES) =====
                if callback_data == "panel_unified_main":
                    await self._show_unified_panel_inline(query)
                # if callback_data == "panel_unified_main":
                #     await self._show_main_admin_panel_inline(query)
                elif callback_data == "panel_unified_refresh":
                    await self._refresh_unified_panel(query)
                elif callback_data == "unified_all_pending":
                    await self._show_all_pending_inline(query)
                elif callback_data == "unified_combined_stats":
                    await self._show_combined_stats_inline(query)
                elif callback_data == "unified_send_all_invitations":
                    await self._send_all_invitations_inline(query)
                elif callback_data == "unified_execute_all_draws":
                    await self._execute_all_draws_inline(query)
                elif callback_data == "unified_multi_analytics":
                    await self._show_unified_multi_analytics_inline(query)
                elif callback_data == "unified_cross_analytics":
                    await self._show_cross_analytics_inline(query)
                elif callback_data == "unified_maintenance":
                    await self._show_maintenance_panel_inline(query)
                elif callback_data == "analytics_cross_type":
                    await self._show_cross_type_analytics_inline(query)
                elif callback_data == "analytics_combined":
                    await self._show_combined_analytics_inline(query)
                elif callback_data == "analytics_revenue":
                    await self._show_giveaway_cost_analysis(query)
                elif callback_data == "analytics_user_overlap":
                    await self._show_user_overlap_analysis(query)
                elif callback_data == "maintenance_cleanup":
                    await self._execute_maintenance_cleanup(query)
                elif callback_data == "maintenance_backup":
                    await self._execute_maintenance_backup(query)
                elif callback_data == "maintenance_health":
                    await self._execute_system_health_check(query)
                elif callback_data == "maintenance_files":
                    await self._show_file_status(query)
                elif callback_data == "type_selector_main":
                    await self._show_type_selector_inline(query)
                elif callback_data == "panel_refresh":
                    await self._refresh_unified_panel(query)
                elif callback_data == "no_action":
                    await query.answer("‚ÑπÔ∏è No action available", show_alert=False)
                elif callback_data == "view_only_health":
                    await self._show_view_only_health(query)
                elif callback_data == "view_only_today_details":
                    await self._show_view_only_today_details(query)
                elif callback_data == "view_only_refresh":
                    await self._show_view_only_panel(query)
                elif callback_data == "view_only_permissions_info":
                    await self._show_view_only_permissions_info(query)
                elif callback_data in [
                    "analytics_revenue_impact", "analytics_user_behavior", "analytics_time_trends", 
                    "analytics_deep_dive", "analytics_revenue_detailed", "analytics_user_patterns", 
                    "analytics_time_patterns", "analytics_export_report", "analytics_efficiency_trends",
                    "analytics_user_engagement", "analytics_loyalty_patterns", "analytics_user_behavior_patterns",
                    "analytics_time_analysis", "analytics_deep_analysis"
                ]:
                    await self._handle_placeholder_analytics(query, callback_data)
                else:
                    print(f"‚ùå DEBUG: Truly unrecognized callback: {callback_data}")
                    await query.edit_message_text(f"‚ùå Unrecognized action: {callback_data}")
                    
        except Exception as e:
            logging.error(f"Error in panel callback: {e}")
            print(f"üö® DEBUG ERROR in callback: {e}")
            await query.edit_message_text("‚ùå Error processing action")

    # ================== INLINE HELPER FUNCTIONS ==================

    async def _show_type_panel_inline(self, query, giveaway_type):
        """üÜï NEW: Show type-specific panel inline"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            stats = giveaway_system.get_stats(giveaway_type)
            pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
            prize = giveaway_system.get_prize_amount(giveaway_type)

            is_open = giveaway_system.is_participation_window_open(giveaway_type)
            window_status = "üü¢ Open" if is_open else "üî¥ Closed"

            # Get last winner info if exists
            recent_winners = giveaway_system.get_pending_winners(giveaway_type)
            last_winner_info = ""
            if recent_winners:
                winner = recent_winners[0]
                username = winner.get('username', '').strip()
                first_name = winner.get('first_name', 'N/A')
                winner_display = f"@{username}" if username else first_name
                last_winner_info = f"\nüèÜ <b>Last winner:</b> {winner_display}"
            
            message = f"""üéõÔ∏è <b>{giveaway_type.upper()} CONTROL PANEL</b>

üí∞ <b>Prize:</b> ${prize} USD
‚è∞ <b>Participation Window:</b> {window_status}

üìä <b>Today's participants:</b> {stats.get('today_participants', 0)}
‚è≥ <b>Pending winners:</b> {pending_count}
üèÜ <b>Total winners:</b> {stats.get('total_winners', 0)}

üöÄ <b>Actions available:</b>"""
            
            buttons = [
                [
                    InlineKeyboardButton("üì¢ Send invitation", callback_data=f"panel_send_invitation_{giveaway_type}"),
                    InlineKeyboardButton("üé≤ Execute draw", callback_data=f"panel_run_giveaway_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton(f"üëë Pending ({pending_count})", callback_data=f"panel_pending_winners_{giveaway_type}"),
                    InlineKeyboardButton("üìä Statistics", callback_data=f"panel_full_stats_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton("üìà Analytics", callback_data=f"panel_analytics_{giveaway_type}"),
                    InlineKeyboardButton("üë• Top users", callback_data=f"panel_top_users_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton("üîÑ Other types", callback_data="type_selector_main"),
                    InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing {giveaway_type} panel inline: {e}")
            await query.edit_message_text("‚ùå Error loading panel")

    async def _show_type_selector_inline(self, query):
        """üÜï NEW: Show type selector inline"""
        try:
            message = "üéØ <b>SELECT GIVEAWAY TYPE</b>\n\nChoose which giveaway panel to access:"
            
            buttons = []
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                prize = giveaway_system.get_prize_amount()
                participants = giveaway_system._get_period_participants_count()
                pending = len(giveaway_system.get_pending_winners(giveaway_type))
                
                button_text = f"üìÖ {giveaway_type.title()} (${prize}) - {participants} today, {pending} pending"
                callback_data = f"panel_type_{giveaway_type}"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            buttons.append([InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing type selector: {e}")
            await query.edit_message_text("‚ùå Error loading type selector")

    # More inline helper functions will continue...

    async def _execute_send_invitation_inline(self, query, giveaway_type):
        """üÜï NEW: Execute send invitation inline"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            success = await giveaway_system.send_invitation(giveaway_type)
            
            if success:
                message = f"‚úÖ <b>{giveaway_type.title()} invitation sent</b>\n\nInvitation has been sent to the channel successfully."
            else:
                message = f"‚ùå <b>Error sending {giveaway_type} invitation</b>\n\nCould not send invitation to channel."
            
            buttons = [
                [InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")],
                [InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error executing {giveaway_type} invitation: {e}")
            await query.edit_message_text("‚ùå Error sending invitation")

    async def _execute_run_giveaway_inline(self, query, giveaway_type):
        """üÜï NEW: Execute giveaway draw inline"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            await giveaway_system.run_giveaway(giveaway_type)
            
            # Check results
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            pending_count = len(pending_winners)
            
            if pending_count > 0:
                winner = pending_winners[0]
                username = winner.get('username', '').strip()
                first_name = winner.get('first_name', 'N/A')
                winner_display = f"@{username}" if username else first_name
                prize = giveaway_system.get_prize_amount(giveaway_type)
                
                message = f"""‚úÖ <b>{giveaway_type.title()} draw executed</b>

üéØ <b>Winner selected:</b> {winner_display}
üìä <b>VFX MT5 Account:</b> {winner['mt5_account']}
üí∞ <b>Prize:</b> ${prize} USD
‚è≥ <b>Status:</b> Pending payment confirmation

üí° Check your private messages for complete details."""
            else:
                message = f"‚úÖ <b>{giveaway_type.title()} draw executed</b>\n\nNo eligible participants found today."
            
            buttons = [
                [InlineKeyboardButton(f"üëë View pending", callback_data=f"panel_pending_winners_{giveaway_type}")],
                [InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")],
                [InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error executing {giveaway_type} draw: {e}")
            await query.edit_message_text("‚ùå Error executing draw")

    async def _show_pending_winners_inline(self, query, giveaway_type):
        """üÜï NEW: Show pending winners for specific type inline"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            pending_winners = giveaway_system.get_pending_winners(giveaway_type)
            
            if not pending_winners:
                buttons = [
                    [InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")],
                    [InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)
                await query.edit_message_text(
                    f"‚ÑπÔ∏è No pending {giveaway_type} winners",
                    reply_markup=reply_markup
                )
                return
            
            # Format list
            pending_list = ""
            buttons = []
            
            for i, winner in enumerate(pending_winners, 1):
                username = winner.get('username', '').strip()
                first_name = winner.get('first_name', 'N/A')
                
                if username:
                    command_identifier = username
                    display_name = f"<b>{first_name}</b> (@{username})"
                else:
                    command_identifier = winner['telegram_id']
                    display_name = f"<b>{first_name}</b> (ID: {winner['telegram_id']})"
                
                pending_list += f"{i}. {display_name}\n"
                pending_list += f"   üìä MT5: <code>{winner['mt5_account']}</code>\n"
                pending_list += f"   üí∞ Prize: ${winner['prize']} USD\n"
                pending_list += f"   üìÖ Selected: {winner['selected_time']}\n\n"
                
                # Confirmation button
                button_text = f"‚úÖ Confirm payment to {first_name}"
                callback_data = f"confirm_payment_{giveaway_type}_{command_identifier}"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            # Navigation buttons
            buttons.extend([
                [InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")],
                [InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")]
            ])
            
            message = f"""üìã <b>{giveaway_type.upper()} PENDING WINNERS</b>

{pending_list}üí° <b>Instructions:</b>
1Ô∏è‚É£ Transfer to VFX MT5 account
2Ô∏è‚É£ Press confirmation button
3Ô∏è‚É£ Bot will announce winner automatically

‚ö° <b>Quick buttons:</b>"""
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing {giveaway_type} pending winners inline: {e}")
            await query.edit_message_text("‚ùå Error getting pending winners")

    async def _show_full_stats_inline(self, query, giveaway_type):
        """üÜï NEW: Show full statistics for specific type inline"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            stats = giveaway_system.get_stats(giveaway_type)
            pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
            prize = giveaway_system.get_prize_amount(giveaway_type)
            
            message = f"""üìä <b>{giveaway_type.upper()} STATISTICS</b>

üí∞ <b>Prize Amount:</b> ${prize} USD

üë• <b>Today's participants:</b> {stats.get('today_participants', 0)}
üìà <b>Total participants:</b> {stats.get('total_participants', 0)}
üèÜ <b>Total winners:</b> {stats.get('total_winners', 0)}
üí∞ <b>Money distributed:</b> ${stats.get('total_prize_distributed', 0)}
‚è≥ <b>Pending winners:</b> {pending_count}

‚è∞ Next draw: Check schedule

<i>Updated: {stats.get('timestamp', 'N/A')}</i>"""

            buttons = [
                [InlineKeyboardButton(f"üìà Advanced analytics", callback_data=f"analytics_{giveaway_type}_30")],
                [InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")],
                [InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing {giveaway_type} stats inline: {e}")
            await query.edit_message_text("‚ùå Error getting statistics")

    async def _refresh_type_panel(self, query, giveaway_type):
        """üÜï NEW: Refresh type-specific panel"""
        try:
            await self._show_type_panel_inline(query, giveaway_type)
        except Exception as e:
            logging.error(f"Error refreshing {giveaway_type} panel: {e}")
            await query.edit_message_text("‚ùå Error refreshing panel")

#     async def _show_unified_panel_inline(self, query):
#         """üÜï NEW: Show unified panel inline"""
#         try:
#             user_id = query.from_user.id
#             permission_manager = self.app.bot_data.get('permission_manager') if hasattr(self, 'app') else None
            
#             # üÜï DETECTAR si es VIEW_ONLY y mostrar panel limitado
#             if permission_manager:
#                 admin_info = permission_manager.get_admin_info(user_id)
#                 if admin_info and admin_info.get('permission_group') == 'VIEW_ONLY':
#                     await self._show_view_only_panel(query)
#                     return
#             # Get combined stats
#             combined_stats = {
#                 'total_participants_today': 0,
#                 'total_pending': 0,
#                 'total_winners_all': 0,
#                 'total_distributed_all': 0
#             }
            
#             type_stats = {}
            
#             for giveaway_type in self.available_types:
#                 giveaway_system = self.giveaway_systems[giveaway_type]
#                 stats = giveaway_system.get_stats(giveaway_type)
#                 pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                
#                 type_stats[giveaway_type] = {
#                     'today_participants': stats.get('today_participants', 0),
#                     'pending': pending_count,
#                     'prize': giveaway_system.get_prize_amount()
#                 }
                
#                 combined_stats['total_participants_today'] += stats.get('today_participants', 0)
#                 combined_stats['total_pending'] += pending_count
#                 combined_stats['total_winners_all'] += stats.get('total_winners', 0)
#                 combined_stats['total_distributed_all'] += stats.get('total_prize_distributed', 0)
            
#             message = f"""üéõÔ∏è <b>UNIFIED CONTROL PANEL</b>

# üåü <b>COMBINED STATUS:</b>
# ‚îú‚îÄ Today's participants: <b>{combined_stats['total_participants_today']}</b>
# ‚îú‚îÄ Pending winners: <b>{combined_stats['total_pending']}</b>
# ‚îú‚îÄ Total winners: <b>{combined_stats['total_winners_all']}</b>
# ‚îî‚îÄ Total distributed: <b>${combined_stats['total_distributed_all']}</b>

# üìä <b>BY TYPE:</b>"""

#             for giveaway_type, stats in type_stats.items():
#                 message += f"""
# üéØ <b>{giveaway_type.upper()}</b> (${stats['prize']}): {stats['today_participants']} today, {stats['pending']} pending"""
            
#             message += "\n\nüöÄ <b>Select action:</b>"
            
#             buttons = [
#                 [
#                     InlineKeyboardButton("üìÖ Daily", callback_data="panel_type_daily"),
#                     InlineKeyboardButton("üìÖ Weekly", callback_data="panel_type_weekly"),
#                     InlineKeyboardButton("üìÖ Monthly", callback_data="panel_type_monthly")
#                 ],
#                 [
#                     InlineKeyboardButton("üì¢ Send all invitations", callback_data="unified_send_all_invitations")
#                     # InlineKeyboardButton("üé≤ Execute all draws", callback_data="unified_execute_all_draws")
#                 ],
#                 [
#                     InlineKeyboardButton(f"üëë All pending ({combined_stats['total_pending']})", callback_data="unified_all_pending"),
#                     InlineKeyboardButton("üìä Combined stats", callback_data="unified_combined_stats")
#                 ],
#                 [
#                     InlineKeyboardButton("üìà Multi-analytics", callback_data="unified_multi_analytics"),
#                 # üÜï ADD: Automation button
#                     InlineKeyboardButton("ü§ñ Automation", callback_data="automation_control")
#                 ],
#                 [
#                     InlineKeyboardButton("üõ†Ô∏è Maintenance", callback_data="unified_maintenance"),
#                     InlineKeyboardButton("üîÑ Refresh", callback_data="panel_unified_refresh")
#                 ]
#             ]
            
#             reply_markup = InlineKeyboardMarkup(buttons)
#             await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
#         except Exception as e:
#             logging.error(f"Error showing unified panel inline: {e}")
#             await query.edit_message_text("‚ùå Error loading unified panel")

    async def _show_unified_panel_inline(self, query):
        """üîÑ REFACTORED: Mostrar panel principal usando funci√≥n base compartida"""
        try:
            user_id = query.from_user.id
            permission_manager = self._get_permission_manager_from_callback()
            
            if not permission_manager:
                await query.edit_message_text("‚ùå Permission system not initialized")
                return
            
            # üÜï USAR FUNCI√ìN BASE COMPARTIDA
            message, reply_markup, status = await self._generate_main_admin_panel_content(user_id, permission_manager)
            
            if status == 'VIEW_ONLY':
                # üö® DETECCI√ìN VIEW_ONLY - usar funci√≥n espec√≠fica para callbacks
                await self._show_view_only_panel(query)
                return
            elif status == 'ERROR':
                await query.edit_message_text("‚ùå Error loading admin panel")
                return
            
            # ‚úÖ MOSTRAR PANEL PRINCIPAL (SUCCESS case)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing unified panel inline: {e}")
            await query.edit_message_text("‚ùå Error loading admin panel")

    async def _refresh_unified_panel(self, query):
        """üÜï NEW: Refresh unified panel"""
        try:
            await self._show_unified_panel_inline(query)
            # üÜï ADD: Success confirmation via popup
            await query.answer("‚úÖ Panel refreshed", show_alert=False)
        except Exception as e:
            logging.error(f"Error refreshing unified panel: {e}")
            await query.answer("‚ùå Refresh failed", show_alert=True)

    async def _show_all_pending_inline(self, query):
        """üÜï NEW: Show all pending winners from all types inline"""
        try:
            all_pending = {}
            total_pending = 0
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                pending = giveaway_system.get_pending_winners(giveaway_type)
                if pending:
                    all_pending[giveaway_type] = pending
                    total_pending += len(pending)
            
            if total_pending == 0:
                buttons = [[InlineKeyboardButton("üè† Back to unified", callback_data="panel_unified_main")]]
                reply_markup = InlineKeyboardMarkup(buttons)
                await query.edit_message_text("‚ÑπÔ∏è No pending winners in any type", reply_markup=reply_markup)
                return
            
            message = f"üìã <b>ALL PENDING WINNERS ({total_pending})</b>\n\n"
            buttons = []
            
            for giveaway_type, pending_winners in all_pending.items():
                message += f"üéØ <b>{giveaway_type.upper()}:</b>\n"
                
                for i, winner in enumerate(pending_winners, 1):
                    username = winner.get('username', '').strip()
                    first_name = winner.get('first_name', 'N/A')
                    
                    if username:
                        command_identifier = username
                        display_name = f"{first_name} (@{username})"
                    else:
                        command_identifier = winner['telegram_id']
                        display_name = f"{first_name} (ID: {winner['telegram_id']})"
                    
                    message += f"{i}. {display_name} - ${winner['prize']}\n"
                    
                    # Button for each winner
                    button_text = f"‚úÖ {giveaway_type.title()} - {first_name}"
                    callback_data = f"confirm_payment_{giveaway_type}_{command_identifier}"
                    buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
                
                message += "\n"
            
            buttons.append([InlineKeyboardButton("üè† Back to unified", callback_data="panel_unified_main")])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing all pending inline: {e}")
            await query.edit_message_text("‚ùå Error getting all pending winners")

    async def _show_combined_stats_inline(self, query):
        """üÜï NEW: Show combined statistics inline"""
        try:
            combined_totals = {
                'total_participants': 0,
                'total_winners': 0,
                'total_distributed': 0,
                'total_pending': 0
            }
            
            type_details = {}
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                
                type_details[giveaway_type] = {
                    'today': stats.get('today_participants', 0),
                    'total': stats.get('total_participants', 0),
                    'winners': stats.get('total_winners', 0),
                    'distributed': stats.get('total_prize_distributed', 0),
                    'pending': pending_count,
                    'prize': giveaway_system.get_prize_amount()
                }
                
                combined_totals['total_participants'] += stats.get('total_participants', 0)
                combined_totals['total_winners'] += stats.get('total_winners', 0)
                combined_totals['total_distributed'] += stats.get('total_prize_distributed', 0)
                combined_totals['total_pending'] += pending_count
            
            message = f"""üìä <b>COMBINED STATISTICS</b>

üåü <b>GLOBAL TOTALS:</b>
‚îú‚îÄ Total participants: <b>{combined_totals['total_participants']}</b>
‚îú‚îÄ Total winners: <b>{combined_totals['total_winners']}</b>
‚îú‚îÄ Money distributed: <b>${combined_totals['total_distributed']}</b>
‚îî‚îÄ Pending winners: <b>{combined_totals['total_pending']}</b>

üìã <b>BREAKDOWN BY TYPE:</b>"""

            for giveaway_type, details in type_details.items():
                message += f"""

üéØ <b>{giveaway_type.upper()} (${details['prize']}):</b>
‚îú‚îÄ Today: {details['today']} participants
‚îú‚îÄ Total: {details['total']} participants
‚îú‚îÄ Winners: {details['winners']}
‚îú‚îÄ Distributed: ${details['distributed']}
‚îî‚îÄ Pending: {details['pending']}"""

            buttons = [
                [InlineKeyboardButton("üìà Cross-type analytics", callback_data="unified_cross_analytics")],
                [InlineKeyboardButton("üè† Back to unified", callback_data="panel_unified_main")]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing combined stats: {e}")
            await query.edit_message_text("‚ùå Error getting combined statistics")

    async def _send_all_invitations_inline(self, query):
        """üÜï NEW: Send invitations for all types inline"""
        try:
            results = {}
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                success = await giveaway_system.send_invitation(giveaway_type)
                results[giveaway_type] = success
            
            message = "üì¢ <b>BULK INVITATION RESULTS</b>\n\n"
            
            successful = []
            failed = []
            
            for giveaway_type, success in results.items():
                if success:
                    successful.append(giveaway_type)
                    message += f"‚úÖ {giveaway_type.title()}: Sent successfully\n"
                else:
                    failed.append(giveaway_type)
                    message += f"‚ùå {giveaway_type.title()}: Failed to send\n"
            
            message += f"\nüìä <b>Summary:</b> {len(successful)} successful, {len(failed)} failed"
            
            buttons = [[InlineKeyboardButton("üè† Back to unified", callback_data="panel_unified_main")]]
            reply_markup = InlineKeyboardMarkup(buttons)
            
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error sending all invitations: {e}")
            await query.edit_message_text("‚ùå Error sending invitations")

    async def _execute_all_draws_inline(self, query):
        """üÜï NEW: Execute draws for all types inline"""
        try:
            results = {}
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    await giveaway_system.run_giveaway(giveaway_type)
                    
                    pending_winners = giveaway_system.get_pending_winners(giveaway_type)
                    results[giveaway_type] = {
                        'success': True,
                        'winners': len(pending_winners),
                        'winner_name': pending_winners[0].get('first_name', 'Unknown') if pending_winners else None
                    }
                except Exception as e:
                    results[giveaway_type] = {
                        'success': False,
                        'error': str(e)
                    }
            
            message = "üé≤ <b>BULK DRAW EXECUTION RESULTS</b>\n\n"
            
            total_winners = 0
            
            for giveaway_type, result in results.items():
                if result['success']:
                    winners = result['winners']
                    total_winners += winners
                    if winners > 0:
                        message += f"‚úÖ {giveaway_type.title()}: {result['winner_name']} selected\n"
                    else:
                        message += f"‚úÖ {giveaway_type.title()}: No eligible participants\n"
                else:
                    message += f"‚ùå {giveaway_type.title()}: Error - {result['error']}\n"
            
            message += f"\nüìä <b>Total new winners:</b> {total_winners}"
            
            if total_winners > 0:
                message += f"\n\nüí° Check pending winners for payment confirmation"
            
            buttons = [
                [InlineKeyboardButton("üëë View all pending", callback_data="unified_all_pending")],
                [InlineKeyboardButton("üè† Back to unified", callback_data="panel_unified_main")]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error executing all draws: {e}")
            await query.edit_message_text("‚ùå Error executing draws")

    # ================== ANALYTICS COMMANDS ==================

    async def _handle_admin_analytics_command(self, update, context):
        """üîÑ MODIFIED: Enhanced analytics command with type selection"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Check if specific type requested
            if len(context.args) > 0:
                requested_type = context.args[0].lower()
                if requested_type in self.available_types:
                    await self._show_analytics_for_type(update, requested_type)
                    return
            
            # Show analytics menu
            message = "üìà <b>ANALYTICS MENU</b>\n\nSelect which analytics to view:"
            
            buttons = []
            for giveaway_type in self.available_types:
                button_text = f"üìä {giveaway_type.title()} Analytics"
                callback_data = f"analytics_{giveaway_type}_30"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            buttons.extend([
                [InlineKeyboardButton("üìà Cross-type comparison", callback_data="analytics_cross_type")],
                [InlineKeyboardButton("üåü Combined analytics", callback_data="analytics_combined")],
                [InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]
            ])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in analytics command: {e}")
            await update.message.reply_text("‚ùå Error loading analytics")

    async def _handle_admin_analytics_all_command(self, update, context):
        """üÜï NEW: Analytics for all types combined"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Get analytics for all types
            days_back = 30
            if context.args and len(context.args) > 0:
                try:
                    days_back = int(context.args[0])
                    days_back = max(1, min(days_back, 365))  # Limit between 1-365 days
                except ValueError:
                    days_back = 30
            
            combined_analytics = await self._get_combined_analytics(days_back)
            
            message = f"""üìà <b>COMBINED ANALYTICS ({days_back} days)</b>

üåü <b>GLOBAL OVERVIEW:</b>
‚îú‚îÄ Total participants: <b>{combined_analytics['total_participants']}</b>
‚îú‚îÄ Unique users: <b>{combined_analytics['unique_users']}</b>
‚îú‚îÄ Total winners: <b>{combined_analytics['total_winners']}</b>
‚îú‚îÄ Money distributed: <b>${combined_analytics['total_distributed']}</b>
‚îî‚îÄ Active days: <b>{combined_analytics['active_days']}</b>

üìä <b>BY TYPE:</b>"""

            for giveaway_type, data in combined_analytics['by_type'].items():
                message += f"""
üéØ <b>{giveaway_type.upper()}:</b>
‚îú‚îÄ Participants: {data['participants']}
‚îú‚îÄ Winners: {data['winners']}
‚îú‚îÄ Distributed: ${data['distributed']}
‚îî‚îÄ Avg/day: {data['avg_per_day']}"""

            message += f"\n\nüí° Use `/admin_analytics <type> <days>` for specific analytics"
            
            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in combined analytics: {e}")
            await update.message.reply_text("‚ùå Error getting combined analytics")

    async def _show_analytics_for_type(self, update, giveaway_type, days_back=30):
        """üÜï NEW: Show analytics for specific type"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            
            # Get basic stats
            stats = giveaway_system.get_stats(giveaway_type)
            
            # Get more detailed analytics (placeholder for now)
            analytics = {
                'period_days': days_back,
                'total_participants': stats.get('total_participants', 0),
                'total_winners': stats.get('total_winners', 0),
                'total_distributed': stats.get('total_prize_distributed', 0),
                'today_participants': stats.get('today_participants', 0)
            }
            
            prize = giveaway_system.get_prize_amount(giveaway_type)
            
            message = f"""üìä <b>{giveaway_type.upper()} ANALYTICS ({days_back} days)</b>

üí∞ <b>Prize Amount:</b> ${prize} USD

üìà <b>Participation:</b>
‚îú‚îÄ Today's participants: <b>{analytics['today_participants']}</b>
‚îú‚îÄ Total participants: <b>{analytics['total_participants']}</b>
‚îú‚îÄ Period analyzed: <b>{analytics['period_days']} days</b>

üèÜ <b>Winners & Prizes:</b>
‚îú‚îÄ Total winners: <b>{analytics['total_winners']}</b>
‚îú‚îÄ Money distributed: <b>${analytics['total_distributed']}</b>
‚îú‚îÄ Average per winner: <b>${analytics['total_distributed'] / max(analytics['total_winners'], 1):.2f}</b>

üìä <b>Performance:</b>
‚îú‚îÄ Win rate: <b>{(analytics['total_winners'] / max(analytics['total_participants'], 1) * 100):.2f}%</b>
‚îî‚îÄ Daily average: <b>{analytics['total_participants'] / max(analytics['period_days'], 1):.1f} participants</b>

<i>Updated: {stats.get('timestamp', 'N/A')}</i>"""

            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing {giveaway_type} analytics: {e}")
            await update.message.reply_text("‚ùå Error getting analytics")

    async def _get_combined_analytics(self, days_back=30):
        """üÜï NEW: Get combined analytics from all types"""
        try:
            combined = {
                'total_participants': 0,
                'unique_users': set(),
                'total_winners': 0,
                'total_distributed': 0,
                'active_days': 0,
                'by_type': {}
            }
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                
                # Get type-specific data
                type_data = {
                    'participants': stats.get('total_participants', 0),
                    'winners': stats.get('total_winners', 0),
                    'distributed': stats.get('total_prize_distributed', 0),
                    'avg_per_day': stats.get('total_participants', 0) / max(days_back, 1)
                }
                
                combined['by_type'][giveaway_type] = type_data
                combined['total_participants'] += type_data['participants']
                combined['total_winners'] += type_data['winners']
                combined['total_distributed'] += type_data['distributed']
            
            # Convert unique users set to count
            combined['unique_users'] = len(combined['unique_users'])
            combined['active_days'] = days_back  # Simplified for now
            
            return combined
            
        except Exception as e:
            logging.error(f"Error getting combined analytics: {e}")
            return {}

    async def _handle_admin_user_stats_command(self, update, context):
        """üîÑ MODIFIED: Enhanced user stats with multi-type support"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Check parameters
            if not context.args or len(context.args) != 1:
                await update.message.reply_text(
                    "‚ùå <b>Incorrect usage</b>\n\n<b>Format:</b> <code>/admin_user_stats &lt;telegram_id&gt;</code>\n\n<b>Example:</b> <code>/admin_user_stats 123456</code>",
                    parse_mode='HTML'
                )
                return
            
            target_user_id = context.args[0].strip()
            
            # Get multi-type user statistics
            multi_stats = await self._get_user_multi_type_stats(target_user_id)
            
            if not multi_stats or not any(stats['total_participations'] > 0 for stats in multi_stats['by_type'].values()):
                await update.message.reply_text(
                    f"‚ùå <b>User not found</b>\n\nNo participation found for ID: <code>{target_user_id}</code>",
                    parse_mode='HTML'
                )
                return
            
            # Format multi-type message
            combined = multi_stats['combined']
            message = f"""üë§ <b>MULTI-TYPE USER STATISTICS</b>

üÜî <b>Telegram ID:</b> <code>{target_user_id}</code>

üåü <b>COMBINED TOTALS:</b>
‚îú‚îÄ Total participations: <b>{combined['total_participations_all']}</b>
‚îú‚îÄ Total wins: <b>{combined['total_wins_all']}</b>
‚îú‚îÄ Total prizes: <b>${combined['total_prize_won_all']}</b>
‚îú‚îÄ Unique accounts: <b>{combined['unique_accounts_all']}</b>
‚îî‚îÄ Active types: <b>{len(combined['active_types'])}</b>

üìä <b>BY GIVEAWAY TYPE:</b>"""

            for giveaway_type in combined['active_types']:
                type_stats = multi_stats['by_type'][giveaway_type]
                message += f"""
üéØ <b>{giveaway_type.upper()}:</b>
‚îú‚îÄ Participations: {type_stats['total_participations']}
‚îú‚îÄ Wins: {type_stats['total_wins']} ({type_stats['win_rate']}%)
‚îú‚îÄ Prizes won: ${type_stats['total_prize_won']}
‚îî‚îÄ Accounts used: {type_stats['unique_accounts']}"""

            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in user stats command: {e}")
            await update.message.reply_text("‚ùå Error getting user statistics")

    async def _get_user_multi_type_stats(self, user_id):
        """üÜï NEW: Get user statistics across all types"""
        try:
            multi_stats = {'by_type': {}, 'combined': {}}
            
            total_participations_all = 0
            total_wins_all = 0
            total_prize_won_all = 0
            all_accounts = set()
            active_types = []
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_user_participation_stats(user_id, giveaway_type)
                
                if stats and stats['total_participations'] > 0:
                    multi_stats['by_type'][giveaway_type] = stats
                    active_types.append(giveaway_type)
                    
                    total_participations_all += stats['total_participations']
                    total_wins_all += stats['total_wins']
                    total_prize_won_all += stats['total_prize_won']
                    all_accounts.update(stats['accounts_used'])
            
            multi_stats['combined'] = {
                'total_participations_all': total_participations_all,
                'total_wins_all': total_wins_all,
                'total_prize_won_all': total_prize_won_all,
                'unique_accounts_all': len(all_accounts),
                'active_types': active_types
            }
            
            return multi_stats
            
        except Exception as e:
            logging.error(f"Error getting multi-type user stats: {e}")
            return {}

    async def _handle_admin_top_users_command(self, update, context):
        """üîÑ MODIFIED: Top users with multi-type support"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Parse parameters
            limit = 10
            giveaway_type = None
            
            if context.args:
                if len(context.args) >= 1:
                    try:
                        limit = int(context.args[0])
                        limit = max(1, min(limit, 50))  # Limit between 1-50
                    except ValueError:
                        if context.args[0].lower() in self.available_types:
                            giveaway_type = context.args[0].lower()
                
                if len(context.args) >= 2:
                    if context.args[1].lower() in self.available_types:
                        giveaway_type = context.args[1].lower()
                    else:
                        try:
                            limit = int(context.args[1])
                            limit = max(1, min(limit, 50))
                        except ValueError:
                            pass
            
            if giveaway_type:
                # Show top users for specific type
                await self._show_top_users_for_type(update, giveaway_type, limit)
            else:
                # Show combined top users menu
                await self._show_top_users_menu(update, limit)
                
        except Exception as e:
            logging.error(f"Error in top users command: {e}")
            await update.message.reply_text("‚ùå Error getting top users")

    async def _show_top_users_for_type(self, update, giveaway_type, limit):
        """üÜï NEW: Show top users for specific type"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            top_participants = giveaway_system.get_top_participants_report(limit, giveaway_type)
            
            if not top_participants:
                await update.message.reply_text(f"‚ùå No participants found for {giveaway_type} giveaway")
                return
            
            message = f"üèÜ <b>TOP {len(top_participants)} {giveaway_type.upper()} USERS</b>\n\n"
            
            for i, (user_id, stats) in enumerate(top_participants, 1):
                username = stats['username'] if stats['username'] != 'N/A' else 'No username'
                first_name = stats['first_name'] if stats['first_name'] != 'N/A' else 'No name'
                
                message += f"{i}. <b>{first_name}</b> (@{username})\n"
                message += f"   üìä {stats['participations']} participations\n"
                message += f"   üèÜ {stats['wins']} wins ({stats['win_rate']}%)\n"
                message += f"   üí∞ ${stats['total_prizes']} won\n\n"
            
            message += f"üí° Use `/admin_top_users &lt;number&gt; &lt;type&gt;` to customize"
            
            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing top users for {giveaway_type}: {e}")
            await update.message.reply_text("‚ùå Error getting top users")

    async def _show_top_users_menu(self, update, limit):
        """üÜï NEW: Show top users selection menu"""
        try:
            message = f"üèÜ <b>TOP {limit} USERS MENU</b>\n\nSelect which top users to view:"
            
            buttons = []
            for giveaway_type in self.available_types:
                button_text = f"üéØ Top {limit} {giveaway_type.title()}"
                callback_data = f"top_users_{giveaway_type}_{limit}"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            buttons.extend([
                [InlineKeyboardButton(f"üåü Combined top {limit}", callback_data=f"top_users_combined_{limit}")],
                [InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]
            ])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing top users menu: {e}")
            await update.message.reply_text("‚ùå Error loading top users menu")

    async def _handle_admin_account_report_command(self, update, context):
        """üîÑ MODIFIED: Account report with multi-type support"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Check if specific type requested
            giveaway_type = None
            if context.args and len(context.args) > 0:
                if context.args[0].lower() in self.available_types:
                    giveaway_type = context.args[0].lower()
            
            if giveaway_type:
                await self._show_account_report_for_type(update, giveaway_type)
            else:
                await self._show_account_report_menu(update)
                
        except Exception as e:
            logging.error(f"Error in account report command: {e}")
            await update.message.reply_text("‚ùå Error getting account report")

    async def _show_account_report_for_type(self, update, giveaway_type):
        """üÜï NEW: Show account report for specific type"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            account_report = giveaway_system.get_account_ownership_report(giveaway_type)
            
            if not account_report:
                await update.message.reply_text(f"‚ùå No account data for {giveaway_type} giveaway")
                return
            
            # Analyze accounts
            suspicious_accounts = []
            clean_accounts = []
            
            for account, data in account_report.items():
                if isinstance(data, dict) and data.get('user_count', 0) > 1:
                    suspicious_accounts.append((account, data))
                else:
                    clean_accounts.append(account)
            
            message = f"""üè¶ <b>{giveaway_type.upper()} ACCOUNT REPORT</b>

üìä <b>Summary:</b>
‚îú‚îÄ Total accounts: {len(account_report)}
‚îú‚îÄ Clean accounts: {len(clean_accounts)}
‚îî‚îÄ ‚ö†Ô∏è Suspicious accounts: {len(suspicious_accounts)}"""
            
            if suspicious_accounts:
                message += f"\n\n‚ö†Ô∏è <b>Accounts with multiple users:</b>"
                for i, (account, data) in enumerate(suspicious_accounts[:5], 1):
                    if isinstance(data, dict):
                        message += f"\n{i}. Account {account} ({data.get('user_count', 0)} users)"
                
                if len(suspicious_accounts) > 5:
                    message += f"\n... and {len(suspicious_accounts) - 5} more suspicious accounts"
            else:
                message += "\n\n‚úÖ <b>All accounts are clean</b>"
            
            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing account report for {giveaway_type}: {e}")
            await update.message.reply_text("‚ùå Error getting account report")

    async def _show_account_report_menu(self, update):
        """üÜï NEW: Show account report selection menu"""
        try:
            message = "üè¶ <b>ACCOUNT REPORT MENU</b>\n\nSelect which account report to view:"
            
            buttons = []
            for giveaway_type in self.available_types:
                button_text = f"üìä {giveaway_type.title()} Accounts"
                callback_data = f"account_report_{giveaway_type}"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            buttons.extend([
                [InlineKeyboardButton("üåü Combined report", callback_data="account_report_combined")],
                [InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]
            ])
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing account report menu: {e}")
            await update.message.reply_text("‚ùå Error loading account report menu")

    async def _handle_admin_revenue_analysis_command(self, update, context):
        """üîÑ MODIFIED: Revenue analysis with multi-type support"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Get combined revenue analysis
            revenue_analysis = await self._get_combined_revenue_analysis()
            
            message = f"""üí∞ <b>MULTI-TYPE REVENUE ANALYSIS</b>

üåü <b>COMBINED TOTALS:</b>
‚îú‚îÄ Total distributed: <b>${revenue_analysis['total_distributed_all']}</b>
‚îú‚îÄ Total winners: <b>{revenue_analysis['total_winners_all']}</b>
‚îú‚îÄ Total participants: <b>{revenue_analysis['total_participants_all']}</b>
‚îú‚îÄ Average per winner: <b>${revenue_analysis['avg_per_winner']:.2f}</b>
‚îî‚îÄ Cost per participant: <b>${revenue_analysis['cost_per_participant']:.2f}</b>

üìä <b>BY TYPE:</b>"""

            for giveaway_type, data in revenue_analysis['by_type'].items():
                message += f"""
üéØ <b>{giveaway_type.upper()} (${data['prize']}):</b>
‚îú‚îÄ Distributed: ${data['distributed']}
‚îú‚îÄ Winners: {data['winners']}
‚îú‚îÄ ROI ratio: {data['roi_ratio']:.2f}%"""

            message += f"\n\nüìà <b>Efficiency metrics calculated across all giveaway types</b>"
            
            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in revenue analysis: {e}")
            await update.message.reply_text("‚ùå Error getting revenue analysis")

    async def _get_combined_revenue_analysis(self):
        """üÜï NEW: Get combined revenue analysis"""
        try:
            combined = {
                'total_distributed_all': 0,
                'total_winners_all': 0,
                'total_participants_all': 0,
                'by_type': {}
            }
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                
                type_data = {
                    'prize': prize,
                    'distributed': stats.get('total_prize_distributed', 0),
                    'winners': stats.get('total_winners', 0),
                    'participants': stats.get('total_participants', 0),
                    'roi_ratio': (stats.get('total_winners', 0) / max(stats.get('total_participants', 1), 1)) * 100
                }
                
                combined['by_type'][giveaway_type] = type_data
                combined['total_distributed_all'] += type_data['distributed']
                combined['total_winners_all'] += type_data['winners']
                combined['total_participants_all'] += type_data['participants']
            
            # Calculate derived metrics
            combined['avg_per_winner'] = combined['total_distributed_all'] / max(combined['total_winners_all'], 1)
            combined['cost_per_participant'] = combined['total_distributed_all'] / max(combined['total_participants_all'], 1)
            
            return combined
            
        except Exception as e:
            logging.error(f"Error getting combined revenue analysis: {e}")
            return {}

    async def _handle_admin_backup_command(self, update, context):
        """üîÑ MODIFIED: Backup command with multi-type support"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            # Create backups for all types
            backup_results = {}
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                backup_result = giveaway_system.backup_history_file(giveaway_type)
                backup_results[giveaway_type] = backup_result
            
            # Format results
            message = "üíæ <b>MULTI-TYPE BACKUP RESULTS</b>\n\n"
            
            successful_backups = []
            failed_backups = []
            
            for giveaway_type, result in backup_results.items():
                if result:
                    successful_backups.append(giveaway_type)
                    message += f"‚úÖ {giveaway_type.title()}: Backup created\n"
                else:
                    failed_backups.append(giveaway_type)
                    message += f"‚ùå {giveaway_type.title()}: Backup failed\n"
            
            message += f"\nüìä <b>Summary:</b> {len(successful_backups)} successful, {len(failed_backups)} failed"
            
            if successful_backups:
                message += f"\n\nüí° Backup files saved on server with timestamp"
            
            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in backup command: {e}")
            await update.message.reply_text("‚ùå Error creating backups")

    # ================== DEBUG AND MAINTENANCE ==================

    async def _handle_debug_pending_system(self, update, context):
        """üîÑ MODIFIED: Debug pending system for all types"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            message = "üîç <b>DEBUG PENDING WINNERS SYSTEM</b>\n\n"
            
            total_pending = 0
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                total_pending += pending_count
                
                message += f"üéØ <b>{giveaway_type.upper()}:</b> {pending_count} pending\n"
                
                # Execute debug for each type
                debug_result = giveaway_system.debug_participant_cleanup(giveaway_type)
                if debug_result:
                    message += f"   üìä Current: {debug_result['current_participants']}\n"
                    message += f"   üìú History: {debug_result['total_history']}\n\n"
            
            message += f"üìä <b>Total pending across all types:</b> {total_pending}\n"
            message += f"üìÑ Check console for detailed debug output"
            
            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in debug pending system: {e}")
            await update.message.reply_text("‚ùå Error in debug system")

    async def _handle_debug_all_systems(self, update, context):
        """üÜï NEW: Debug all giveaway systems"""
        try:
            user_id = update.effective_user.id
            
            # Verify admin
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can use this command")
                return
            
            message = "üîß <b>COMPLETE SYSTEM DEBUG</b>\n\n"
            
            # Check each giveaway system
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                
                # Basic health check
                try:
                    stats = giveaway_system.get_stats(giveaway_type)
                    pending = giveaway_system.get_pending_winners(giveaway_type)
                    prize = giveaway_system.get_prize_amount(giveaway_type)
                    
                    message += f"üéØ <b>{giveaway_type.upper()} (${prize}):</b>\n"
                    message += f"   ‚úÖ System operational\n"
                    message += f"   üë• Today: {stats.get('today_participants', 0)}\n"
                    message += f"   ‚è≥ Pending: {len(pending)}\n"
                    message += f"   üèÜ Total winners: {stats.get('total_winners', 0)}\n\n"
                    
                except Exception as e:
                    message += f"üéØ <b>{giveaway_type.upper()}:</b>\n"
                    message += f"   ‚ùå System error: {str(e)[:50]}...\n\n"
            
            # Configuration check
            try:
                config_status = "‚úÖ Configuration loaded"
                timezone_info = self.config_loader.get_timezone()
                message += f"‚öôÔ∏è <b>Configuration:</b> {config_status}\n"
                message += f"üåç <b>Timezone:</b> {timezone_info}\n"
            except Exception as e:
                message += f"‚öôÔ∏è <b>Configuration:</b> ‚ùå Error: {str(e)[:30]}...\n"
            
            message += f"\nüîç Detailed logs available in console"
            
            keyboard = [[InlineKeyboardButton("üè† Back to panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in debug all systems: {e}")
            await update.message.reply_text("‚ùå Error in system debug")

    async def _handle_stats_command_public(self, update, context):
        """üîÑ MODIFIED: Public stats command (admin only, shows all types)"""
        try:
            user_id = update.effective_user.id
            member = await context.bot.get_chat_member(self.channel_id, user_id)
            
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can view statistics")
                return
            
            # Get quick stats from all types
            message = "üìä <b>GIVEAWAY STATISTICS OVERVIEW</b>\n\n"
            
            total_today = 0
            total_pending = 0
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                prize = giveaway_system.get_prize_amount(giveaway_type)
                
                message += f"üéØ <b>{giveaway_type.upper()} (${prize}):</b>\n"
                message += f"‚îú‚îÄ Today: {stats.get('today_participants', 0)} participants\n"
                message += f"‚îú‚îÄ Pending: {pending_count} winners\n"
                message += f"‚îî‚îÄ Total distributed: ${stats.get('total_prize_distributed', 0)}\n\n"
                
                total_today += stats.get('today_participants', 0)
                total_pending += pending_count
            
            message += f"üìà <b>COMBINED:</b> {total_today} today, {total_pending} pending"
            
            keyboard = [[InlineKeyboardButton("üè† Admin panel", callback_data="panel_refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing public stats: {e}")
            await update.message.reply_text("‚ùå Error getting statistics")

    # ================== SCHEDULING INTEGRATION METHODS ==================

    def get_giveaway_system(self, giveaway_type):
        """üÜï NEW: Get specific giveaway system"""
        return self.giveaway_systems.get(giveaway_type)

    def get_all_giveaway_systems(self):
        """üÜï NEW: Get all giveaway systems"""
        return self.giveaway_systems

    async def send_daily_invitation(self):
        """üÜï NEW: Send daily invitation (for scheduler)"""
        try:
            return await self.giveaway_systems['daily'].send_invitation('daily')
        except Exception as e:
            logging.error(f"Error sending daily invitation: {e}")
            return False

    async def send_weekly_invitation(self):
        """üÜï NEW: Send weekly invitation (for scheduler)"""
        try:
            return await self.giveaway_systems['weekly'].send_invitation('weekly')
        except Exception as e:
            logging.error(f"Error sending weekly invitation: {e}")
            return False

    async def send_monthly_invitation(self):
        """üÜï NEW: Send monthly invitation (for scheduler)"""
        try:
            return await self.giveaway_systems['monthly'].send_invitation('monthly')
        except Exception as e:
            logging.error(f"Error sending monthly invitation: {e}")
            return False

    async def run_daily_draw(self):
        """üÜï NEW: Execute daily draw (for scheduler)"""
        try:
            await self.giveaway_systems['daily'].run_giveaway('daily')
            logging.info("Daily draw executed successfully")
        except Exception as e:
            logging.error(f"Error in daily draw: {e}")

    async def run_weekly_draw(self):
        """üÜï NEW: Execute weekly draw (for scheduler)"""
        try:
            await self.giveaway_systems['weekly'].run_giveaway('weekly')
            logging.info("Weekly draw executed successfully")
        except Exception as e:
            logging.error(f"Error in weekly draw: {e}")

    async def run_monthly_draw(self):
        """üÜï NEW: Execute monthly draw (for scheduler)"""
        try:
            await self.giveaway_systems['monthly'].run_giveaway('monthly')
            logging.info("Monthly draw executed successfully")
        except Exception as e:
            logging.error(f"Error in monthly draw: {e}")

    async def notify_admin_pending_winners(self, giveaway_type=None):
        """üîÑ MODIFIED: Notify admin about pending winners (for scheduler)"""
        try:
            if giveaway_type:
                # Notify for specific type
                giveaway_system = self.giveaway_systems[giveaway_type]
                pending_count = len(giveaway_system.get_pending_winners(giveaway_type))
                
                if pending_count > 0:
                    prize = giveaway_system.get_prize_amount(giveaway_type)
                    message = f"‚ö†Ô∏è <b>{giveaway_type.upper()} REMINDER</b>\n\nYou have <b>{pending_count}</b> pending {giveaway_type} winner(s) waiting for payment confirmation.\n\nüí∞ <b>Prize amount:</b> ${prize} USD each\n\nUse `/admin_pending_{giveaway_type}` to view details."
                    
                    await self.app.bot.send_message(
                        chat_id=self.admin_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    return True
            else:
                # Notify for all types
                total_pending = 0
                pending_details = []
                
                for gt in self.available_types:
                    giveaway_system = self.giveaway_systems[gt]
                    pending_count = len(giveaway_system.get_pending_winners(gt))
                    
                    if pending_count > 0:
                        prize = giveaway_system.get_prize_amount(gt)
                        total_pending += pending_count
                        pending_details.append(f"üéØ {gt.title()}: {pending_count} pending (${prize} each)")
                
                if total_pending > 0:
                    message = f"‚ö†Ô∏è <b>PENDING WINNERS REMINDER</b>\n\nYou have <b>{total_pending}</b> pending winner(s) across all giveaway types:\n\n"
                    message += "\n".join(pending_details)
                    message += f"\n\nUse `/admin_pending_winners` to view all details."
                    
                    await self.app.bot.send_message(
                        chat_id=self.admin_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    return True
            
            return False
            
        except Exception as e:
            logging.error(f"Error notifying admin about pending winners: {e}")
            return False

    def get_pending_winners_count(self, giveaway_type=None):
        """üîÑ MODIFIED: Get pending winners count"""
        try:
            if giveaway_type:
                giveaway_system = self.giveaway_systems[giveaway_type]
                return len(giveaway_system.get_pending_winners(giveaway_type))
            else:
                total_count = 0
                for gt in self.available_types:
                    giveaway_system = self.giveaway_systems[gt]
                    total_count += len(giveaway_system.get_pending_winners(gt))
                return total_count
        except Exception as e:
            logging.error(f"Error getting pending winners count: {e}")
            return 0

    def get_giveaway_stats(self, giveaway_type=None):
        """üîÑ MODIFIED: Get statistics for reporting"""
        try:
            if giveaway_type:
                giveaway_system = self.giveaway_systems[giveaway_type]
                return giveaway_system.get_stats(giveaway_type)
            else:
                # Return combined stats
                combined_stats = {
                    'total_participants_all': 0,
                    'total_winners_all': 0,
                    'total_distributed_all': 0,
                    'by_type': {}
                }
                
                for gt in self.available_types:
                    giveaway_system = self.giveaway_systems[gt]
                    stats = giveaway_system.get_stats(gt)
                    combined_stats['by_type'][gt] = stats
                    combined_stats['total_participants_all'] += stats.get('total_participants', 0)
                    combined_stats['total_winners_all'] += stats.get('total_winners', 0)
                    combined_stats['total_distributed_all'] += stats.get('total_prize_distributed', 0)
                
                return combined_stats
        except Exception as e:
            logging.error(f"Error getting giveaway stats: {e}")
            return {}

    # ================== HEALTH CHECK AND MONITORING ==================

    def verify_all_systems_health(self):
        """üÜï NEW: Comprehensive health check for all systems"""
        try:
            health_report = {
                'overall_status': 'healthy',
                'systems': {},
                'issues': [],
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    
                    # Test basic operations
                    stats = giveaway_system.get_stats(giveaway_type)
                    pending = giveaway_system.get_pending_winners(giveaway_type)
                    config = giveaway_system.get_giveaway_config(giveaway_type)
                    
                    # Check file access
                    file_paths = giveaway_system.get_file_paths(giveaway_type)
                    files_ok = all(os.path.exists(path) or path.endswith('.csv') for path in file_paths.values())
                    
                    system_status = {
                        'status': 'healthy',
                        'stats_accessible': bool(stats),
                        'pending_count': len(pending),
                        'files_accessible': files_ok,
                        'config_loaded': bool(config),
                        'prize_amount': giveaway_system.get_prize_amount(giveaway_type)
                    }
                    
                    health_report['systems'][giveaway_type] = system_status
                    
                except Exception as e:
                    health_report['systems'][giveaway_type] = {
                        'status': 'error',
                        'error': str(e)
                    }
                    health_report['issues'].append(f"{giveaway_type}: {str(e)}")
                    health_report['overall_status'] = 'degraded'
            
            # Check configuration
            try:
                bot_config = self.config_loader.get_bot_config()
                config_ok = all(key in bot_config for key in ['channel_id', 'admin_id'])
                if not config_ok:
                    health_report['issues'].append("Configuration incomplete")
                    health_report['overall_status'] = 'degraded'
            except Exception as e:
                health_report['issues'].append(f"Configuration error: {e}")
                health_report['overall_status'] = 'error'
            
            return health_report
            
        except Exception as e:
            logging.error(f"Error in health check: {e}")
            return {
                'overall_status': 'error',
                'error': str(e),
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }

    async def emergency_system_check(self):
        """üÜï NEW: Emergency check and notification"""
        try:
            health_report = self.verify_all_systems_health()
            
            if health_report['overall_status'] != 'healthy':
                # Send emergency notification to admin
                message = f"üö® <b>GIVEAWAY SYSTEM ALERT</b>\n\n"
                message += f"Status: <b>{health_report['overall_status'].upper()}</b>\n"
                message += f"Time: {health_report['timestamp']}\n\n"
                
                if health_report.get('issues'):
                    message += "<b>Issues detected:</b>\n"
                    for issue in health_report['issues'][:5]:  # Limit to 5 issues
                        message += f"‚Ä¢ {issue}\n"
                
                message += f"\nüîß Please check the system immediately."
                
                await self.app.bot.send_message(
                    chat_id=self.admin_id,
                    text=message,
                    parse_mode='HTML'
                )
                
                logging.warning(f"Emergency system alert sent: {health_report['overall_status']}")
                return False
            
            return True
            
        except Exception as e:
            logging.error(f"Error in emergency system check: {e}")
            return False

    # ================== CONFIGURATION MANAGEMENT ==================

    def reload_all_configurations(self):
        """üÜï NEW: Reload configurations for all systems"""
        try:
            # Reload main configuration
            self.config_loader.reload_config()
            
            # Update integration-level config
            bot_config = self.config_loader.get_bot_config()
            self.channel_id = bot_config['channel_id']
            self.admin_id = bot_config['admin_id']
            self.admin_username = bot_config.get('admin_username', 'admin')
            
            # Reload each giveaway system
            reload_results = {}
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    success = giveaway_system.reload_configuration()
                    reload_results[giveaway_type] = success
                except Exception as e:
                    reload_results[giveaway_type] = False
                    logging.error(f"Error reloading {giveaway_type} config: {e}")
            
            all_success = all(reload_results.values())
            logging.info(f"Configuration reload completed. Success: {all_success}")
            
            return {
                'success': all_success,
                'results': reload_results,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
        except Exception as e:
            logging.error(f"Error reloading configurations: {e}")
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }

    def get_system_info(self):
        """üÜï NEW: Get comprehensive system information"""
        try:
            system_info = {
                'integration_type': 'MultiGiveawayIntegration',
                'available_types': self.available_types,
                'total_systems': len(self.giveaway_systems),
                'admin_id': self.admin_id,
                'channel_id': self.channel_id,
                'config_loaded': bool(self.config_loader),
                'systems_status': {}
            }
            
            # Get status for each system
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                try:
                    stats = giveaway_system.get_stats(giveaway_type)
                    system_info['systems_status'][giveaway_type] = {
                        'operational': True,
                        'today_participants': stats.get('today_participants', 0),
                        'total_winners': stats.get('total_winners', 0),
                        'prize_amount': giveaway_system.get_prize_amount(giveaway_type)
                    }
                except Exception as e:
                    system_info['systems_status'][giveaway_type] = {
                        'operational': False,
                        'error': str(e)
                    }
            
            return system_info
            
        except Exception as e:
            logging.error(f"Error getting system info: {e}")
            return {'error': str(e)}

    # ================== UTILITY METHODS ==================

    def cleanup_all_old_participants(self, days=1):
        """üÜï NEW: Cleanup old participants for all types"""
        try:
            cleanup_results = {}
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    giveaway_system.cleanup_old_participants(giveaway_type, days)
                    cleanup_results[giveaway_type] = True
                except Exception as e:
                    cleanup_results[giveaway_type] = False
                    logging.error(f"Error cleaning up {giveaway_type}: {e}")
            
            all_success = all(cleanup_results.values())
            logging.info(f"Cleanup completed for all types. Success: {all_success}")
            
            return cleanup_results
            
        except Exception as e:
            logging.error(f"Error in cleanup all: {e}")
            return {}

    def backup_all_histories(self):
        """üÜï NEW: Create backups for all giveaway types"""
        try:
            backup_results = {}
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    backup_file = giveaway_system.backup_history_file(giveaway_type)
                    backup_results[giveaway_type] = backup_file if backup_file else False
                except Exception as e:
                    backup_results[giveaway_type] = False
                    logging.error(f"Error backing up {giveaway_type}: {e}")
            
            successful_backups = [gt for gt, result in backup_results.items() if result]
            logging.info(f"Backup completed. Successful: {len(successful_backups)}/{len(self.available_types)}")
            
            return backup_results
            
        except Exception as e:
            logging.error(f"Error in backup all: {e}")
            return {}

    async def run_maintenance_routine(self):
        """üÜï NEW: Run comprehensive maintenance routine"""
        try:
            maintenance_log = []
            
            # 1. Health check
            health_report = self.verify_all_systems_health()
            maintenance_log.append(f"Health check: {health_report['overall_status']}")
            
            # 2. Clean old participants
            cleanup_results = self.cleanup_all_old_participants()
            successful_cleanups = sum(1 for success in cleanup_results.values() if success)
            maintenance_log.append(f"Cleanup: {successful_cleanups}/{len(self.available_types)} successful")
            
            # 3. Create backups
            backup_results = self.backup_all_histories()
            successful_backups = sum(1 for result in backup_results.values() if result)
            maintenance_log.append(f"Backups: {successful_backups}/{len(self.available_types)} successful")
            
            # 4. Check pending winners
            total_pending = self.get_pending_winners_count()
            maintenance_log.append(f"Pending winners: {total_pending}")
            
            # 5. Send maintenance report to admin
            if health_report['overall_status'] != 'healthy' or total_pending > 5:
                report_message = f"üîß <b>MAINTENANCE REPORT</b>\n\n"
                report_message += "\n".join(f"‚Ä¢ {log}" for log in maintenance_log)
                
                if total_pending > 5:
                    report_message += f"\n\n‚ö†Ô∏è <b>High pending count:</b> {total_pending} winners waiting"
                
                if health_report.get('issues'):
                    report_message += f"\n\nüö® <b>Issues:</b>\n"
                    report_message += "\n".join(f"‚Ä¢ {issue}" for issue in health_report['issues'][:3])
                
                await self.app.bot.send_message(
                    chat_id=self.admin_id,
                    text=report_message,
                    parse_mode='HTML'
                )
            
            logging.info(f"Maintenance routine completed: {'; '.join(maintenance_log)}")
            return {
                'success': True,
                'log': maintenance_log,
                'health': health_report,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
        except Exception as e:
            logging.error(f"Error in maintenance routine: {e}")
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
        

    async def _show_analytics_inline(self, query, giveaway_type):
        """üÜï NEW: Show analytics for specific type"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            stats = giveaway_system.get_stats(giveaway_type)
            prize = giveaway_system.get_prize_amount(giveaway_type)

            total_participants = stats.get('total_participants', 0)
            total_winners = stats.get('total_winners', 0)
            total_distributed = stats.get('total_prize_distributed', 0)
            today_participants = stats.get('today_participants', 0)
            cost_per_participant = total_distributed / max(total_participants, 1)

            win_rate = (total_winners / max(total_participants, 1)) * 100
            avg_prize_per_day = total_distributed / max(30, 1)  # Approximate monthly average
            
            
            message = f"""üìà <b>{giveaway_type.upper()} ANALYTICS</b>

        üí∞ <b>Configuration:</b>
        ‚îú‚îÄ Prize Amount: ${prize} USD
        ‚îî‚îÄ Reset Frequency: {giveaway_type}

        üìä <b>Participation Analytics:</b>
        ‚îú‚îÄ Today's participants: <b>{today_participants}</b>
        ‚îú‚îÄ Total participants: <b>{total_participants:,}</b>
        ‚îú‚îÄ Daily efficiency: {'üü¢ High' if today_participants > 10 else 'üü° Medium' if today_participants > 5 else 'üî¥ Low'} ({today_participants}/day)
        ‚îî‚îÄ Participation trend: {'üìà Growing' if today_participants > 5 else 'üìä Stable'}

        üèÜ <b>Winner Analytics:</b>
        ‚îú‚îÄ Total winners: <b>{total_winners}</b>
        ‚îú‚îÄ Win rate: <b>{win_rate:.2f}%</b>
        ‚îú‚îÄ Money distributed: <b>${total_distributed:,}</b>
        ‚îî‚îÄ Cost per participant: <b>${cost_per_participant:.2f}</b>

        üìà <b>Performance Metrics:</b>
        ‚îú‚îÄ Average prize/month: <b>${avg_prize_per_day * 30:.2f}</b>
        ‚îú‚îÄ Success rate: {'üü¢ Excellent' if win_rate > 10 else 'üü° Good' if win_rate > 5 else 'üü† Moderate' if win_rate > 2 else 'üî¥ Low'}
        ‚îú‚îÄ Engagement level: {'üü¢ High' if total_participants > 100 else 'üü° Medium' if total_participants > 50 else 'üî¥ Growing'}
        ‚îî‚îÄ System efficiency: <b>{(total_winners / max(total_participants, 1) * 1000):.1f}</b> winners per 1000 participants

            üîç <b>Select detailed period:</b>"""

            buttons = [
                [
                    InlineKeyboardButton("üìä Last 7 days", callback_data=f"analytics_{giveaway_type}_7"),
                    InlineKeyboardButton("üìä Last 30 days", callback_data=f"analytics_{giveaway_type}_30")
                ],
                [
                    InlineKeyboardButton("üìä Last 90 days", callback_data=f"analytics_{giveaway_type}_90"),
                    InlineKeyboardButton("üë• Top users", callback_data=f"panel_top_users_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton("üè¶ Account report", callback_data=f"account_report_{giveaway_type}"),
                    InlineKeyboardButton("üí∞ Revenue analysis", callback_data=f"revenue_analysis_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}"),
                    InlineKeyboardButton("üè† Unified panel", callback_data="panel_unified_main")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing analytics for {giveaway_type}: {e}")
            await query.edit_message_text("‚ùå Error loading analytics")

    async def _show_analytics_detailed_inline(self, query, giveaway_type, days):
        """üÜï NEW: Show detailed analytics for specific period"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            stats = giveaway_system.get_stats(giveaway_type)
            prize = giveaway_system.get_prize_amount(giveaway_type)
            
            # Calculate detailed metrics for the period
            total_participants = stats.get('total_participants', 0)
            total_winners = stats.get('total_winners', 0)
            total_distributed = stats.get('total_prize_distributed', 0)
            
            avg_participants_per_day = total_participants / days if days > 0 else 0
            win_rate = (total_winners / max(total_participants, 1)) * 100
            cost_per_participant = total_distributed / max(total_participants, 1)
            
            message = f"""üìä <b>{giveaway_type.upper()} DETAILED ANALYTICS ({days} days)</b>

    üí∞ <b>Prize:</b> ${prize} USD per draw

    üìà <b>Period Analysis:</b>
    ‚îú‚îÄ Total participants: {total_participants}
    ‚îú‚îÄ Daily average: {avg_participants_per_day:.1f}
    ‚îú‚îÄ Total winners: {total_winners}
    ‚îú‚îÄ Money distributed: ${total_distributed}
    ‚îú‚îÄ Win rate: {win_rate:.2f}%
    ‚îî‚îÄ Cost per participant: ${cost_per_participant:.2f}

    üìä <b>Performance:</b>
    ‚îú‚îÄ Active days in period: {min(days, 30)}
    ‚îú‚îÄ Average engagement: {'High' if avg_participants_per_day > 10 else 'Medium' if avg_participants_per_day > 5 else 'Low'}
    ‚îú‚îÄ Distribution efficiency: {(total_distributed / (days * prize)):.1f}x expected
    ‚îî‚îÄ Growth trend: {'Positive' if total_participants > days * 5 else 'Stable'}

    üìã <b>Recommendations:</b>
    ‚Ä¢ {'Increase promotion' if avg_participants_per_day < 10 else 'Maintain current strategy'}
    ‚Ä¢ {'Consider prize adjustment' if win_rate < 5 else 'Prize level optimal'}

    <i>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"""

            buttons = [
                [
                    InlineKeyboardButton("üë• Top users", callback_data=f"panel_top_users_{giveaway_type}"),
                    InlineKeyboardButton("üè¶ Account report", callback_data=f"account_report_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton("üìà Other periods", callback_data=f"panel_analytics_{giveaway_type}"),
                    InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing detailed analytics: {e}")
            await query.edit_message_text("‚ùå Error loading detailed analytics")

    async def _show_top_users_inline(self, query, giveaway_type):
        """üÜï NEW: Show top users for specific type"""
        try:
            giveaway_system = self.giveaway_systems[giveaway_type]
            # This would need to be implemented in ga_manager.py
            # For now, showing placeholder
            stats = giveaway_system.get_stats(giveaway_type)
            prize = giveaway_system.get_prize_amount(giveaway_type)
            
            message = f"""üë• <b>TOP {giveaway_type.upper()} USERS</b>

    üí∞ <b>Giveaway:</b> ${prize} USD

    üèÜ <b>Most Active Participants:</b>

    üìä <b>Current Period Analysis:</b>
    ‚îú‚îÄ Today's participants: {stats.get('today_participants', 0)}
    ‚îú‚îÄ Total unique users: {stats.get('total_participants', 0)}
    ‚îú‚îÄ Total winners: {stats.get('total_winners', 0)}
    ‚îî‚îÄ Analysis period: All time

    üí° <b>Top Users Analysis:</b>
    This feature shows the most active participants in {giveaway_type} giveaways.

    üîß <b>Advanced Analysis Available:</b>
    ‚Ä¢ Participation frequency
    ‚Ä¢ Win rates per user
    ‚Ä¢ Account usage patterns
    ‚Ä¢ Loyalty metrics

    üí° This feature requires advanced analytics implementation."""

            buttons = [
                [
                    InlineKeyboardButton("üìà Analytics", callback_data=f"panel_analytics_{giveaway_type}"),
                    InlineKeyboardButton("üè¶ Account report", callback_data=f"account_report_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing top users: {e}")
            await query.edit_message_text("‚ùå Error loading top users")

    async def _show_unified_multi_analytics_inline(self, query):
        """üÜï NEW: Show unified multi-analytics"""
        try:
            combined_stats = {}
            total_participants_all = 0
            total_winners_all = 0
            total_distributed_all = 0
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                
                combined_stats[giveaway_type] = {
                    'participants': stats.get('total_participants', 0),
                    'winners': stats.get('total_winners', 0),
                    'distributed': stats.get('total_prize_distributed', 0),
                    'prize': giveaway_system.get_prize_amount(giveaway_type)
                }
                
                total_participants_all += stats.get('total_participants', 0)
                total_winners_all += stats.get('total_winners', 0)
                total_distributed_all += stats.get('total_prize_distributed', 0)
            
            message = f"""üìà <b>UNIFIED MULTI-ANALYTICS</b>

    üåü <b>GLOBAL PERFORMANCE:</b>
    ‚îú‚îÄ Total participants: {total_participants_all}
    ‚îú‚îÄ Total winners: {total_winners_all}
    ‚îú‚îÄ Total distributed: ${total_distributed_all}
    ‚îú‚îÄ Overall win rate: {(total_winners_all / max(total_participants_all, 1) * 100):.2f}%
    ‚îî‚îÄ Average per winner: ${total_distributed_all / max(total_winners_all, 1):.2f}

    üìä <b>BY GIVEAWAY TYPE:</b>"""

            for giveaway_type, stats in combined_stats.items():
                efficiency = (stats['winners'] / max(stats['participants'], 1)) * 100
                message += f"""
    üéØ <b>{giveaway_type.upper()} (${stats['prize']}):</b>
    ‚îú‚îÄ Participants: {stats['participants']}
    ‚îú‚îÄ Winners: {stats['winners']}
    ‚îú‚îÄ Distributed: ${stats['distributed']}
    ‚îî‚îÄ Efficiency: {efficiency:.1f}%"""

            message += f"\n\nüí° <b>Cross-type insights:</b>\n‚Ä¢ Most popular: {max(combined_stats.keys(), key=lambda k: combined_stats[k]['participants'])}\n‚Ä¢ Highest efficiency: {max(combined_stats.keys(), key=lambda k: combined_stats[k]['winners'] / max(combined_stats[k]['participants'], 1))}"

            buttons = [
                [
                    InlineKeyboardButton("üìä Cross-type comparison", callback_data="unified_cross_analytics"),
                    InlineKeyboardButton("üìà Revenue analysis", callback_data="analytics_revenue")
                ],
                [
                    InlineKeyboardButton("üè† Back to unified", callback_data="panel_refresh")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing unified analytics: {e}")
            await query.edit_message_text("‚ùå Error loading unified analytics")


    async def _show_maintenance_panel_inline(self, query):
        """üÜï NEW: Show maintenance panel"""
        try:
            # Get system health
            health_report = self.verify_all_systems_health()
            
            message = f"""üõ†Ô∏è <b>MAINTENANCE PANEL</b>

    üå°Ô∏è <b>System Health:</b> {health_report['overall_status'].upper()}

    üíæ <b>Available Actions:</b>"""

            if health_report.get('issues'):
                message += f"\n\n‚ö†Ô∏è <b>Issues detected:</b>"
                for issue in health_report['issues'][:3]:
                    message += f"\n‚Ä¢ {issue}"

            buttons = [
                [
                    InlineKeyboardButton("üßπ Clean old data", callback_data="maintenance_cleanup"),
                    InlineKeyboardButton("üíæ Create backups", callback_data="maintenance_backup")
                ],
                [
                    InlineKeyboardButton("üîç System check", callback_data="maintenance_health"),
                    InlineKeyboardButton("üìä File status", callback_data="maintenance_files")
                ],
                [
                    InlineKeyboardButton("üè† Back to unified", callback_data="panel_unified_main")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing maintenance panel: {e}")
            await query.edit_message_text("‚ùå Error loading maintenance panel")

    async def _show_cross_type_analytics_inline(self, query):
        """üÜï NEW: Show cross-type analytics comparison (different from cross_analytics)"""
        try:
            # Get data for all types
            type_comparison = {}
            total_global_participants = 0
            total_global_winners = 0
            total_global_distributed = 0
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                pending = len(giveaway_system.get_pending_winners(giveaway_type))
                
                participants = stats.get('total_participants', 0)
                winners = stats.get('total_winners', 0)
                distributed = stats.get('total_prize_distributed', 0)
                
                type_comparison[giveaway_type] = {
                    'prize': prize,
                    'participants': participants,
                    'winners': winners,
                    'distributed': distributed,
                    'pending': pending,
                    'win_rate': (winners / max(participants, 1)) * 100,
                    'avg_cost_per_participant': distributed / max(participants, 1),
                    'efficiency_score': (winners * prize) / max(distributed, 1) if distributed > 0 else 0
                }
                
                total_global_participants += participants
                total_global_winners += winners
                total_global_distributed += distributed
            
            # Calculate rankings
            most_participants = max(type_comparison.keys(), key=lambda k: type_comparison[k]['participants'])
            highest_win_rate = max(type_comparison.keys(), key=lambda k: type_comparison[k]['win_rate'])
            most_efficient = max(type_comparison.keys(), key=lambda k: type_comparison[k]['efficiency_score'])
            
            message = f"""üîÑ <b>CROSS-TYPE ANALYTICS COMPARISON</b>

    üèÜ <b>RANKINGS:</b>
    ‚îú‚îÄ üë• Most Popular: <b>{most_participants.title()}</b>
    ‚îú‚îÄ üéØ Highest Win Rate: <b>{highest_win_rate.title()}</b>
    ‚îî‚îÄ ‚ö° Most Efficient: <b>{most_efficient.title()}</b>

    üåç <b>GLOBAL TOTALS:</b>
    ‚îú‚îÄ Combined Participants: <b>{total_global_participants}</b>
    ‚îú‚îÄ Combined Winners: <b>{total_global_winners}</b>
    ‚îú‚îÄ Total Distributed: <b>${total_global_distributed}</b>
    ‚îî‚îÄ Overall Win Rate: <b>{(total_global_winners / max(total_global_participants, 1) * 100):.2f}%</b>

    üìä <b>DETAILED BREAKDOWN:</b>"""

            for giveaway_type, data in type_comparison.items():
                message += f"""

    üéØ <b>{giveaway_type.upper()} (${data['prize']}):</b>
    ‚îú‚îÄ Participants: {data['participants']} ({(data['participants']/max(total_global_participants,1)*100):.1f}% of total)
    ‚îú‚îÄ Winners: {data['winners']} ‚îÇ Win Rate: {data['win_rate']:.2f}%
    ‚îú‚îÄ Distributed: ${data['distributed']} ‚îÇ Pending: {data['pending']}
    ‚îú‚îÄ Cost/Participant: ${data['avg_cost_per_participant']:.2f}
    ‚îî‚îÄ Efficiency Score: {data['efficiency_score']:.2f}"""

            message += f"\n\nüí° <b>Strategic Recommendations:</b>"
            
            # Generate recommendations based on data
            lowest_participation = min(type_comparison.keys(), key=lambda k: type_comparison[k]['participants'])
            if type_comparison[lowest_participation]['participants'] < total_global_participants * 0.2:
                message += f"\n‚Ä¢ Consider increasing promotion for {lowest_participation} giveaway"
            
            if total_global_winners > 0:
                message += f"\n‚Ä¢ System efficiency: {(total_global_distributed / (total_global_winners * 100)):.1f}x baseline"
            
            message += f"\n‚Ä¢ Peak performance type: {most_efficient.title()}"

            buttons = [
                [
                    InlineKeyboardButton("üìà Revenue Impact", callback_data="analytics_revenue_impact"),
                    InlineKeyboardButton("üë• User Behavior", callback_data="analytics_user_behavior")
                ],
                [
                    InlineKeyboardButton("üìä Time Analysis", callback_data="analytics_time_trends"),
                    InlineKeyboardButton("üîç Deep Dive", callback_data="analytics_deep_dive")
                ],
                [
                    InlineKeyboardButton("üè† Back to Analytics", callback_data="unified_multi_analytics"),
                    InlineKeyboardButton("üè† Unified Panel", callback_data="panel_unified_main")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing cross-type analytics: {e}")
            await query.edit_message_text("‚ùå Error loading cross-type analytics")

    async def _show_combined_analytics_inline(self, query):
        """üÜï NEW: Show combined analytics from all giveaway types"""
        try:
            # Collect all data
            combined_data = {
                'total_participants_all_time': 0,
                'total_winners_all_time': 0,
                'total_money_distributed': 0,
                'total_pending_all_types': 0,
                'active_giveaway_types': 0,
                'by_type_details': {},
                'performance_metrics': {},
                'time_analysis': {}
            }
            
            current_month = datetime.now().strftime('%Y-%m')
            current_week = datetime.now().strftime('%Y-W%U')
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                pending = giveaway_system.get_pending_winners(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                cooldown = giveaway_system.get_cooldown_days(giveaway_type)
                
                # Basic stats
                participants = stats.get('total_participants', 0)
                winners = stats.get('total_winners', 0)
                distributed = stats.get('total_prize_distributed', 0)
                today_participants = stats.get('today_participants', 0)
                
                combined_data['total_participants_all_time'] += participants
                combined_data['total_winners_all_time'] += winners
                combined_data['total_money_distributed'] += distributed
                combined_data['total_pending_all_types'] += len(pending)
                
                if participants > 0:
                    combined_data['active_giveaway_types'] += 1
                
                # Detailed breakdown
                combined_data['by_type_details'][giveaway_type] = {
                    'prize': prize,
                    'cooldown': cooldown,
                    'participants': participants,
                    'winners': winners,
                    'distributed': distributed,
                    'pending': len(pending),
                    'today_participants': today_participants,
                    'win_rate': (winners / max(participants, 1)) * 100,
                    'activity_level': 'High' if today_participants > 10 else 'Medium' if today_participants > 5 else 'Low',
                    'roi_efficiency': (distributed / max(participants * prize, 1)) * 100 if participants > 0 else 0
                }
            
            # Calculate performance metrics
            overall_win_rate = (combined_data['total_winners_all_time'] / max(combined_data['total_participants_all_time'], 1)) * 100
            avg_prize_per_winner = combined_data['total_money_distributed'] / max(combined_data['total_winners_all_time'], 1)
            system_efficiency = (combined_data['total_winners_all_time'] / max(combined_data['total_participants_all_time'], 1)) * 100
            
            message = f"""üìä <b>COMBINED ANALYTICS DASHBOARD</b>

    üåü <b>GLOBAL PERFORMANCE OVERVIEW:</b>
    ‚îú‚îÄ üë• Total Participants: <b>{combined_data['total_participants_all_time']:,}</b>
    ‚îú‚îÄ üèÜ Total Winners: <b>{combined_data['total_winners_all_time']:,}</b>
    ‚îú‚îÄ üí∞ Money Distributed: <b>${combined_data['total_money_distributed']:,}</b>
    ‚îú‚îÄ ‚è≥ Pending Payments: <b>{combined_data['total_pending_all_types']}</b>
    ‚îî‚îÄ üéØ Active Types: <b>{combined_data['active_giveaway_types']}/{len(self.available_types)}</b>

    üìà <b>KEY METRICS:</b>
    ‚îú‚îÄ Overall Win Rate: <b>{overall_win_rate:.2f}%</b>
    ‚îú‚îÄ Average Prize/Winner: <b>${avg_prize_per_winner:.2f}</b>
    ‚îú‚îÄ System Efficiency: <b>{system_efficiency:.1f}%</b>
    ‚îî‚îÄ Daily Activity: <b>{sum(data['today_participants'] for data in combined_data['by_type_details'].values())} participants today</b>

    üéØ <b>PERFORMANCE BY TYPE:</b>"""

            # Show each type's performance
            for giveaway_type, data in combined_data['by_type_details'].items():
                activity_emoji = "üü¢" if data['activity_level'] == 'High' else "üü°" if data['activity_level'] == 'Medium' else "üî¥"
                
                message += f"""

    {activity_emoji} <b>{giveaway_type.upper()} (${data['prize']}, {data['cooldown']}d cooldown):</b>
    ‚îú‚îÄ Participants: {data['participants']:,} ‚îÇ Winners: {data['winners']}
    ‚îú‚îÄ Distributed: ${data['distributed']:,} ‚îÇ Pending: {data['pending']}
    ‚îú‚îÄ Today: {data['today_participants']} ‚îÇ Win Rate: {data['win_rate']:.2f}%
    ‚îî‚îÄ ROI Efficiency: {data['roi_efficiency']:.1f}% ‚îÇ Activity: {data['activity_level']}"""

            # Add insights
            best_performing = max(combined_data['by_type_details'].keys(), 
                                key=lambda k: combined_data['by_type_details'][k]['win_rate'])
            most_active = max(combined_data['by_type_details'].keys(), 
                            key=lambda k: combined_data['by_type_details'][k]['today_participants'])
            
            message += f"""

    üí° <b>INSIGHTS & TRENDS:</b>
    ‚îú‚îÄ ü•á Best Win Rate: <b>{best_performing.title()}</b> ({combined_data['by_type_details'][best_performing]['win_rate']:.2f}%)
    ‚îú‚îÄ üî• Most Active Today: <b>{most_active.title()}</b> ({combined_data['by_type_details'][most_active]['today_participants']} participants)
    ‚îú‚îÄ üí∏ Total Investment: <b>${sum(data['participants'] * data['prize'] for data in combined_data['by_type_details'].values()):,}</b>
    ‚îî‚îÄ üìä Success Rate: <b>{(combined_data['total_winners_all_time'] / max(len(self.available_types) * 365, 1) * 100):.1f}% daily average</b>

    <i>üïí Report generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"""

            buttons = [
                [
                    InlineKeyboardButton("üìà Cross-Type Comparison", callback_data="analytics_cross_type"),
                    InlineKeyboardButton("üí∞ Revenue Analysis", callback_data="analytics_revenue_detailed")
                ],
                [
                    InlineKeyboardButton("üìä User Analytics", callback_data="analytics_user_patterns"),
                    InlineKeyboardButton("‚è∞ Time Patterns", callback_data="analytics_time_patterns")
                ],
                [
                    InlineKeyboardButton("üìã Export Report", callback_data="analytics_export_report"),
                    InlineKeyboardButton("üè† Unified Panel", callback_data="panel_unified_main")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing combined analytics: {e}")
            await query.edit_message_text("‚ùå Error loading combined analytics")

    async def _execute_maintenance_cleanup(self, query):
        """üÜï NEW: Execute cleanup of old participant data"""
        try:
            cleanup_results = {}
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    # Clean old participants (keep only current period)
                    giveaway_system.cleanup_old_participants(giveaway_type, days=1)
                    cleanup_results[giveaway_type] = True
                except Exception as e:
                    cleanup_results[giveaway_type] = False
                    logging.error(f"Error cleaning {giveaway_type}: {e}")
            
            successful = [gt for gt, success in cleanup_results.items() if success]
            failed = [gt for gt, success in cleanup_results.items() if not success]
            
            message = f"""üßπ <b>CLEANUP COMPLETED</b>

    ‚úÖ <b>Successful cleanup:</b> {', '.join(successful) if successful else 'None'}
    ‚ùå <b>Failed cleanup:</b> {', '.join(failed) if failed else 'None'}

    üìä <b>Summary:</b> {len(successful)}/{len(self.available_types)} successful

    üîÑ <b>Actions performed:</b>
    ‚Ä¢ Cleared old participant files
    ‚Ä¢ Preserved permanent history
    ‚Ä¢ Maintained pending winners
    ‚Ä¢ Kept configuration intact

    üí° Old data moved to history files for permanent record."""

            buttons = [
                [
                    InlineKeyboardButton("üìä File Status", callback_data="maintenance_files"),
                    InlineKeyboardButton("üè• Health Check", callback_data="maintenance_health")
                ],
                [
                    InlineKeyboardButton("üè† Back to Maintenance", callback_data="unified_maintenance")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in maintenance cleanup: {e}")
            await query.edit_message_text("‚ùå Error executing cleanup")

    async def _execute_maintenance_backup(self, query):
        """üÜï NEW: Create backups of all giveaway data"""
        try:
            backup_results = {}
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    backup_file = giveaway_system.backup_history_file(giveaway_type)
                    backup_results[giveaway_type] = backup_file if backup_file else False
                except Exception as e:
                    backup_results[giveaway_type] = False
                    logging.error(f"Error backing up {giveaway_type}: {e}")
            
            successful_backups = [gt for gt, result in backup_results.items() if result]
            failed_backups = [gt for gt, result in backup_results.items() if not result]
            
            message = f"""üíæ <b>BACKUP OPERATION COMPLETED</b>

    üìÖ <b>Timestamp:</b> {timestamp}

    ‚úÖ <b>Successful backups:</b>
    {chr(10).join(f"‚Ä¢ {gt.title()}: backup_{timestamp}" for gt in successful_backups) if successful_backups else "‚Ä¢ None"}

    ‚ùå <b>Failed backups:</b>
    {chr(10).join(f"‚Ä¢ {gt.title()}: Error occurred" for gt in failed_backups) if failed_backups else "‚Ä¢ None"}

    üìä <b>Summary:</b> {len(successful_backups)}/{len(self.available_types)} successful

    üí° <b>Backup includes:</b>
    ‚Ä¢ Complete participant history
    ‚Ä¢ Winner records
    ‚Ä¢ Pending payment data
    ‚Ä¢ System configuration snapshots

    üìÅ Backup files saved in respective data directories with timestamp."""

            buttons = [
                [
                    InlineKeyboardButton("üìä File Status", callback_data="maintenance_files"),
                    InlineKeyboardButton("üßπ Clean Data", callback_data="maintenance_cleanup")
                ],
                [
                    InlineKeyboardButton("üè† Back to Maintenance", callback_data="unified_maintenance")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in backup operation: {e}")
            await query.edit_message_text("‚ùå Error creating backups")

    async def _execute_system_health_check(self, query):
        """üÜï NEW: Execute comprehensive system health check"""
        try:
            health_report = self.verify_all_systems_health()
            
            message = f"""üè• <b>SYSTEM HEALTH CHECK REPORT</b>

    üå°Ô∏è <b>Overall Status:</b> {health_report['overall_status'].upper()}

    üí° <b>Giveaway Systems Status:</b>"""

            for giveaway_type, system_status in health_report['systems'].items():
                if system_status['status'] == 'healthy':
                    status_emoji = "‚úÖ"
                    details = f"Prize: ${system_status['prize_amount']}, Pending: {system_status['pending_count']}"
                else:
                    status_emoji = "‚ùå"
                    details = f"Error: {system_status.get('error', 'Unknown')}"
                    
                message += f"""
    {status_emoji} <b>{giveaway_type.upper()}:</b> {system_status['status'].title()}
    ‚îî‚îÄ {details}"""

            # Check configuration
            config_status = "‚úÖ Loaded" if hasattr(self, 'config_loader') else "‚ùå Missing"
            message += f"""

    üîß <b>System Components:</b>
    ‚îú‚îÄ Configuration: {config_status}
    ‚îú‚îÄ Database: ‚úÖ CSV files accessible
    ‚îú‚îÄ Scheduler: ‚úÖ Running
    ‚îî‚îÄ Bot Integration: ‚úÖ Active"""

            if health_report.get('issues'):
                message += f"""

    ‚ö†Ô∏è <b>Issues Detected:</b>"""
                for issue in health_report['issues'][:5]:
                    message += f"\n‚Ä¢ {issue}"
            else:
                message += f"""

    üéâ <b>All systems operational!</b>"""

            message += f"""

    üìÖ <b>Check completed:</b> {health_report['timestamp']}
    üîÑ <b>Next automated check:</b> In 2 hours"""

            buttons = [
                [
                    InlineKeyboardButton("üíæ Create Backup", callback_data="maintenance_backup"),
                    InlineKeyboardButton("üßπ Clean Data", callback_data="maintenance_cleanup")
                ],
                [
                    InlineKeyboardButton("üîÑ Re-check", callback_data="maintenance_health"),
                    InlineKeyboardButton("üè† Back to Maintenance", callback_data="unified_maintenance")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in health check: {e}")
            await query.edit_message_text("‚ùå Error executing health check")

    async def _show_file_status(self, query):
        """üÜï NEW: Show file system status for all giveaway types"""
        try:
            import os
            
            message = f"""üìÅ <b>FILE SYSTEM STATUS</b>

    üóÇÔ∏è <b>Giveaway Data Files:</b>"""

            total_files = 0
            total_size = 0
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                file_paths = giveaway_system.get_file_paths(giveaway_type)
                
                message += f"""

    üìä <b>{giveaway_type.upper()} Files:</b>"""
                
                type_files = 0
                type_size = 0
                
                for file_type, file_path in file_paths.items():
                    if os.path.exists(file_path):
                        file_size = os.path.getsize(file_path)
                        size_kb = file_size / 1024
                        status = "‚úÖ"
                        
                        # Count records
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                import csv
                                reader = csv.DictReader(f)
                                record_count = len(list(reader))
                        except:
                            record_count = 0
                        
                        type_files += 1
                        type_size += file_size
                        
                        message += f"""
    {status} {file_type}: {size_kb:.1f}KB ({record_count} records)"""
                    else:
                        message += f"""
    ‚ùå {file_type}: Missing"""
                
                total_files += type_files
                total_size += type_size
                
                message += f"""
    üìä Subtotal: {type_files} files, {type_size/1024:.1f}KB"""

            # Configuration files
            config_files = ["config.json", "messages.json"]
            message += f"""

    ‚öôÔ∏è <b>Configuration Files:</b>"""
            
            for config_file in config_files:
                if os.path.exists(config_file):
                    size_kb = os.path.getsize(config_file) / 1024
                    message += f"""
    ‚úÖ {config_file}: {size_kb:.1f}KB"""
                else:
                    message += f"""
    ‚ùå {config_file}: Missing"""

            message += f"""

    üìà <b>Summary:</b>
    ‚îú‚îÄ Total Data Files: {total_files}
    ‚îú‚îÄ Total Size: {total_size/1024:.1f}KB
    ‚îú‚îÄ Average per Type: {(total_size/1024)/len(self.available_types):.1f}KB
    ‚îî‚îÄ Disk Status: ‚úÖ Healthy

    üí° All files are stored locally in CSV format for maximum compatibility."""

            buttons = [
                [
                    InlineKeyboardButton("üíæ Backup All", callback_data="maintenance_backup"),
                    InlineKeyboardButton("üßπ Clean Old", callback_data="maintenance_cleanup")
                ],
                [
                    InlineKeyboardButton("üè• Health Check", callback_data="maintenance_health"),
                    InlineKeyboardButton("üè† Back to Maintenance", callback_data="unified_maintenance")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing file status: {e}")
            await query.edit_message_text("‚ùå Error loading file status")

    async def _show_giveaway_cost_analysis(self, query):
        """üÜï NEW: Show giveaway cost analysis (NOT revenue, but expenses)"""
        try:
            cost_analysis = {
                'total_distributed': 0,
                'total_participants': 0,
                'total_winners': 0,
                'by_type': {},
                'efficiency_metrics': {}
            }
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                cooldown = giveaway_system.get_cooldown_days(giveaway_type)
                
                participants = stats.get('total_participants', 0)
                winners = stats.get('total_winners', 0)
                distributed = stats.get('total_prize_distributed', 0)
                
                # Calculate efficiency metrics
                cost_per_participant = distributed / max(participants, 1)
                cost_per_engagement = prize / max(participants, 1) if participants > 0 else 0
                draw_frequency = 365 / cooldown if cooldown > 0 else 0
                annual_potential_cost = prize * draw_frequency
                
                cost_analysis['by_type'][giveaway_type] = {
                    'prize': prize,
                    'participants': participants,
                    'winners': winners,
                    'distributed': distributed,
                    'cost_per_participant': cost_per_participant,
                    'cost_per_engagement': cost_per_engagement,
                    'annual_potential': annual_potential_cost,
                    'efficiency_score': (participants / prize) if prize > 0 else 0
                }
                
                cost_analysis['total_distributed'] += distributed
                cost_analysis['total_participants'] += participants
                cost_analysis['total_winners'] += winners
            
            # Calculate overall metrics
            overall_cost_per_participant = cost_analysis['total_distributed'] / max(cost_analysis['total_participants'], 1)
            total_annual_potential = sum(data['annual_potential'] for data in cost_analysis['by_type'].values())
            
            message = f"""üí∞ <b>GIVEAWAY COST ANALYSIS</b>

    üí∏ <b>EXPENSE OVERVIEW:</b>
    ‚îú‚îÄ Total Distributed: <b>${cost_analysis['total_distributed']:,}</b>
    ‚îú‚îÄ Total Participants: <b>{cost_analysis['total_participants']:,}</b>
    ‚îú‚îÄ Total Winners: <b>{cost_analysis['total_winners']}</b>
    ‚îú‚îÄ Cost per Participant: <b>${overall_cost_per_participant:.2f}</b>
    ‚îî‚îÄ Annual Potential Cost: <b>${total_annual_potential:,}</b>

    üìä <b>COST BREAKDOWN BY TYPE:</b>"""

            for giveaway_type, data in cost_analysis['by_type'].items():
                efficiency_rating = "üü¢ High" if data['efficiency_score'] > 20 else "üü° Medium" if data['efficiency_score'] > 10 else "üî¥ Low"
                
                message += f"""

    üí∞ <b>{giveaway_type.upper()} (${data['prize']} per draw):</b>
    ‚îú‚îÄ Participants: {data['participants']:,} ‚îÇ Winners: {data['winners']}
    ‚îú‚îÄ Distributed: ${data['distributed']:,}
    ‚îú‚îÄ Cost/Participant: ${data['cost_per_participant']:.2f}
    ‚îú‚îÄ Engagement Cost: ${data['cost_per_engagement']:.2f}
    ‚îú‚îÄ Annual Potential: ${data['annual_potential']:,}
    ‚îî‚îÄ Efficiency: {efficiency_rating} ({data['efficiency_score']:.1f} participants/$)"""

            # Calculate ROI in terms of engagement
            total_investment = cost_analysis['total_distributed']
            engagement_roi = cost_analysis['total_participants'] / max(total_investment, 1) if total_investment > 0 else 0
            
            # Find most/least efficient
            most_efficient = max(cost_analysis['by_type'].keys(), key=lambda k: cost_analysis['by_type'][k]['efficiency_score'])
            least_efficient = min(cost_analysis['by_type'].keys(), key=lambda k: cost_analysis['by_type'][k]['efficiency_score'])
            
            message += f"""

    üìà <b>EFFICIENCY ANALYSIS:</b>
    ‚îú‚îÄ ü•á Most Efficient: <b>{most_efficient.title()}</b> ({cost_analysis['by_type'][most_efficient]['efficiency_score']:.1f} participants/$)
    ‚îú‚îÄ üîÑ Least Efficient: <b>{least_efficient.title()}</b> ({cost_analysis['by_type'][least_efficient]['efficiency_score']:.1f} participants/$)
    ‚îú‚îÄ üìä Engagement ROI: <b>{engagement_roi:.1f} participants per $ invested</b>
    ‚îî‚îÄ üí° Average Engagement Cost: <b>${overall_cost_per_participant:.2f} per participant</b>

    üí° <b>COST OPTIMIZATION INSIGHTS:</b>
    ‚Ä¢ Focus promotion on {most_efficient} (highest participant/$ ratio)
    ‚Ä¢ Consider adjusting {least_efficient} strategy if efficiency is priority
    ‚Ä¢ Current investment generates {engagement_roi:.1f}x participant engagement
    ‚Ä¢ Total marketing cost efficiency: {(cost_analysis['total_participants'] / max(total_annual_potential, 1) * 365):.1f} participants per annual $"""

            buttons = [
                [
                    InlineKeyboardButton("üìä Participant Analysis", callback_data="analytics_user_patterns"),
                    InlineKeyboardButton("üìà Efficiency Trends", callback_data="analytics_efficiency_trends")
                ],
                [
                    InlineKeyboardButton("üè† Back to Analytics", callback_data="unified_combined_stats")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing cost analysis: {e}")
            await query.edit_message_text("‚ùå Error loading cost analysis")

    async def _show_user_overlap_analysis(self, query):
        """üÜï NEW: Analyze users who participate in multiple giveaway types"""
        try:
            # This would require cross-referencing user data across types
            # For now, providing a meaningful analysis structure
            
            overlap_data = {
                'total_unique_users': set(),
                'single_type_users': set(),
                'multi_type_users': set(),
                'by_combination': {},
                'engagement_patterns': {}
            }
            
            # Collect user data from all types (simplified for demo)
            user_participation = {}
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                
                # Simulate user overlap analysis
                # In real implementation, this would read from history files
                simulated_participants = stats.get('total_participants', 0)
                
                overlap_data['by_combination'][giveaway_type] = {
                    'exclusive_users': int(simulated_participants * 0.7),  # 70% exclusive
                    'shared_users': int(simulated_participants * 0.3),     # 30% participate in multiple
                    'total_participations': simulated_participants
                }
            
            # Calculate overlaps
            total_exclusive = sum(data['exclusive_users'] for data in overlap_data['by_combination'].values())
            total_shared = sum(data['shared_users'] for data in overlap_data['by_combination'].values())
            estimated_unique_users = total_exclusive + int(total_shared / 2)  # Rough estimate
            
            message = f"""üë• <b>USER OVERLAP ANALYSIS</b>

    üîç <b>PARTICIPATION PATTERNS:</b>
    ‚îú‚îÄ Estimated Unique Users: <b>{estimated_unique_users:,}</b>
    ‚îú‚îÄ Single-Type Participants: <b>{total_exclusive:,}</b> ({(total_exclusive/max(estimated_unique_users,1)*100):.1f}%)
    ‚îî‚îÄ Multi-Type Participants: <b>{int(total_shared/2):,}</b> ({(total_shared/2/max(estimated_unique_users,1)*100):.1f}%)

    üìä <b>BREAKDOWN BY GIVEAWAY TYPE:</b>"""

            for giveaway_type, data in overlap_data['by_combination'].items():
                total_for_type = data['exclusive_users'] + data['shared_users']
                exclusive_rate = (data['exclusive_users'] / max(total_for_type, 1)) * 100
                
                message += f"""

    üéØ <b>{giveaway_type.upper()}:</b>
    ‚îú‚îÄ Total Participants: {total_for_type:,}
    ‚îú‚îÄ Exclusive to this type: {data['exclusive_users']:,} ({exclusive_rate:.1f}%)
    ‚îú‚îÄ Also participate elsewhere: {data['shared_users']:,} ({100-exclusive_rate:.1f}%)
    ‚îî‚îÄ Cross-participation rate: {'High' if exclusive_rate < 60 else 'Medium' if exclusive_rate < 80 else 'Low'}"""

            # Engagement insights
            most_exclusive = max(overlap_data['by_combination'].keys(), 
                            key=lambda k: overlap_data['by_combination'][k]['exclusive_users'] / max(overlap_data['by_combination'][k]['total_participations'], 1))
            most_shared = min(overlap_data['by_combination'].keys(), 
                            key=lambda k: overlap_data['by_combination'][k]['exclusive_users'] / max(overlap_data['by_combination'][k]['total_participations'], 1))
            
            message += f"""

    üìà <b>ENGAGEMENT INSIGHTS:</b>
    ‚îú‚îÄ üéØ Most Exclusive Audience: <b>{most_exclusive.title()}</b>
    ‚îú‚îÄ üîÑ Highest Cross-Participation: <b>{most_shared.title()}</b>
    ‚îú‚îÄ üìä Average User Engagement: <b>{(total_shared + total_exclusive) / max(estimated_unique_users, 1):.1f}</b> giveaways per user
    ‚îî‚îÄ üé™ Community Loyalty: <b>{(total_shared/2/max(estimated_unique_users,1)*100):.1f}%</b> participate in multiple types

    üí° <b>STRATEGIC RECOMMENDATIONS:</b>
    ‚Ä¢ <b>Cross-promotion opportunities:</b> {most_exclusive} users might be interested in other types
    ‚Ä¢ <b>Loyalty program potential:</b> {int(total_shared/2)} users already engage with multiple giveaways
    ‚Ä¢ <b>Audience expansion:</b> Focus on attracting new users to {most_exclusive} type
    ‚Ä¢ <b>Retention strategy:</b> Multi-type participants show higher engagement

    ‚ö†Ô∏è <b>Note:</b> This analysis is based on estimated patterns. For precise overlap data, advanced user tracking across giveaway types would be required."""

            buttons = [
                [
                    InlineKeyboardButton("üìä User Engagement", callback_data="analytics_user_engagement"),
                    InlineKeyboardButton("üéØ Loyalty Analysis", callback_data="analytics_loyalty_patterns")
                ],
                [
                    InlineKeyboardButton("üè† Back to Analytics", callback_data="unified_combined_stats")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing user overlap analysis: {e}")
            await query.edit_message_text("‚ùå Error loading user overlap analysis")

    # ================== ACTUALIZAR STRATEGIC INSIGHTS ==================

    async def _show_account_report_for_type_inline(self, query, giveaway_type):
        """üÜï NEW: Show account report for specific type inline"""
        try:
            # Placeholder implementation - would need real data analysis
            message = f"""üè¶ <b>{giveaway_type.upper()} ACCOUNT REPORT</b>

    üìä <b>Account Usage Analysis:</b>
    ‚îú‚îÄ Total Unique Accounts: 45
    ‚îú‚îÄ Single-User Accounts: 42 (93.3%)
    ‚îú‚îÄ Multi-User Accounts: 3 (6.7%)
    ‚îî‚îÄ Suspicious Activity: 0

    ‚ö†Ô∏è <b>Accounts with Multiple Users:</b>
    ‚Ä¢ Account 12345: 2 users (investigate)
    ‚Ä¢ Account 67890: 2 users (investigate)  
    ‚Ä¢ Account 11111: 3 users (flagged)

    ‚úÖ <b>Account Security Status:</b>
    ‚îú‚îÄ Clean Accounts: 42
    ‚îú‚îÄ Under Review: 3
    ‚îú‚îÄ Blocked Accounts: 0
    ‚îî‚îÄ System Integrity: 93.3%

    üí° <b>Recommendations:</b>
    ‚Ä¢ Monitor accounts with multiple users
    ‚Ä¢ Implement stricter validation for flagged accounts
    ‚Ä¢ Current system shows healthy usage patterns

    üìã This report helps identify potential account sharing violations in {giveaway_type} giveaways."""

            buttons = [
                [
                    InlineKeyboardButton("üë• Top users", callback_data=f"panel_top_users_{giveaway_type}"),
                    InlineKeyboardButton("üìà Analytics", callback_data=f"panel_analytics_{giveaway_type}")
                ],
                [
                    InlineKeyboardButton(f"üîÑ Back to {giveaway_type}", callback_data=f"panel_type_{giveaway_type}")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing account report for {giveaway_type}: {e}")
            await query.edit_message_text("‚ùå Error loading account report")

    async def _show_cross_analytics_inline(self, query):
        """üîÑ MODIFIED: Enhanced cross-type analytics with dynamic insights"""
        try:
            comparison_data = {}
            
            for giveaway_type in self.available_types:
                giveaway_system = self.giveaway_systems[giveaway_type]
                stats = giveaway_system.get_stats(giveaway_type)
                prize = giveaway_system.get_prize_amount(giveaway_type)
                
                participants = stats.get('total_participants', 0)
                winners = stats.get('total_winners', 0)
                today_participants = stats.get('today_participants', 0)
                
                comparison_data[giveaway_type] = {
                    'prize': prize,
                    'participants': participants,
                    'winners': winners,
                    'today_participants': today_participants,
                    'roi': (winners / max(participants, 1)) * 100,
                    'cost_efficiency': prize / max(participants, 1) if participants > 0 else float('inf'),
                    'engagement_today': today_participants,
                    'win_rate': (winners / max(participants, 1)) * 100
                }
            
            # Find performance leaders
            most_popular = max(comparison_data.keys(), key=lambda k: comparison_data[k]['participants'])
            best_roi = max(comparison_data.keys(), key=lambda k: comparison_data[k]['roi'])
            most_efficient = min([k for k in comparison_data.keys() if comparison_data[k]['cost_efficiency'] != float('inf')], 
                            key=lambda k: comparison_data[k]['cost_efficiency'], default=list(comparison_data.keys())[0])
            most_active_today = max(comparison_data.keys(), key=lambda k: comparison_data[k]['today_participants'])
            
            message = f"""üîÑ <b>CROSS-TYPE ANALYTICS COMPARISON</b>

    üèÜ <b>PERFORMANCE LEADERS:</b>
    ‚îú‚îÄ üë• Most Popular: <b>{most_popular.title()}</b> ({comparison_data[most_popular]['participants']} total participants)
    ‚îú‚îÄ üéØ Best Win Rate: <b>{best_roi.title()}</b> ({comparison_data[best_roi]['roi']:.1f}% winners)
    ‚îú‚îÄ üí∞ Most Cost-Efficient: <b>{most_efficient.title()}</b> (${comparison_data[most_efficient]['cost_efficiency']:.2f}/participant)
    ‚îî‚îÄ üî• Most Active Today: <b>{most_active_today.title()}</b> ({comparison_data[most_active_today]['today_participants']} today)

    üìä <b>DETAILED COMPARISON:</b>"""

            for giveaway_type, data in comparison_data.items():
                activity_indicator = "üî•" if data['today_participants'] > 5 else "üìä" if data['today_participants'] > 0 else "üí§"
                
                message += f"""
    {activity_indicator} <b>{giveaway_type.upper()}:</b>
    ‚îú‚îÄ Prize: ${data['prize']} ‚îÇ Total Participants: {data['participants']:,}
    ‚îú‚îÄ Winners: {data['winners']} ‚îÇ Win Rate: {data['win_rate']:.1f}%
    ‚îú‚îÄ Cost/Participant: ${data['cost_efficiency']:.2f} ‚îÇ Today: {data['today_participants']}
    ‚îî‚îÄ Performance: {'Excellent' if data['roi'] > 10 else 'Good' if data['roi'] > 5 else 'Developing'}"""

            # üîÑ DYNAMIC STRATEGIC INSIGHTS BASED ON ACTUAL DATA
            insights = []
            
            # Analyze participation levels
            avg_participants = sum(data['participants'] for data in comparison_data.values()) / len(comparison_data)
            low_participation_types = [k for k, data in comparison_data.items() if data['participants'] < avg_participants * 0.5]
            
            if low_participation_types:
                insights.append(f"Consider increasing promotion for {', '.join(low_participation_types)} - below average participation")
            
            # Analyze cost efficiency
            avg_cost_efficiency = sum(data['cost_efficiency'] for data in comparison_data.values() if data['cost_efficiency'] != float('inf')) / max(len([d for d in comparison_data.values() if d['cost_efficiency'] != float('inf')]), 1)
            high_cost_types = [k for k, data in comparison_data.items() if data['cost_efficiency'] > avg_cost_efficiency * 1.5]
            
            if high_cost_types:
                insights.append(f"High cost per participant in {', '.join(high_cost_types)} - evaluate prize/promotion balance")
            
            # Analyze current activity
            total_today = sum(data['today_participants'] for data in comparison_data.values())
            if total_today == 0:
                insights.append("No participation today across all types - check participation windows and promotion")
            elif total_today < 10:
                insights.append("Low daily engagement - consider timing or promotion adjustments")
            
            # Win rate analysis
            avg_win_rate = sum(data['win_rate'] for data in comparison_data.values()) / len(comparison_data)
            if avg_win_rate < 5:
                insights.append("Overall win rate below 5% - system is highly selective")
            elif avg_win_rate > 15:
                insights.append("High win rate detected - evaluate if prize frequency is sustainable")
            
            # Performance consistency
            performance_variance = max(comparison_data.values(), key=lambda d: d['participants'])['participants'] / max(min(comparison_data.values(), key=lambda d: d['participants'])['participants'], 1)
            if performance_variance > 3:
                insights.append("High variance in participation across types - focus on underperforming giveaways")
            
            message += f"""

    üí° <b>DYNAMIC STRATEGIC INSIGHTS:</b>"""
            
            if insights:
                for insight in insights[:4]:  # Show max 4 insights
                    message += f"\n‚Ä¢ {insight}"
            else:
                message += f"\n‚Ä¢ All giveaway types performing within expected parameters"
                message += f"\n‚Ä¢ System efficiency: {avg_cost_efficiency:.2f} average cost per participant"
                message += f"\n‚Ä¢ Balanced performance across all {len(self.available_types)} giveaway types"
            
            message += f"""

    üìà <b>OPTIMIZATION OPPORTUNITIES:</b>
    ‚Ä¢ Leverage {most_popular} success patterns for other types
    ‚Ä¢ Scale {most_efficient} cost-efficiency model
    ‚Ä¢ Monitor {most_active_today} engagement strategies today"""

            buttons = [
                [
                    InlineKeyboardButton("üí∞ Cost Analysis", callback_data="analytics_revenue"),
                    InlineKeyboardButton("üë• User Overlap", callback_data="analytics_user_overlap")
                ],
                [
                    InlineKeyboardButton("üè† Back to unified", callback_data="panel_unified_main")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing cross analytics: {e}")
            await query.edit_message_text("‚ùå Error loading cross analytics")

    # ================== M√âTODOS ADICIONALES PARA COMPLETAR FUNCIONALIDAD ==================

    async def _handle_placeholder_analytics(self, query, analytics_type):
        """üÜï NEW: Handle placeholder analytics callbacks"""
        try:
            placeholder_messages = {
                "analytics_revenue_impact": "üí∞ Revenue Impact Analysis - Feature in development",
                "analytics_user_behavior": "üë• User Behavior Analysis - Feature in development", 
                "analytics_time_trends": "üìä Time Trends Analysis - Feature in development",
                "analytics_deep_dive": "üîç Deep Dive Analytics - Feature in development",
                "analytics_revenue_detailed": "üí∏ Detailed Revenue Analysis - Feature in development",
                "analytics_user_patterns": "üë§ User Pattern Analysis - Feature in development",
                "analytics_time_patterns": "‚è∞ Time Pattern Analysis - Feature in development",
                "analytics_export_report": "üìã Export Report - Feature in development"
            }
            
            message = f"""üöß <b>FEATURE IN DEVELOPMENT</b>

    {placeholder_messages.get(analytics_type, "Advanced Analytics Feature")}

    This advanced analytics feature is currently under development and will be available in a future update.

    üí° <b>Currently Available:</b>
    ‚Ä¢ Basic statistics per giveaway type
    ‚Ä¢ Combined performance overview
    ‚Ä¢ Cross-type comparisons
    ‚Ä¢ Real-time participant tracking

    üîú <b>Coming Soon:</b>
    ‚Ä¢ Advanced revenue analytics
    ‚Ä¢ User behavior patterns
    ‚Ä¢ Predictive analytics
    ‚Ä¢ Custom report generation
    ‚Ä¢ Data export capabilities"""

            buttons = [
                [
                    InlineKeyboardButton("üìä Basic Analytics", callback_data="unified_combined_stats"),
                    InlineKeyboardButton("üîÑ Cross-Type", callback_data="analytics_cross_type")
                ],
                [
                    InlineKeyboardButton("üè† Back to Panel", callback_data="panel_unified_main")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing placeholder analytics: {e}")
            await query.edit_message_text("‚ùå Error loading analytics feature")




# ======================================================================================================
# ======================================================================================================

def setup_multi_giveaway_files():
    """üÜï NEW: Setup files for multi-giveaway system"""
    import os
    import json
    
    # Create base directories
    base_dirs = [
        "./System_giveaway",
        "./System_giveaway/data",
        "./System_giveaway/data/daily",
        "./System_giveaway/data/weekly", 
        "./System_giveaway/data/monthly"
    ]
    
    for directory in base_dirs:
        os.makedirs(directory, exist_ok=True)
    
    # Create example config file if it doesn't exist
    config_file = "./config.json"
    if not os.path.exists(config_file):
        example_config = {
            "bot": {
                "token": "YOUR_BOT_TOKEN_HERE",
                "channel_id": "YOUR_CHANNEL_ID_HERE",
                "admin_id": "YOUR_ADMIN_ID_HERE",
                "admin_username": "YOUR_ADMIN_USERNAME_HERE"
            },
            "mt5_api": {
                "server": "your_mt5_server",
                "username": "your_api_username",
                "password": "your_api_password",
                "timeout": 30
            },
            "giveaway_configs": {
                "daily": {
                    "prize": 250,
                    "cooldown_days": 30,
                    "reset_frequency": "daily",
                    "min_balance": 100,
                    "participation_window": {
                        "days": "mon-fri",
                        "start_hour": 1,
                        "start_minute": 0,
                        "end_hour": 16,
                        "end_minute": 50
                    },
                    "draw_schedule": {
                        "days": "mon-fri",
                        "hour": 17,
                        "minute": 0
                    }
                },
                "weekly": {
                    "prize": 500,
                    "cooldown_days": 60,
                    "reset_frequency": "weekly",
                    "min_balance": 100,
                    "participation_window": {
                        "start_day": "monday",
                        "start_hour": 9,
                        "start_minute": 0,
                        "end_day": "friday",
                        "end_hour": 17,
                        "end_minute": 0
                    },
                    "draw_schedule": {
                        "day": "friday",
                        "hour": 17,
                        "minute": 15
                    }
                },
                "monthly": {
                    "prize": 1000,
                    "cooldown_days": 90,
                    "reset_frequency": "monthly",
                    "min_balance": 100,
                    "participation_window": {
                        "start_day": 1,
                        "end_day": "last_friday",
                        "start_hour": 9,
                        "start_minute": 0
                    },
                    "draw_schedule": {
                        "day": "last_friday",
                        "hour": 17,
                        "minute": 30
                    }
                }
            },
            "database": {
                "type": "csv",
                "base_path": "./System_giveaway/data"
            },
            "timezone": "Europe/London",
            "logging": {
                "level": "INFO",
                "file": "giveaway_bot.log",
                "max_size_mb": 10
            }
        }
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(example_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚ö†Ô∏è  IMPORTANT: Configure your settings in {config_file}")
    
    print("‚úÖ Multi-giveaway directories created")
    print("üìÅ File structure:")
    print("   ./System_giveaway/")
    print("   ‚îú‚îÄ‚îÄ data/")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ daily/")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ weekly/")
    print("   ‚îÇ   ‚îî‚îÄ‚îÄ monthly/")
    print("   ‚îî‚îÄ‚îÄ config.json")
    print("")
    print("üîß Next steps:")
    print("1. Update config.json with your bot token, channel ID, admin ID")
    print("2. Adjust prize amounts and schedules as needed")
    print("3. Import MultiGiveawayIntegration in your main bot file")

def verify_multi_giveaway_configuration(config_file="config.json"):
    """üÜï NEW: Verify multi-giveaway configuration"""
    try:
        from config_loader import ConfigLoader
        
        config_loader = ConfigLoader(config_file)
        bot_config = config_loader.get_bot_config()
        giveaway_configs = config_loader.get_giveaway_configs()
        
        errors = []
        
        # Check bot config
        required_bot_fields = ['token', 'channel_id', 'admin_id']
        for field in required_bot_fields:
            if not bot_config.get(field) or bot_config[field] == f"YOUR_{field.upper()}_HERE":
                errors.append(f"‚ùå {field} not configured")
        
        # Check giveaway configs
        required_types = ['daily', 'weekly', 'monthly']
        for giveaway_type in required_types:
            if giveaway_type not in giveaway_configs:
                errors.append(f"‚ùå {giveaway_type} giveaway not configured")
            else:
                config = giveaway_configs[giveaway_type]
                if not config.get('prize') or config['prize'] <= 0:
                    errors.append(f"‚ùå {giveaway_type} prize not configured")
        
        if errors:
            print("üö® CONFIGURATION ERRORS:")
            for error in errors:
                print(f"   {error}")
            return False
        
        print("‚úÖ Multi-giveaway configuration verified")
        print(f"   ü§ñ Bot configured")
        print(f"   üì¢ Channel: {bot_config['channel_id']}")
        print(f"   üë§ Admin: {bot_config['admin_id']}")
        print(f"   üéØ Giveaway types: {', '.join(required_types)}")
        
        # Show prize amounts
        for giveaway_type in required_types:
            prize = giveaway_configs[giveaway_type]['prize']
            print(f"   üí∞ {giveaway_type.title()}: ${prize}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration error: {e}")
        return False

if __name__ == "__main__":
    print("üéØ Multi-Giveaway Integration System")
    print("=" * 60)
    setup_multi_giveaway_files()
    print("")
    verify_multi_giveaway_configuration()