"""
Multi-type giveaway integration system supporting daily, weekly, and monthly giveaways
Complete version with all buttons and panels working correctly for multiple types
"""


from telegram.ext import CallbackQueryHandler, MessageHandler, CommandHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import os
import csv
import asyncio
from datetime import datetime, timedelta

from core.ga_manager import GiveawaySystem
from utils.config_loader import ConfigLoader
from utils.automation_manager import AutomationManager
import handlers.admin_commands as admin_commands
import handlers.callback_handlers as callback_handlers
import handlers.participation_flow as participation_flow
import handlers.payment_handler as payment_handler
import handlers.user_commands as user_commands
from utils.admin_permission import get_permission_manager
from utils.admin_permission import SystemAction



class MultiGiveawayIntegration:
    """üÜï NEW: Multi-type giveaway integration system"""
    
    def __init__(self, application, config_file="config.json"):
        """
        SIMPLIFIED: Solo inicializar lo esencial y delegar
        """
        # ===== CORE CONFIGURATION =====
        self.app = application
        
        self.config_loader = ConfigLoader(config_file)
        bot_config = self.config_loader.get_bot_config()
        
        self.channel_id = bot_config['channel_id']
        self.admin_id = bot_config['admin_id']
        self.admin_username = bot_config.get('admin_username', 'admin')
        self.available_types = ['daily', 'weekly', 'monthly']
        
        # ===== GIVEAWAY SYSTEMS (CORE) =====
        self.giveaway_systems = {}
        for giveaway_type in self.available_types:
            self.giveaway_systems[giveaway_type] = GiveawaySystem(
                bot=application.bot,
                giveaway_type=giveaway_type,
                config_file=config_file
            )
        
        # ===== AUTOMATION MANAGER (YA EXISTE) =====
        self.automation_manager = AutomationManager(
            app=self.app,                           # ‚Üê Primer par√°metro: app
            multi_giveaway_integration=self,        # ‚Üê Segundo par√°metro: la instancia actual
            config_file=config_file        
                )
        
        # ===== SETUP TELEGRAM HANDLERS =====
        self._setup_handlers()
        
        logging.info("‚úÖ Multi-type giveaway system initialized successfully")
        
        logging.info("Multi-type giveaway system integrated successfully")
        logging.info(f"Channel configured: {self.channel_id}")
        logging.info(f"Admin configured: {self.admin_id}")
        logging.info(f"Available types: {', '.join(self.available_types)}")


    @property
    def auto_mode_enabled(self):
        """Acceso a automation status via AutomationManager"""
        return self.automation_manager.auto_mode_enabled

    @property  
    def recurring_invitations_enabled(self):
        """Acceso a recurring invitations status via AutomationManager"""
        return self.automation_manager.recurring_invitations_enabled

    @property
    def invitation_frequencies(self):
        """Acceso a invitation frequencies via AutomationManager"""
        return self.automation_manager.invitation_frequencies
    # CORE INTEGRATION
    def _setup_handlers(self):
        """üîÑ MODIFIED: Setup handlers for multiple giveaway types"""
        
        # ===== CRITICAL ORDER: FROM MOST SPECIFIC TO MOST GENERAL =====
        
        # 1Ô∏è‚É£ TYPE-SPECIFIC ADMIN COMMANDS (MOST SPECIFIC)
        for giveaway_type in self.available_types:
            # Type-specific manual giveaway commands
            self.app.add_handler(CommandHandler(f"admin_giveaway_{giveaway_type}",
                                                lambda u, c, gt=giveaway_type: admin_commands._handle_manual_giveaway(self, u, c, gt)))
            
            # Type-specific manual draw commands
            self.app.add_handler(CommandHandler(f"admin_sorteo_{giveaway_type}", 
                                            lambda u, c, gt=giveaway_type: admin_commands._handle_manual_sorteo(self,u, c, gt)))
            
            # Type-specific stats commands
            self.app.add_handler(CommandHandler(f"admin_stats_{giveaway_type}", 
                                            lambda u, c, gt=giveaway_type: admin_commands._handle_stats_command(self,u, c, gt)))
            
            # Type-specific pending winners
            self.app.add_handler(CommandHandler(f"admin_pending_{giveaway_type}", 
                                            lambda u, c, gt=giveaway_type: admin_commands._handle_pending_winners(self,u, c,  gt)))
            
            
        # üÜï NEW: TYPE-SPECIFIC INVITATION COMMANDS
        self.app.add_handler(CommandHandler("admin_send_daily_invitation", lambda u,c: admin_commands.admin_send_daily_invitation(u, c, self )))
        self.app.add_handler(CommandHandler("admin_send_weekly_invitation", lambda u,c:admin_commands.admin_send_weekly_invitation(u, c, self )))
        self.app.add_handler(CommandHandler("admin_send_monthly_invitation", lambda u,c: admin_commands.admin_send_monthly_invitation(u, c, self )))
        
        # üÜï NEW: TYPE-SPECIFIC DRAW COMMANDS
        self.app.add_handler(CommandHandler("admin_run_daily_draw", lambda u,c: admin_commands.admin_run_daily_draw(u, c, self )))
        self.app.add_handler(CommandHandler("admin_run_weekly_draw", lambda u,c: admin_commands.admin_run_weekly_draw(u, c, self )))
        self.app.add_handler(CommandHandler("admin_run_monthly_draw", lambda u,c: admin_commands.admin_run_monthly_draw(u, c, self )))
        # 2Ô∏è‚É£ GENERAL ADMIN COMMANDS (BACKWARD COMPATIBILITY)
        # ===== COMANDOS ADMIN GENERALES =====
        self.app.add_handler(CommandHandler("admin_giveaway", 
            lambda u, c: admin_commands._handle_manual_giveaway_general(self, u, c)))
        self.app.add_handler(CommandHandler("admin_sorteo", 
            lambda u, c: admin_commands._handle_manual_sorteo_general(self, u, c)))
        self.app.add_handler(CommandHandler("admin_stats", 
            lambda u, c: admin_commands._handle_stats_command_general(self, u, c)))
        self.app.add_handler(CommandHandler("admin_pending_winners", 
            lambda u, c: admin_commands.admin_pending_winners(self, u, c)))
        
        self.app.add_handler(CommandHandler("admin_panel", self.admin_panel))

        self.app.add_handler(CommandHandler("admin_confirm_payment", 
            lambda u, c: admin_commands.admin_confirm_payment(u, c, self)))

        # Confirmation commands (movidos desde test_botTTT.py)
        # ===== COMANDOS DE CONFIRMACI√ìN DE PAGO =====
        self.app.add_handler(CommandHandler("admin_confirm_daily", 
            lambda u, c: admin_commands.admin_confirm_daily_payment(self, u, c)))
        self.app.add_handler(CommandHandler("admin_confirm_weekly", 
            lambda u, c: admin_commands.admin_confirm_weekly_payment(self, u, c)))
        self.app.add_handler(CommandHandler("admin_confirm_monthly", 
            lambda u, c: admin_commands.admin_confirm_monthly_payment(self, u, c)))

        # ===== COMANDOS DE PENDING POR TIPO =====
        self.app.add_handler(CommandHandler("admin_pending_daily", 
            lambda u, c: admin_commands.admin_pending_daily(self, u, c)))
        self.app.add_handler(CommandHandler("admin_pending_weekly", 
            lambda u, c: admin_commands.admin_pending_weekly(self, u, c)))
        self.app.add_handler(CommandHandler("admin_pending_monthly", 
            lambda u, c: admin_commands.admin_pending_monthly(self, u, c)))
        
        
        
        # 4Ô∏è‚É£ ANALYTICS COMMANDS (ENHANCED FOR MULTI-TYPE)
        # ===== COMANDOS DE ANALYTICS =====
        self.app.add_handler(CommandHandler("admin_analytics", 
            lambda u, c: admin_commands._handle_admin_analytics_command(self, u, c)))
        self.app.add_handler(CommandHandler("admin_analytics_all", 
            lambda u, c: admin_commands._handle_admin_analytics_all_command(self, u, c)))
        self.app.add_handler(CommandHandler("admin_user_stats", 
            lambda u, c: admin_commands._handle_admin_user_stats_command(self, u, c)))
        self.app.add_handler(CommandHandler("admin_top_users", 
            lambda u, c: admin_commands._handle_admin_top_users_command(self, u, c)))
        self.app.add_handler(CommandHandler("admin_account_report", 
            lambda u, c: admin_commands._handle_admin_account_report_command(self, u, c)))
        self.app.add_handler(CommandHandler("admin_revenue", 
            lambda u, c: admin_commands._handle_admin_revenue_analysis_command(self, u, c)))
        self.app.add_handler(CommandHandler("admin_backup", 
            lambda u, c: admin_commands._handle_admin_backup_command(self, u, c)))
        
        # 5Ô∏è‚É£ DEBUG COMMANDS
        # ===== COMANDOS DE DEBUG =====
        self.app.add_handler(CommandHandler("debug_pending", 
            lambda u, c: admin_commands._handle_debug_pending_system(self, u, c)))
        self.app.add_handler(CommandHandler("debug_all_systems", 
            lambda u, c: admin_commands._handle_debug_all_systems(self, u, c)))
        

        # ===== COMANDOS DE USUARIO =====
        self.app.add_handler(CommandHandler("start", 
            lambda u, c: user_commands.start_command(self, self.config_loader, u, c)))
        self.app.add_handler(CommandHandler("help", 
            lambda u, c: user_commands.help_command(self.config_loader, u, c)))
        
        # 6Ô∏è‚É£ GENERAL COMMANDS
        self.app.add_handler(CommandHandler("stats", 
            lambda u, c: user_commands._handle_stats_command_public(self,u, c)))
        
        print("üîß Registering callback handlers in priority order...")
        
        # üÜï HANDLER ESPEC√çFICO PARA AUTOMATION (m√°s espec√≠fico)
        # Automation callbacks (prioridad alta)
        self.app.add_handler(CallbackQueryHandler(
            lambda u, c: callback_handlers._handle_automation_callbacks(self, self.automation_manager, u, c),
            pattern="^automation_"
        ))
        print("‚úÖ Automation handler registered (Priority 1)")

        # ‚úÖ PARTICIPATION (TYPE-SPECIFIC)
        # for giveaway_type in self.available_types:
        #     participate_handler = CallbackQueryHandler(
        #         lambda u, c, gt=giveaway_type: self.giveaway_systems[gt].handle_participate_button(u, c, gt),
        #         pattern=f"^giveaway_participate_{giveaway_type}$"
        #     )
        #     self.app.add_handler(participate_handler)
        # print("‚úÖ Participation handlers registered (Priority 2)")

        # Participation buttons (type-specific)
        for giveaway_type in self.available_types:
            self.app.add_handler(CallbackQueryHandler(
                lambda u, c, gt=giveaway_type: participation_flow.handle_participate_button(u, c, gt),
                pattern=f"^giveaway_participate_{giveaway_type}$"
            ))
        
        # ===== PRIORITY 5: PANEL CALLBACKS (INCLUYE PENDING) =====
        # panel_callbacks_handler = CallbackQueryHandler(
        #     self._handle_admin_panel_callbacks,
        #     # üîÑ FIXED: Restaurar patr√≥n original SIN exclusiones
        #     pattern="^(panel_|analytics_|maintenance_|user_details_|user_full_analysis_|investigate_account_|no_action|type_selector_|unified_|view_only_|confirm_payment_)"
        # )
        # self.app.add_handler(panel_callbacks_handler)
        
        # Panel callbacks (general)
        # self.app.add_handler(CallbackQueryHandler(
        #     lambda u, c: callback_handlers._handle_admin_panel_callbacks(u, c, self),
        #     # pattern="^(panel_|analytics_|maintenance_|user_details_|type_selector_|unified_|view_only_|confirm_payment_)"
        #     pattern="^(panel_|analytics_|maintenance_|user_details_|user_full_analysis_|investigate_account_|no_action|type_selector_|unified_|view_only_|confirm_payment_)"
        # ))
        panel_callbacks_handler = CallbackQueryHandler(
            lambda u, c: callback_handlers._handle_admin_panel_callbacks(self,self.automation_manager, c,u),
            # pattern="^(panel_|analytics_|maintenance_|user_details_|type_selector_|unified_|view_only_|confirm_payment_)"
            pattern="^(panel_|analytics_|maintenance_|user_details_|user_full_analysis_|investigate_account_|no_action|type_selector_|unified_|view_only_|confirm_payment_)"
        )
        self.app.add_handler(panel_callbacks_handler)
        # mt5_handler = MessageHandler(
        #         filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND & filters.Regex(r'^\d+$'),
        #         self._handle_mt5_input_universal
        #     )
        # self.app.add_handler(mt5_handler)
        # print("‚úÖ MT5 input handler registered (Priority 4)")

        # MT5 input (numeric)
        self.app.add_handler(MessageHandler(
            filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND & filters.Regex(r'^\d+$'),
            lambda u, c: participation_flow.handle_mt5_input(u, c, self.giveaway_systems)
        ))
        
        

        # invalid_input_handler = MessageHandler(
        #     filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND & ~filters.Regex(r'^\d+$'),
        #     self._handle_invalid_input
        # )
        # self.app.add_handler(invalid_input_handler)

        # ===== MESSAGE HANDLERS =====
        
        
        # Invalid input (non-numeric)
        self.app.add_handler(MessageHandler(
            filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND & ~filters.Regex(r'^\d+$'),
            self._handle_invalid_input
        ))
        
        logging.info("Multi-type handlers configured in correct order")


    # ===== CORE BUSINESS METHODS =====
    def get_giveaway_system(self, giveaway_type):
        """üÜï NEW: Get specific giveaway system"""
        return self.giveaway_systems.get(giveaway_type)

    def get_all_giveaway_systems(self):
        """üÜï NEW: Get all giveaway systems"""
        return self.giveaway_systems
    


    # DELEGATION METHODS (SIMPLE) (Bridge Telegram ‚Üî GiveawaySystem)

    async def send_daily_invitation(self):
        """üÜï NEW: Send daily invitation (for scheduler)"""
        try:
            return await self.giveaway_systems['daily'].send_invitation('daily')
        except Exception as e:
            logging.error(f"Error sending daily invitation: {e}")
            return False

    async def send_weekly_invitation(self):
        """üÜï NEW: Send weekly invitation (for scheduler)"""
        try:
            return await self.giveaway_systems['weekly'].send_invitation('weekly')
        except Exception as e:
            logging.error(f"Error sending weekly invitation: {e}")
            return False

    async def send_monthly_invitation(self):
        """üÜï NEW: Send monthly invitation (for scheduler)"""
        try:
            return await self.giveaway_systems['monthly'].send_invitation('monthly')
        except Exception as e:
            logging.error(f"Error sending monthly invitation: {e}")
            return False  # ‚Üí delegation


    async def run_daily_draw(self):
        """üÜï NEW: Execute daily draw (for scheduler)"""
        try:
            await self.giveaway_systems['daily'].run_giveaway('daily')
            logging.info("Daily draw executed successfully")
        except Exception as e:
            logging.error(f"Error in daily draw: {e}")

    async def run_weekly_draw(self):
        """üÜï NEW: Execute weekly draw (for scheduler)"""
        try:
            await self.giveaway_systems['weekly'].run_giveaway('weekly')
            logging.info("Weekly draw executed successfully")
        except Exception as e:
            logging.error(f"Error in weekly draw: {e}")

    async def run_monthly_draw(self):
        """üÜï NEW: Execute monthly draw (for scheduler)"""
        try:
            await self.giveaway_systems['monthly'].run_giveaway('monthly')
            logging.info("Monthly draw executed successfully")
        except Exception as e:
            logging.error(f"Error in monthly draw: {e}")      # ‚Üí delegation


    async def run_giveaway(self, giveaway_type):
        """üÜï NEW: Execute specific draw (for scheduler)"""
        try:
            await self.giveaway_systems[giveaway_type].run_giveaway(giveaway_type)
            logging.info(f"Draw executed successfully for {giveaway_type}")
        except Exception as e:
            logging.error(f"Error in {giveaway_type} draw: {e}")
    
    
    # ===== AUTOMATION DELEGATION =====
    
    def setup_automatic_draws(self):
        """Delegate to AutomationManager"""
        return self.automation_manager.setup_automatic_draws()
    
    def toggle_automatic_mode(self, giveaway_type: str, enabled: bool) -> bool:
        """Delegate to AutomationManager"""
        return self.automation_manager.toggle_automatic_mode(giveaway_type, enabled)
    
    def get_automation_status(self) -> dict:
        """Delegate to AutomationManager"""
        return self.automation_manager.get_automation_status()



    # ROUTING TELEGRAM INPUT

    async def _route_mt5_input(self, update, context, giveaway_type):
        """üîÑ ENHANCED: Route MT5 input to correct giveaway system"""
        try:
            print(f"üîç DEBUG: _route_mt5_input called for {giveaway_type}")
            print(f"üîç DEBUG: awaiting_mt5_{giveaway_type} = {context.user_data.get(f'awaiting_mt5_{giveaway_type}')}")
            
            # Check if user is awaiting MT5 input for this specific type
            if context.user_data.get(f'awaiting_mt5_{giveaway_type}'):
                print(f"‚úÖ DEBUG: Processing MT5 input for {giveaway_type}")
                await self.giveaway_systems[giveaway_type].handle_mt5_input(update, context, giveaway_type)
            else:
                print(f"‚ö†Ô∏è DEBUG: User not awaiting MT5 input for {giveaway_type}")
        except Exception as e:
            logging.error(f"Error routing MT5 input for {giveaway_type}: {e}")
            print(f"‚ùå DEBUG: Error in _route_mt5_input: {e}")

    async def _handle_mt5_input_universal(self, update, context):
        """üÜï Handler universal para input de MT5"""
        try:
            print(f"üîç DEBUG: MT5 input received: {update.message.text}")
            
            # Verificar para qu√© tipo est√° esperando input
            for giveaway_type in self.available_types:
                if context.user_data.get(f'awaiting_mt5_{giveaway_type}'):
                    print(f"‚úÖ DEBUG: Found awaiting type: {giveaway_type}")
                    await self._route_mt5_input(update, context, giveaway_type)
                    return
            
            print("‚ö†Ô∏è DEBUG: No awaiting type found for MT5 input")
            await update.message.reply_text(
                "‚ÑπÔ∏è <b>No active registration</b>\n\nUse /start to begin participation in a giveaway.",
                parse_mode='HTML'
            )
            
        except Exception as e:
            logging.error(f"Error in universal MT5 handler: {e}")   

    async def _handle_invalid_input(self, update, context):
        """üîÑ MODIFIED: Handle invalid input with type awareness"""
        try:
            # Check which giveaway type is awaiting input
            for giveaway_type in self.available_types:
                if context.user_data.get(f'awaiting_mt5_{giveaway_type}'):
                    remaining_attempts = 4 - context.user_data.get(f'mt5_attempts_{giveaway_type}', 0)
                    
                    if remaining_attempts > 0:
                        invalid_message = f"""‚ùå <b>Invalid input</b>

Please send only your MT5 account number.

üí° <b>Valid examples:</b>
‚Ä¢ 12345678
‚Ä¢ 87654321

‚ùå <b>Not valid:</b>
‚Ä¢ Text (like "{update.message.text[:10]}...")
‚Ä¢ Numbers with spaces
‚Ä¢ Special characters

üîÑ Attempts remaining: <b>{remaining_attempts}</b>

‚ö†Ô∏è Send only numbers:"""

                        await update.message.reply_text(invalid_message, parse_mode='HTML')
                    else:
                        # No attempts remaining
                        await participation_flow._handle_max_attempts_reached(update, context, 4, giveaway_type )
                    return
                    
        except Exception as e:
            logging.error(f"Error handling invalid input: {e}")



# Sistema de salud y utilidades:
    def verify_all_systems_health(self):
        """üÜï NEW: Comprehensive health check for all systems"""
        try:
            health_report = {
                'overall_status': 'healthy',
                'systems': {},
                'issues': [],
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            for giveaway_type in self.available_types:
                try:
                    giveaway_system = self.giveaway_systems[giveaway_type]
                    
                    # Test basic operations
                    stats = giveaway_system.get_stats(giveaway_type)
                    pending = giveaway_system.get_pending_winners(giveaway_type)
                    config = giveaway_system.get_giveaway_config(giveaway_type)
                    
                    # Check file access
                    file_paths = giveaway_system.get_file_paths(giveaway_type)
                    files_ok = all(os.path.exists(path) or path.endswith('.csv') for path in file_paths.values())
                    
                    system_status = {
                        'status': 'healthy',
                        'stats_accessible': bool(stats),
                        'pending_count': len(pending),
                        'files_accessible': files_ok,
                        'config_loaded': bool(config),
                        'prize_amount': giveaway_system.get_prize_amount(giveaway_type)
                    }
                    
                    health_report['systems'][giveaway_type] = system_status
                    
                except Exception as e:
                    health_report['systems'][giveaway_type] = {
                        'status': 'error',
                        'error': str(e)
                    }
                    health_report['issues'].append(f"{giveaway_type}: {str(e)}")
                    health_report['overall_status'] = 'degraded'
            
            # Check configuration
            try:
                bot_config = self.config_loader.get_bot_config()
                config_ok = all(key in bot_config for key in ['channel_id', 'admin_id'])
                if not config_ok:
                    health_report['issues'].append("Configuration incomplete")
                    health_report['overall_status'] = 'degraded'
            except Exception as e:
                health_report['issues'].append(f"Configuration error: {e}")
                health_report['overall_status'] = 'error'
            
            return health_report
            
        except Exception as e:
            logging.error(f"Error in health check: {e}")
            return {
                'overall_status': 'error',
                'error': str(e),
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }

    async def emergency_system_check(self):
        """üÜï NEW: Emergency check and notification"""
        try:
            health_report = self.verify_all_systems_health()
            
            if health_report['overall_status'] != 'healthy':
                # Send emergency notification to admin
                message = f"üö® <b>GIVEAWAY SYSTEM ALERT</b>\n\n"
                message += f"Status: <b>{health_report['overall_status'].upper()}</b>\n"
                message += f"Time: {health_report['timestamp']}\n\n"
                
                if health_report.get('issues'):
                    message += "<b>Issues detected:</b>\n"
                    for issue in health_report['issues'][:5]:  # Limit to 5 issues
                        message += f"‚Ä¢ {issue}\n"
                
                message += f"\nüîß Please check the system immediately."
                
                await self.app.bot.send_message(
                    chat_id=self.admin_id,
                    text=message,
                    parse_mode='HTML'
                )
                
                logging.warning(f"Emergency system alert sent: {health_report['overall_status']}")
                return False
            
            return True
            
        except Exception as e:
            logging.error(f"Error in emergency system check: {e}")
            return False

    def get_system_info(self):
        """üÜï NEW: Get comprehensive system information"""
        try:
            return  {
                'integration_type': 'MultiGiveawayIntegration',
                'available_types': self.available_types,
                'total_systems': len(self.giveaway_systems),
                'admin_id': self.admin_id,
                'channel_id': self.channel_id,
                'automation_enabled': bool(self.automation_manager.scheduler),
                'config_loaded': bool(self.config_loader),
                'systems_status': {
                    giveaway_type: {
                        'operational': True,
                        'today_participants': giveaway_system.get_stats(giveaway_type).get('today_participants', 0),
                        'total_winners': giveaway_system.get_stats(giveaway_type).get('total_winners', 0),
                        'prize_amount': giveaway_system.get_prize_amount(giveaway_type)
                    }
                    for giveaway_type, giveaway_system in self.giveaway_systems.items()
                }
            }
            
            # return system_info
            
        except Exception as e:
            logging.error(f"Error getting system info: {e}")
            return {'error': str(e)}
        

    # Notificaciones especializadas:
    async def _notify_main_admin_only(self, winner, giveaway_type, executed_by):
        """üÜï NEW: Send notification ONLY to main administrator"""
        try:
            # Get main admin ID from config
            main_admin_id = self.admin_id  # This is your ID from config
            
            username = winner.get('username', '').strip()
            first_name = winner.get('first_name', 'N/A')
            winner_display = f"@{username}" if username else first_name
            
            # Get prize amount
            # giveaway_system = self.get_giveaway_system(giveaway_type)
            prize = self.giveaway_systems[giveaway_type].get_prize_amount(giveaway_type)
            
            # Create comprehensive notification for main admin
            main_admin_message = f"""ü§ñ <b>AUTOMATIC {giveaway_type.upper()} WINNER - MAIN ADMIN NOTIFICATION</b>

    üéâ <b>Winner Selected:</b> {first_name} ({winner_display})
    üìä <b>MT5 Account:</b> <code>{winner['mt5_account']}</code>
    üí∞ <b>Prize:</b> ${prize} USD
    üéØ <b>Giveaway Type:</b> {giveaway_type.upper()}
    üë§ <b>Executed by:</b> {executed_by}
    üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

    ‚ö†Ô∏è <b>PAYMENT REQUIRED:</b>
    üí∏ Transfer ${prize} USD to MT5 account: <code>{winner['mt5_account']}</code>

    üí° <b>Confirmation Commands:</b>
    - <code>/admin_confirm_{giveaway_type} {username if username else winner['telegram_id']}</code>
    - Or use the admin panel buttons

    üîî <b>Notification Status:</b>
    ‚îú‚îÄ Main Admin: ‚úÖ You (individual notification)
    ‚îú‚îÄ Admin Channel: ‚úÖ Group notification sent
    ‚îî‚îÄ Other Admins: ‚ùå No individual spam

    üéØ <b>Next Steps:</b>
    1Ô∏è‚É£ Process payment to MT5 account
    2Ô∏è‚É£ Confirm using command or admin panel
    3Ô∏è‚É£ Winner will be announced automatically"""

            # Send only to main admin
            await self.app.bot.send_message(
                chat_id=main_admin_id,
                text=main_admin_message,
                parse_mode='HTML'
            )
            
            logging.info(f"Main admin notification sent for {giveaway_type} winner: {winner['telegram_id']}")
            
        except Exception as e:
            logging.error(f"Error notifying main admin: {e}")

    async def _send_admin_channel_notification(self, giveaway_type: str, winner=None, notification_type='winner', custom_message=None):
        """üÜï Send notification to admin channel if configured"""
        try:
            admin_config = self.config_loader.get_all_config().get('admin_notifications', {})
            admin_channel_id = admin_config.get('admin_channel_id')
            
            if not admin_channel_id  or admin_channel_id == "-1001234567890":
                logging.info("No admin channel configured, skipping group notification")
                return
                
            
            if custom_message:
                message = custom_message
            elif notification_type == 'winner' and winner:
                prize = self.giveaway_systems[giveaway_type].get_prize_amount(giveaway_type)

                username = winner.get('username', '')
                username_display = f"@{username}" if username else "no_username"
                
                message = f"""ü§ñ <b>AUTOMATIC DRAW COMPLETED</b>

üéØ <b>Giveaway:</b> {giveaway_type.upper()} (${prize} USD)
üéâ <b>Winner:</b> {winner.get('first_name', 'N/A')} ({username_display})
üìä <b>MT5 Account:</b> <code>{winner['mt5_account']}</code>
üìÖ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö†Ô∏è <b>PAYMENT REQUIRED</b> Pending manual transfer
üí∏ Transfer ${prize} USD to account <code>{winner['mt5_account']}</code>
üì± Confirm: <code>/admin_confirm_{giveaway_type} {username or winner['telegram_id']}</code>

üîî Individual notifications sent to authorized payment admins.
üéØ Winner will receive private congratulation after payment confirmation."""
            else:
                return  # No message to send
            
            await self.app.bot.send_message(
                chat_id=admin_channel_id,
                text=message,
                parse_mode='HTML'
            )
            
            logging.info(f"‚úÖ Admin channel notification sent for {giveaway_type} {notification_type}")
            
        except Exception as e:
            logging.error(f"Error sending admin channel notification: {e}")

    async def notify_payment_admins_new_winner(self, context, winner, giveaway_type, executed_by):
        """üîÑ MODIFIED: Simplified notification - only main admin + channel"""
        try:
            logging.info(f"Sending {giveaway_type} winner notifications...")
            
            # 1Ô∏è‚É£ Notify main admin individually (detailed notification)
            await self._notify_main_admin_only(winner, giveaway_type, executed_by)
            
            # 2Ô∏è‚É£ Notify admin channel (group notification)
            await self._send_admin_channel_notification(giveaway_type, winner, 'winner')
            
            # ‚úÖ SIMPLIFIED: No more individual spam to all admins
            logging.info(f"{giveaway_type.title()} notifications sent: Main admin + Admin channel")
            
        except Exception as e:
            logging.error(f"Error in simplified notification system: {e}")

    # Helpers de sistema:
    




    # TELEGRAM INTEGRATION UTILS
    def _get_permission_manager_from_callback(self):
        """üÜï Helper para obtener permission manager en funciones de callback"""
        try:
            if hasattr(self, 'app') and hasattr(self.app, 'bot_data'):
                return self.app.bot_data.get('permission_manager')
            return None
        except Exception as e:
            logging.error(f"Error getting permission manager from callback: {e}")
            return None

    async def _generate_main_admin_panel_content(self, user_id, permission_manager):
        try:
            admin_info = permission_manager.get_admin_info(user_id) if permission_manager else None
            admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
            
            # üö® DETECTAR VIEW_ONLY (retorna None para que la funci√≥n llamadora maneje)
            if admin_info and admin_info.get('permission_group') == 'VIEW_ONLY':
                return None, None, 'VIEW_ONLY'
            
            # üìä OBTENER ESTAD√çSTICAS (copiado de admin_panel actual)
            total_pending = 0
            total_today = 0
            stats_summary = []
            
            for giveaway_type in ['daily', 'weekly', 'monthly']:
                giveaway_system = self.get_giveaway_system(giveaway_type)
                stats = self.giveaway_systems[giveaway_type].get_stats(giveaway_type)
                pending_count = len(self.giveaway_systems[giveaway_type].get_pending_winners(giveaway_type))
                prize = self.giveaway_systems[giveaway_type].get_prize_amount(giveaway_type)
                today_participants = stats.get('today_participants', 0)
                
                total_pending += pending_count
                total_today += today_participants
                
                # Verificar si ventana de participaci√≥n est√° abierta
                is_open = self.giveaway_systems[giveaway_type].is_participation_window_open(giveaway_type)
                status_emoji = "üü¢" if is_open else "üî¥"
                
                stats_summary.append({
                    'type': giveaway_type,
                    'prize': prize,
                    'today_participants': today_participants,
                    'pending': pending_count,
                    'total_winners': stats.get('total_winners', 0),
                    'status_emoji': status_emoji,
                    'is_open': is_open
                })
            
            # üìù CONSTRUIR MENSAJE (copiado de admin_panel actual)
            permission_level = admin_info.get('permission_group', 'Unknown') if admin_info else 'Unknown'
            # Construir mensaje del panel (adaptado seg√∫n permisos)
            admin_name = admin_info.get('name', 'Admin') if admin_info else 'Unknown'
            permission_level = admin_info.get('permission_group', 'Unknown') if admin_info else 'Unknown'
            
            message = f"üéõÔ∏è <b>MULTI-GIVEAWAY ADMIN PANEL</b>\n"
            message += f"üë§ <b>Access Level:</b> {permission_level}\n"
            message += f"üîë <b>Admin:</b> {admin_name}\n\n"
            
            # Estado general
            message += f"üìä <b>System Status:</b>\n"
            message += f"‚îú‚îÄ Today's participants: <b>{total_today}</b>\n"
            message += f"‚îú‚îÄ Pending winners: <b>{total_pending}</b>\n"
            message += f"‚îî‚îÄ System health: {'üü¢ Operational' if total_pending < 10 else '‚ö†Ô∏è High pending'}\n\n"
            
            # Estado por tipo
            message += f"üéØ <b>Giveaway Types:</b>\n"
            for stat in stats_summary:
                message += f"{stat['status_emoji']} <b>{stat['type'].upper()}</b> (${stat['prize']}): "
                message += f"{stat['today_participants']} today, {stat['pending']} pending\n"
            
            message += f"\nüöÄ <b>Available Actions:</b>"
            from datetime import datetime
            refresh_time = datetime.now().strftime('%H:%M:%S')
            message += f"\n\n‚è∞ <b>Last updated:</b> {refresh_time} London Time"
            # Crear botones adaptados seg√∫n permisos
            buttons = []
            
            # 6Ô∏è‚É£ BOTONES ADAPTATIVOS SEG√öN PERMISOS
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
                buttons.append([
                    InlineKeyboardButton("üìÖ Daily", callback_data="panel_daily"),
                    InlineKeyboardButton("üìÖ Weekly", callback_data="panel_weekly"),
                    InlineKeyboardButton("üìÖ Monthly", callback_data="panel_monthly")
                ])
            # Fila 1: Acciones principales (solo si tiene permisos)
            row1 = []
            if permission_manager.has_permission(user_id, SystemAction.SEND_DAILY_INVITATION):
                row1.append(InlineKeyboardButton("üì¢ Send Invitations", callback_data="panel_send_invitations"))
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ALL_PENDING_WINNERS):
                row1.append(InlineKeyboardButton(f"üëë Pending ({total_pending})", callback_data="panel_pending_winners"))
            
            if row1:
                buttons.append(row1)
            
            # Fila 2: Gesti√≥n de ganadores (solo si tiene permisos) 
            row2 = []            
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
                row2.append(InlineKeyboardButton("üìä Statistics", callback_data="panel_statistics"))
            if permission_manager.has_permission(user_id, SystemAction.VIEW_ADVANCED_STATS):
                row2.append(InlineKeyboardButton("üìà Advanced Analytics", callback_data="panel_advanced_analytics"))
            if row2:
                buttons.append(row2)
            
            # Fila 3: Acceso por tipo (solo para PAYMENT_SPECIALIST+)
            row3 = []
            if permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
                row3.append(InlineKeyboardButton("ü§ñ Automation", callback_data="automation_control"))
            if row3:
                buttons.append(row3)
            
            # Fila 4: Sistema (solo FULL_ADMIN puede ver mantenimiento)
            row4 = []
            row4.append(InlineKeyboardButton("üè• Health Check", callback_data="panel_health"))
            if permission_manager.has_permission(user_id, SystemAction.MANAGE_ADMINS):
                row4.append(InlineKeyboardButton("üîß Maintenance", callback_data="panel_maintenance"))
                # row4.append(InlineKeyboardButton("ü§ñ Auto-Draw", callback_data="automation_control"))
            if row4:
                buttons.append(row4)
            
            
            
            row5 = []            
            if permission_manager.has_permission(user_id, SystemAction.VIEW_BASIC_STATS):
                row5.append(InlineKeyboardButton("üìä Basic Analytics", callback_data="panel_basic_analytics"))
            if row5:
                buttons.append(row5)
            
            # Fila 6: Refresh (siempre disponible)
            buttons.append([
                InlineKeyboardButton("üîÑ Refresh Panel", callback_data="panel_refresh")
            ])
            
            # 7Ô∏è‚É£ MENSAJE INFORMATIVO SOBRE PERMISOS
            if permission_level == "PAYMENT_SPECIALIST":
                message += f"\n\nüí° <b>Note:</b> Some advanced features require FULL_ADMIN permissions"
            
            reply_markup = InlineKeyboardMarkup(buttons)
            return message, reply_markup, 'SUCCESS'
            
        except Exception as e:
            logging.error(f"Error in admin panel: {e}")
            
            return "", None, 'ERROR'
        
    async def admin_panel(self, update, context):
        """üîÑ REFACTORED: Panel administrativo usando funci√≥n base compartida"""
        user_id = update.effective_user.id
        print(f"OJO DEBUG: admin_panel called by user {user_id}")
        
        try:
            config_loader = ConfigLoader()
            bot_config = config_loader.get_bot_config()
            channel_id = bot_config['channel_id']
            
            # 1Ô∏è‚É£ VERIFICACI√ìN PRIMARIA: Telegram admin (siempre debe funcionar)
            member = await context.bot.get_chat_member(channel_id, user_id)
            if member.status not in ['administrator', 'creator']:
                await update.message.reply_text("‚ùå Only administrators can access admin panel")
                return
            
            # 2Ô∏è‚É£ VERIFICACI√ìN DE PERMISOS GRANULARES
            permission_manager = get_permission_manager(context)
            if not permission_manager:
                await update.message.reply_text("‚ùå Permission system not initialized")
                return
            
            # 3Ô∏è‚É£ üÜï USAR FUNCI√ìN BASE COMPARTIDA
            message, reply_markup, status = await self._generate_main_admin_panel_content(user_id, permission_manager)
            
            if status == 'VIEW_ONLY':
                # üö® DETECCI√ìN VIEW_ONLY INMEDIATA - usar funci√≥n espec√≠fica para comandos
                print(f"OJO DEBUG: VIEW_ONLY user {user_id} detected, calling show_view_only_panel_direct")
                await user_commands.show_view_only_panel_direct(self, update, context)
                print(f"‚úÖ DEBUG: show_view_only_panel_direct completed for {user_id}")
                return
            elif status == 'ERROR':
                await update.message.reply_text("‚ùå Error loading admin panel")
                return
            
            # 4Ô∏è‚É£ MOSTRAR PANEL PRINCIPAL (SUCCESS case)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error in admin panel: {e}")
            await update.message.reply_text("‚ùå Error loading admin panel")

    async def _show_unified_panel_inline(self, query):
        """üîÑ REFACTORED: Mostrar panel principal usando funci√≥n base compartida"""
        try:
            user_id = query.from_user.id
            permission_manager = self._get_permission_manager_from_callback()
            
            if not permission_manager:
                await query.edit_message_text("‚ùå Permission system not initialized")
                return
            
            # üÜï USAR FUNCI√ìN BASE COMPARTIDA
            message, reply_markup, status = await self._generate_main_admin_panel_content(user_id, permission_manager)
            
            if status == 'VIEW_ONLY':
                # üö® DETECCI√ìN VIEW_ONLY - usar funci√≥n espec√≠fica para callbacks
                await callback_handlers._show_view_only_panel(self,query)
                return
            elif status == 'ERROR':
                await query.edit_message_text("‚ùå Error loading admin panel")
                return
            
            # ‚úÖ MOSTRAR PANEL PRINCIPAL (SUCCESS case)
            await query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logging.error(f"Error showing unified panel inline: {e}")
            await query.edit_message_text("‚ùå Error loading admin panel")